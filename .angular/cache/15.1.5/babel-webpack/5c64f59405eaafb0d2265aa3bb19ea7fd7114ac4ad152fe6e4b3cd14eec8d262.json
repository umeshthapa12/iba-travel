{"ast":null,"code":"import { interval, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DateCountdown {\n  constructor(elm) {\n    // For displaying countdown date\n    this.message = '';\n    // Functions for Calculating date\n    this.bookingEndDateTimer = setInterval(() => {\n      let futureDate = new Date(this.endDate).getTime();\n      let today = new Date().getTime();\n      let distance = futureDate - today;\n      this.days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      this.hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n      this.min = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      this.seconds = Math.floor(distance % (1000 * 60) / 1000);\n      if (distance < 0) {\n        this.days = 0;\n        this.hours = 0;\n        this.min = 0;\n        this.seconds = 0;\n      }\n    });\n    this.futureString = elm.nativeElement.getAttribute(this.endDate);\n  }\n  // Return calculated date countdown\n  dhms() {\n    return [this.days + 'd', this.hours + 'h', this.min + 'm', this.seconds + 's'].join(' ');\n  }\n  ngOnInit() {\n    this.bookingEndDateTimer;\n    this.future = new Date(this.futureString);\n    this.counter$ = interval(1000).pipe(map(() => {\n      return Math.floor((this.future.getTime() - new Date().getTime()) / 1000);\n    }));\n    // this.counter$ = Observable.interval(1000).map(() => {\n    //   return Math.floor((this.future.getTime() - new Date().getTime()) / 1000);\n    // });\n    this.subscription = this.counter$.subscribe(() => this.message = this.dhms());\n  }\n  // Distroy Component\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nDateCountdown.ɵfac = function DateCountdown_Factory(t) {\n  return new (t || DateCountdown)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nDateCountdown.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DateCountdown,\n  selectors: [[\"date-countdown\"]],\n  inputs: {\n    endDate: \"endDate\"\n  },\n  decls: 2,\n  vars: 1,\n  template: function DateCountdown_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.message, \" \");\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAASA,QAAQ,EAAEC,GAAG,QAAkC,MAAM;;AAU9D,OAAM,MAAOC,aAAa;EAqBxBC,YAAYC,GAAe;IAf3B;IACO,YAAO,GAAW,EAAE;IA2C3B;IACA,wBAAmB,GAAGC,WAAW,CAAC,MAAK;MACrC,IAAIC,UAAU,GAAG,IAAIC,IAAI,CAAC,IAAI,CAACC,OAAO,CAAC,CAACC,OAAO,EAAE;MACjD,IAAIC,KAAK,GAAG,IAAIH,IAAI,EAAE,CAACE,OAAO,EAAE;MAChC,IAAIE,QAAQ,GAAGL,UAAU,GAAGI,KAAK;MACjC,IAAI,CAACE,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;MACxD,IAAI,CAACI,KAAK,GAAGF,IAAI,CAACC,KAAK,CACpBH,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CACtD;MACD,IAAI,CAACK,GAAG,GAAGH,IAAI,CAACC,KAAK,CAAEH,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;MAClE,IAAI,CAACM,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAAEH,QAAQ,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,IAAI,CAAC;MAC1D,IAAIA,QAAQ,GAAG,CAAC,EAAE;QAChB,IAAI,CAACC,IAAI,GAAG,CAAC;QACb,IAAI,CAACG,KAAK,GAAG,CAAC;QACd,IAAI,CAACC,GAAG,GAAG,CAAC;QACZ,IAAI,CAACC,OAAO,GAAG,CAAC;;IAEpB,CAAC,CAAC;IA7CA,IAAI,CAACC,YAAY,GAAGd,GAAG,CAACe,aAAa,CAACC,YAAY,CAAC,IAAI,CAACZ,OAAO,CAAC;EAClE;EAEA;EACAa,IAAI;IACF,OAAO,CACL,IAAI,CAACT,IAAI,GAAG,GAAG,EACf,IAAI,CAACG,KAAK,GAAG,GAAG,EAChB,IAAI,CAACC,GAAG,GAAG,GAAG,EACd,IAAI,CAACC,OAAO,GAAG,GAAG,CACnB,CAACK,IAAI,CAAC,GAAG,CAAC;EACb;EAEAC,QAAQ;IACN,IAAI,CAACC,mBAAmB;IACxB,IAAI,CAACC,MAAM,GAAG,IAAIlB,IAAI,CAAC,IAAI,CAACW,YAAY,CAAC;IACzC,IAAI,CAACQ,QAAQ,GAAG1B,QAAQ,CAAC,IAAI,CAAC,CAAC2B,IAAI,CAAC1B,GAAG,CAAC,MAAK;MACzC,OAAOY,IAAI,CAACC,KAAK,CAAC,CAAC,IAAI,CAACW,MAAM,CAAChB,OAAO,EAAE,GAAG,IAAIF,IAAI,EAAE,CAACE,OAAO,EAAE,IAAI,IAAI,CAAC;IAC1E,CAAC,CAAC,CAAC;IACL;IACA;IACA;IAEA,IAAI,CAACmB,YAAY,GAAG,IAAI,CAACF,QAAQ,CAACG,SAAS,CACzC,MAAO,IAAI,CAACC,OAAO,GAAG,IAAI,CAACT,IAAI,EAAG,CACnC;EACH;EAqBA;EACAU,WAAW;IACT,IAAI,CAACH,YAAY,CAACI,WAAW,EAAE;EACjC;;;mBAxEW9B,aAAa;AAAA;;QAAbA,aAAa;EAAA+B;EAAAC;IAAA1B;EAAA;EAAA2B;EAAAC;EAAAC;IAAA;MALtBC,4BAAM;MACJA,YACF;MAAAA,iBAAO;;;MADLA,eACF;MADEA,4CACF","names":["interval","map","DateCountdown","constructor","elm","setInterval","futureDate","Date","endDate","getTime","today","distance","days","Math","floor","hours","min","seconds","futureString","nativeElement","getAttribute","dhms","join","ngOnInit","bookingEndDateTimer","future","counter$","pipe","subscription","subscribe","message","ngOnDestroy","unsubscribe","selectors","inputs","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Dell\\OneDrive\\Desktop\\iba-travel\\src\\app\\shared\\date-countdown\\date-countdown.ts"],"sourcesContent":["import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { interval, map, Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'date-countdown',\r\n  template: `\r\n    <span>\r\n      {{ message }}\r\n    </span>\r\n  `,\r\n})\r\nexport class DateCountdown implements OnInit, OnDestroy {\r\n  private future: Date;\r\n  private futureString;\r\n  private counter$: Observable<number>;\r\n  private subscription: Subscription;\r\n\r\n  // For displaying countdown date\r\n  public message: string = '';\r\n\r\n  // Get Input Date from parent component\r\n  @Input() endDate:any;\r\n\r\n  //  For storing days count\r\n  public days: any;\r\n  //  For storing hours count\r\n  public hours: any;\r\n  //  For storing minute count\r\n  public min: any;\r\n  //  For storing seconds count\r\n  public seconds: any;\r\n\r\n  constructor(elm: ElementRef) {\r\n    this.futureString = elm.nativeElement.getAttribute(this.endDate);\r\n  }\r\n\r\n  // Return calculated date countdown\r\n  dhms() {\r\n    return [\r\n      this.days + 'd',\r\n      this.hours + 'h',\r\n      this.min + 'm',\r\n      this.seconds + 's',\r\n    ].join(' ');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.bookingEndDateTimer;\r\n    this.future = new Date(this.futureString);\r\n    this.counter$ = interval(1000).pipe(map(() => {\r\n        return Math.floor((this.future.getTime() - new Date().getTime()) / 1000);\r\n      }))\r\n    // this.counter$ = Observable.interval(1000).map(() => {\r\n    //   return Math.floor((this.future.getTime() - new Date().getTime()) / 1000);\r\n    // });\r\n\r\n    this.subscription = this.counter$.subscribe(\r\n      () => (this.message = this.dhms())\r\n    );\r\n  }\r\n\r\n  // Functions for Calculating date\r\n  bookingEndDateTimer = setInterval(() => {\r\n    let futureDate = new Date(this.endDate).getTime();\r\n    let today = new Date().getTime();\r\n    let distance = futureDate - today;\r\n    this.days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n    this.hours = Math.floor(\r\n      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    this.min = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n    this.seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n    if (distance < 0) {\r\n      this.days = 0;\r\n      this.hours = 0;\r\n      this.min = 0;\r\n      this.seconds = 0;\r\n    }\r\n  });\r\n\r\n  // Distroy Component\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n\r\n// <date-countdown [endDate]=\"project?.bookingEndDate\"></date-countdown>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}