{"ast":null,"code":"import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, tap, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i9 from '@angular/material/divider';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6._emitSelectAllBooleanToParent($event.checked));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toggleAllCheckboxTooltipPosition);\n  }\n}\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11._reset(true));\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\nfunction MatSelectSearchComponent_div_10_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\nfunction MatSelectSearchComponent_div_10_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\nfunction MatSelectSearchComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_10_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_10_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r14 = i0.ɵɵreference(3);\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\nclass MatSelectSearchClearDirective {}\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n  return new (t || MatSelectSearchClearDirective)();\n};\nMatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }], null, null);\n})();\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {}\nMatSelectNoEntriesFoundDirective.ɵfac = function MatSelectNoEntriesFoundDirective_Factory(t) {\n  return new (t || MatSelectNoEntriesFoundDirective)();\n};\nMatSelectNoEntriesFoundDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectNoEntriesFoundDirective,\n  selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectNoEntriesFoundDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectNoEntriesFound]'\n    }]\n  }], null, null);\n})();\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n  constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, matFormField = null, defaultOptions) {\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n    this.type = 'text';\n    /** Font-based icon used for displaying Close-Icon */\n    this.closeIcon = 'close';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n    this.toggleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n    this.toggleAll = new EventEmitter();\n    this.onTouched = _ => {};\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n    this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    this.applyDefaultOptions(defaultOptions);\n  }\n  /** Current search value */\n  get value() {\n    return this._formControl.value;\n  }\n  /** Reference to the MatSelect options */\n  set _options(_options) {\n    this._options$.next(_options);\n  }\n  get _options() {\n    return this._options$.getValue();\n  }\n  applyDefaultOptions(defaultOptions) {\n    if (!defaultOptions) {\n      return;\n    }\n    for (const key of configurableDefaultOptions) {\n      if (defaultOptions.hasOwnProperty(key)) {\n        this[key] = defaultOptions[key];\n      }\n    }\n  }\n  ngOnInit() {\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n      this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n      if (opened) {\n        this.updateInputWidth();\n        // focus the search field when opening\n        if (!this.disableInitialFocus) {\n          this._focus();\n        }\n      } else {\n        // clear it when closing\n        if (this.clearSearchInput) {\n          this._reset();\n        }\n      }\n    });\n    // set the first item active after the options changed\n    this.matSelect.openedChange.pipe(take(1), switchMap(_ => {\n      this._options = this.matSelect.options;\n      // Closure variable for tracking the most recent first option.\n      // In order to avoid avoid causing the list to\n      // scroll to the top when options are added to the bottom of\n      // the list (eg: infinite scroll), we compare only\n      // the changes to the first options to determine if we\n      // should set the first item as active.\n      // This prevents unnecessary scrolling to the top of the list\n      // when options are appended, but allows the first item\n      // in the list to be set as active by default when there\n      // is no active selection\n      let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n      return this._options.changes.pipe(tap(() => {\n        // avoid \"expression has been changed\" error\n        setTimeout(() => {\n          // Convert the QueryList to an array\n          const options = this._options.toArray();\n          // The true first item is offset by 1\n          const currentFirstOption = options[this.getOptionsLengthOffset()];\n          const keyManager = this.matSelect._keyManager;\n          if (keyManager && this.matSelect.panelOpen) {\n            // set first item active and input width\n            // Check to see if the first option in these changes is different from the previous.\n            const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n            // CASE: The first option is different now.\n            // Indiciates we should set it as active and scroll to the top.\n            if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n              keyManager.setFirstItemActive();\n            }\n            // wait for panel width changes\n            setTimeout(() => {\n              this.updateInputWidth();\n            });\n          }\n          // Update our reference\n          previousFirstOption = currentFirstOption;\n        });\n      }));\n    })).pipe(takeUntil(this._onDestroy)).subscribe();\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect.panelOpen) {\n        this.updateInputWidth();\n      }\n    });\n    this.initMultipleHandling();\n    this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n  _emitSelectAllBooleanToParent(state) {\n    this.toggleAll.emit(state);\n  }\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n  _isToggleAllCheckboxVisible() {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n      event.stopPropagation();\n    }\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    }\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        this.unselectActiveDescendant();\n        this.activeDescendant = this._options.toArray()[index]._getHostElement();\n        this.activeDescendant.setAttribute('aria-selected', 'true');\n        this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n      }\n    }\n  }\n  writeValue(value) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n  onBlur() {\n    this.unselectActiveDescendant();\n    this.onTouched();\n  }\n  registerOnChange(fn) {\n    this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Focuses the search input field\n   */\n  _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n    panel.scrollTop = scrollTop;\n  }\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  _reset(focus) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n      return;\n    }\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n    this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(values => {\n      let restoreSelectedValues = false;\n      if (this.matSelect.multiple) {\n        if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n          if (!values || !Array.isArray(values)) {\n            values = [];\n          }\n          const optionValues = this.matSelect.options.map(option => option.value);\n          this.previousSelectedValues.forEach(previousValue => {\n            if (!values.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n              // if a value that was selected before is deselected and not found in the options, it was deselected\n              // due to the filtering, so we restore it.\n              values.push(previousValue);\n              restoreSelectedValues = true;\n            }\n          });\n        }\n      }\n      this.previousSelectedValues = values;\n      if (restoreSelectedValues) {\n        this.matSelect._onChange(values);\n      }\n    });\n  }\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element = this.innerSelectSearch.nativeElement;\n    let panelElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  getOptionsLengthOffset() {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  unselectActiveDescendant() {\n    this.activeDescendant?.removeAttribute('aria-selected');\n    this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n  }\n}\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n};\nMatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      i0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    closeIcon: \"closeIcon\",\n    closeSvgIcon: \"closeSvgIcon\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectSearchComponent),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 12,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      i0.ɵɵelementStart(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelement(9, \"mat-divider\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, MatSelectSearchComponent_div_10_Template, 4, 2, \"div\", 8);\n      i0.ɵɵpipe(11, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.searching);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(11, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.MatIconButton, i5.MatCheckbox, i6.MatIcon, i7.MatProgressSpinner, i8.MatTooltip, i9.MatDivider, i2.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-input[_ngcontent-%COMP%]{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-left:5px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding-top:8px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:0}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:5px}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MatSelectSearchComponent),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\",\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i10.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i11.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: i12.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeSvgIcon: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    alwaysRestoreSelectedOptionsMulti: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective]\n    }],\n    noEntriesFound: [{\n      type: ContentChild,\n      args: [MatSelectNoEntriesFoundDirective]\n    }]\n  });\n})();\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '7.0.0';\nclass NgxMatSelectSearchModule {}\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n  return new (t || NgxMatSelectSearchModule)();\n};\nNgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatSelectSearchModule\n});\nNgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule, MatDividerModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule, MatDividerModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions };","map":{"version":3,"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","NgModule","i3","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i11","MatOption","i12","MatFormField","i10","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","tap","filter","i1","i2","CommonModule","i4","MatButtonModule","i5","MatCheckboxModule","i6","MatIconModule","i7","MatProgressSpinnerModule","i8","MatTooltipModule","i9","MatDividerModule","MatSelectSearchClearDirective","ɵfac","ɵdir","type","args","selector","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","MatSelectNoEntriesFoundDirective","MatSelectSearchComponent","constructor","matSelect","changeDetectorRef","_viewportRuler","matOption","matFormField","defaultOptions","placeholderLabel","closeIcon","noEntriesFoundLabel","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toggleAllCheckboxTooltipPosition","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","next","getValue","key","hasOwnProperty","ngOnInit","disabled","_getHostElement","classList","add","setAttribute","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_reset","previousFirstOption","setTimeout","currentFirstOption","keyManager","_keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","change","initMultipleHandling","markForCheck","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","unselectActiveDescendant","activeDescendant","searchSelectInput","nativeElement","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","undefined","registerOnTouched","panel","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","Array","isArray","optionValues","forEach","previousValue","some","v","push","_onChange","innerSelectSearch","element","panelElement","parentElement","contains","style","width","clientWidth","removeAttribute","ChangeDetectorRef","ViewportRuler","ɵcmp","provide","useExisting","multi","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatIconButton","MatCheckbox","MatIcon","MatProgressSpinner","MatTooltip","MatDivider","AsyncPipe","providers","changeDetection","OnPush","template","styles","decorators","closeSvgIcon","read","static","clearIcon","noEntriesFound","MatSelectSearchVersion","NgxMatSelectSearchModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/Dell/OneDrive/Desktop/iba-travel/node_modules/ngx-mat-select-search/fesm2020/ngx-mat-select-search.mjs"],"sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, tap, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i9 from '@angular/material/divider';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toggleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n            this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1), switchMap((_) => {\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            return this._options.changes\n                .pipe(tap(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            }));\n        }))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe();\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                this.unselectActiveDescendant();\n                this.activeDescendant = this._options.toArray()[index]._getHostElement();\n                this.activeDescendant.setAttribute('aria-selected', 'true');\n                this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n            }\n        }\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.unselectActiveDescendant();\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    unselectActiveDescendant() {\n        this.activeDescendant?.removeAttribute('aria-selected');\n        this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { kind: \"component\", type: i4.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i5.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"], exportAs: [\"matProgressSpinner\"] }, { kind: \"directive\", type: i8.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { kind: \"component\", type: i9.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i10.MatSelect, decorators: [{\n                    type: Inject,\n                    args: [MatSelect]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i11.MatOption, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MatOption]\n                }] }, { type: i12.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MatFormField]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toggleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '7.0.0';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule,\n        MatDividerModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule,\n        MatDividerModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule,\n                        MatDividerModule,\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions };\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,wBAAwB,CAAC;EAC3BC,WAAW,CAACC,SAAS,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,SAAS,GAAG,IAAI,EAAEC,YAAY,GAAG,IAAI,EAAEC,cAAc,EAAE;IAC7G,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC;IACA,IAAI,CAACE,gBAAgB,GAAG,OAAO;IAC/B;IACA,IAAI,CAACd,IAAI,GAAG,MAAM;IAClB;IACA,IAAI,CAACe,SAAS,GAAG,OAAO;IACxB;IACA,IAAI,CAACC,mBAAmB,GAAG,yBAAyB;IACpD;AACR;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B;IACA,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC;IACA,IAAI,CAACC,0BAA0B,GAAG,KAAK;IACvC;AACR;AACA;AACA;IACQ,IAAI,CAACC,4BAA4B,GAAG,KAAK;IACzC;IACA,IAAI,CAACC,qCAAqC,GAAG,KAAK;IAClD;IACA,IAAI,CAACC,SAAS,GAAG,iBAAiB;IAClC;IACA,IAAI,CAACC,qBAAqB,GAAG,KAAK;IAClC;IACA,IAAI,CAACC,wBAAwB,GAAG,KAAK;IACrC;IACA,IAAI,CAACC,8BAA8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"},"metadata":{},"sourceType":"module","externalDependencies":[]}