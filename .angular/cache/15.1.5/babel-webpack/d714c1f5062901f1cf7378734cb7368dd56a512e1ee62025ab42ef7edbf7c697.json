{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Input, HostListener, Pipe, Optional, EventEmitter, Component, Output, ChangeDetectionStrategy, ElementRef, ViewEncapsulation, ViewChild, HostBinding, ContentChild, NgModule } from '@angular/core';\nimport { DateTime, Info } from 'ts-luxon';\nimport * as i1$2 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport { BehaviorSubject, Subject, takeUntil as takeUntil$1 } from 'rxjs';\nimport { shareReplay, takeUntil, tap, map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i6 from '@angular/material/button';\nimport { MatButtonModule, MAT_FAB_DEFAULT_OPTIONS } from '@angular/material/button';\nimport * as i7 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i3 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { trigger, transition, style, animate, sequence } from '@angular/animations';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormField, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7$1 from '@angular/material/core';\nimport * as i8 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i5$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { PortalModule } from '@angular/cdk/portal';\nconst _c0 = function (a0) {\n  return {\n    \"active\": a0\n  };\n};\nfunction NgxMatTimepickerDialControlComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 2);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.time = $event);\n    })(\"input\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateTime());\n    })(\"focus\", function NgxMatTimepickerDialControlComponent_input_0_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.saveTimeAndChangeTimeUnit($event, ctx_r6.timeUnit));\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx_r0.isActive))(\"ngModel\", i0.ɵɵpipeBind3(1, 4, ctx_r0.time, ctx_r0.timeUnit, true))(\"disabled\", ctx_r0.disabled)(\"ngxMatTimepickerAutofocus\", ctx_r0.isActive);\n  }\n}\nfunction NgxMatTimepickerDialControlComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onModelChange($event));\n    })(\"input\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_input_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.updateTime());\n    })(\"focus\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.saveTimeAndChangeTimeUnit($event, ctx_r10.timeUnit));\n    })(\"keydown\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.onKeydown($event));\n    })(\"keypress\", function NgxMatTimepickerDialControlComponent_ng_template_1_Template_input_keypress_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.changeTimeByKeyboard($event));\n    });\n    i0.ɵɵpipe(1, \"timeLocalizer\");\n    i0.ɵɵpipe(2, \"ngxMatTimepickerParser\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r2.isActive))(\"ngModel\", i0.ɵɵpipeBind3(1, 4, i0.ɵɵpipeBind2(2, 8, ctx_r2.time, ctx_r2.timeUnit), ctx_r2.timeUnit, true))(\"disabled\", ctx_r2.disabled)(\"ngxMatTimepickerAutofocus\", ctx_r2.isActive);\n  }\n}\nfunction NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"@scaleInOut.done\", function NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template_div_animation_scaleInOut_done_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.animationDone());\n    });\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2, \"Current time would be invalid in this period.\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"@scaleInOut\", undefined);\n  }\n}\nfunction NgxMatTimepickerPeriodComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxMatTimepickerPeriodComponent_ng_template_6_div_0_Template, 3, 1, \"div\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.isPeriodAvailable);\n  }\n}\nfunction NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-period\", 7);\n    i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template_ngx_mat_timepicker_period_periodChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.changePeriod($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectedPeriod\", ctx_r0.period)(\"activeTimeUnit\", ctx_r0.activeTimeUnit)(\"maxTime\", ctx_r0.maxTime)(\"minTime\", ctx_r0.minTime)(\"format\", ctx_r0.format)(\"hours\", ctx_r0.hours)(\"minutes\", ctx_r0.minutes)(\"selectedHour\", ctx_r0.hour)(\"meridiems\", ctx_r0.meridiems);\n  }\n}\nfunction NgxMatTimepickerDialComponent_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerDialComponent_div_8_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 11);\n    i0.ɵɵtext(1, \" * use arrows (\");\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3, \"\\u21C5\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \") to change the time\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"timepicker-dial__hint-container--hidden\": a0\n  };\n};\nfunction NgxMatTimepickerDialComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, NgxMatTimepickerDialComponent_div_8_ng_container_1_Template, 1, 0, \"ng-container\", 9);\n    i0.ɵɵtemplate(2, NgxMatTimepickerDialComponent_div_8_ng_template_2_Template, 5, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r5 = i0.ɵɵreference(3);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, !ctx_r1.isHintVisible));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.editableHintTmpl ? ctx_r1.editableHintTmpl : _r5);\n  }\n}\nconst _c2 = [\"clockFace\"];\nconst _c3 = [\"clockHand\"];\nconst _c4 = function (a0) {\n  return {\n    \"transform\": a0\n  };\n};\nfunction NgxMatTimepickerFaceComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵpipe(1, \"activeHour\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"timeLocalizer\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r8 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", i0.ɵɵpipeBind3(1, 4, time_r8.time, ctx_r1.selectedTime == null ? null : ctx_r1.selectedTime.time, ctx_r1.isClockFaceDisabled) ? ctx_r1.color : undefined)(\"ngStyle\", i0.ɵɵpureFunction1(11, _c4, \"rotateZ(-\" + time_r8.angle + \"deg)\"))(\"disabled\", time_r8.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(3, 8, time_r8.time, ctx_r1.timeUnit.HOUR), \" \");\n  }\n}\nfunction NgxMatTimepickerFaceComponent_ng_template_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"button\", 9);\n    i0.ɵɵpipe(2, \"activeMinute\");\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"timeLocalizer\");\n    i0.ɵɵpipe(5, \"minutesFormatter\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const time_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(16, _c4, \"rotateZ(\" + time_r10.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", i0.ɵɵpipeBind4(2, 5, time_r10.time, ctx_r9.selectedTime == null ? null : ctx_r9.selectedTime.time, ctx_r9.minutesGap, ctx_r9.isClockFaceDisabled) ? ctx_r9.color : undefined)(\"ngStyle\", i0.ɵɵpureFunction1(18, _c4, \"rotateZ(-\" + time_r10.angle + \"deg)\"))(\"disabled\", time_r10.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(4, 10, i0.ɵɵpipeBind2(5, 13, time_r10.time, ctx_r9.minutesGap), ctx_r9.timeUnit.MINUTE), \" \");\n  }\n}\nfunction NgxMatTimepickerFaceComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_ng_template_2_div_1_Template, 6, 20, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.faceTime)(\"ngForTrackBy\", ctx_r3.trackByTime);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_1_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngTemplateOutlet\", \"hourButton; context: {$implicit: time}\"]);\n  }\n}\nconst _c5 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction NgxMatTimepickerFaceComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_1_ng_content_1_Template, 1, 0, \"ng-content\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r13 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c4, \"rotateZ(\" + time_r13.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(5, _c5, time_r13));\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_div_1_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngTemplateOutlet\", \"hourButton; context: {$implicit: time}\"]);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_3_div_1_ng_content_1_Template, 1, 0, \"ng-content\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const time_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"top\", \"calc(50% - \" + ctx_r15.innerClockFaceSize + \"px)\")(\"height\", ctx_r15.innerClockFaceSize, \"px\");\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(7, _c4, \"rotateZ(\" + time_r16.angle + \"deg)\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r0)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(9, _c5, time_r16));\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_3_div_1_Template, 2, 11, \"div\", 16);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 2, ctx_r12.faceTime, 12, 24))(\"ngForTrackBy\", ctx_r12.trackByTime);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxMatTimepickerFaceComponent_div_6_div_1_Template, 2, 7, \"div\", 11);\n    i0.ɵɵpipe(2, \"slice\");\n    i0.ɵɵtemplate(3, NgxMatTimepickerFaceComponent_div_6_div_3_Template, 3, 6, \"div\", 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(2, 3, ctx_r5.faceTime, 0, 12))(\"ngForTrackBy\", ctx_r5.trackByTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.faceTime.length > 12);\n  }\n}\nfunction NgxMatTimepickerFaceComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵelement(1, \"span\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r7.color);\n  }\n}\nconst _c6 = [\"*\", \"*\"];\nconst _c7 = function (a0) {\n  return {\n    \"clock-face__clock-hand_minute\": a0\n  };\n};\nfunction NgxMatTimepickerContentComponent_div_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerContentComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerContentComponent_div_0_ng_container_1_Template, 1, 0, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NgxMatTimepickerContentComponent_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 3);\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r3 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\nfunction NgxMatTimepickerContentComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nconst _c8 = [\"*\"];\nfunction NgxMatTimepickerDialogComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"CANCEL \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.color);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"OK \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r3.color);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-24-hours-face\", 17);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r8.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r8.selectedHour))(\"minTime\", ctx_r8.data.minTime)(\"maxTime\", ctx_r8.data.maxTime)(\"format\", ctx_r8.data.format);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-12-hours-face\", 18);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r10.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r10.selectedHour))(\"period\", i0.ɵɵpipeBind1(2, 7, ctx_r10.selectedPeriod))(\"minTime\", ctx_r10.data.minTime)(\"maxTime\", ctx_r10.data.maxTime);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerDialogComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template, 2, 7, \"ngx-mat-timepicker-24-hours-face\", 15);\n    i0.ɵɵtemplate(2, NgxMatTimepickerDialogComponent_div_14_ng_template_2_Template, 3, 9, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.data.format === 24)(\"ngIfElse\", _r9);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-minutes-face\", 19);\n    i0.ɵɵlistener(\"minuteChange\", function NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onMinuteChange($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"color\", ctx_r5.color)(\"selectedMinute\", i0.ɵɵpipeBind1(1, 8, ctx_r5.selectedMinute))(\"selectedHour\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 10, ctx_r5.selectedHour)) == null ? null : tmp_2_0.time)(\"minTime\", ctx_r5.data.minTime)(\"maxTime\", ctx_r5.data.maxTime)(\"format\", ctx_r5.data.format)(\"period\", i0.ɵɵpipeBind1(3, 12, ctx_r5.selectedPeriod))(\"minutesGap\", ctx_r5.data.minutesGap);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerDialogComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"CANCEL \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.color);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵtext(1, \"OK \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r3.color);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-24-hours-face\", 17);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template_ngx_mat_timepicker_24_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r8.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r8.selectedHour))(\"minTime\", ctx_r8.data.minTime)(\"maxTime\", ctx_r8.data.maxTime)(\"format\", ctx_r8.data.format);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-12-hours-face\", 18);\n    i0.ɵɵlistener(\"hourChange\", function NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onHourChange($event));\n    })(\"hourSelected\", function NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template_ngx_mat_timepicker_12_hours_face_hourSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onHourSelected($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"color\", ctx_r10.color)(\"selectedHour\", i0.ɵɵpipeBind1(1, 5, ctx_r10.selectedHour))(\"period\", i0.ɵɵpipeBind1(2, 7, ctx_r10.selectedPeriod))(\"minTime\", ctx_r10.data.minTime)(\"maxTime\", ctx_r10.data.maxTime);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NgxMatTimepickerStandaloneComponent_div_14_ngx_mat_timepicker_24_hours_face_1_Template, 2, 7, \"ngx-mat-timepicker-24-hours-face\", 15);\n    i0.ɵɵtemplate(2, NgxMatTimepickerStandaloneComponent_div_14_ng_template_2_Template, 3, 9, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.data.format === 24)(\"ngIfElse\", _r9);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-minutes-face\", 19);\n    i0.ɵɵlistener(\"minuteChange\", function NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template_ngx_mat_timepicker_minutes_face_minuteChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.onMinuteChange($event));\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    let tmp_2_0;\n    i0.ɵɵproperty(\"color\", ctx_r5.color)(\"selectedMinute\", i0.ɵɵpipeBind1(1, 8, ctx_r5.selectedMinute))(\"selectedHour\", (tmp_2_0 = i0.ɵɵpipeBind1(2, 10, ctx_r5.selectedHour)) == null ? null : tmp_2_0.time)(\"minTime\", ctx_r5.data.minTime)(\"maxTime\", ctx_r5.data.maxTime)(\"format\", ctx_r5.data.format)(\"period\", i0.ɵɵpipeBind1(3, 12, ctx_r5.selectedPeriod))(\"minutesGap\", ctx_r5.data.minutesGap);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerStandaloneComponent_ng_container_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ngx-mat-timepicker-standalone\");\n  }\n}\nfunction NgxMatTimepickerToggleComponent__svg_svg_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c9 = [[[\"\", \"ngxMatTimepickerToggleIcon\", \"\"]]];\nconst _c10 = [\"[ngxMatTimepickerToggleIcon]\"];\nfunction NgxMatTimepickerFieldComponent_mat_form_field_7_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r6);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_mat_form_field_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-form-field\", 9)(1, \"mat-select\", 10);\n    i0.ɵɵlistener(\"selectionChange\", function NgxMatTimepickerFieldComponent_mat_form_field_7_Template_mat_select_selectionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.changePeriod($event));\n    });\n    i0.ɵɵtemplate(2, NgxMatTimepickerFieldComponent_mat_form_field_7_mat_option_2_Template, 2, 2, \"mat-option\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled || ctx_r0.isChangePeriodDisabled)(\"ngModel\", ctx_r0.period);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.periods);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngx-mat-timepicker-toggle\", 13)(1, \"span\", 14);\n    i0.ɵɵtemplate(2, NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_8_ng_container_2_Template, 1, 0, \"ng-container\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(10);\n    const _r3 = i0.ɵɵreference(12);\n    i0.ɵɵproperty(\"for\", _r2)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.toggleIcon || _r3);\n  }\n}\nfunction NgxMatTimepickerFieldComponent_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"watch_later\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c11 = function (a0) {\n  return {\n    \"ngx-mat-timepicker--disabled\": a0\n  };\n};\nvar NgxMatTimepickerFormat;\n(function (NgxMatTimepickerFormat) {\n  NgxMatTimepickerFormat[\"TWELVE\"] = \"hh:mm a\";\n  NgxMatTimepickerFormat[\"TWELVE_SHORT\"] = \"h:m a\";\n  NgxMatTimepickerFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\n  NgxMatTimepickerFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\n})(NgxMatTimepickerFormat || (NgxMatTimepickerFormat = {}));\nvar NgxMatTimepickerPeriods;\n(function (NgxMatTimepickerPeriods) {\n  NgxMatTimepickerPeriods[\"AM\"] = \"AM\";\n  NgxMatTimepickerPeriods[\"PM\"] = \"PM\";\n})(NgxMatTimepickerPeriods || (NgxMatTimepickerPeriods = {}));\n\n// @dynamic\nclass NgxMatTimepickerAdapter {\n  /***\r\n   *  Format hour according to time format (12 or 24)\r\n   */\n  static formatHour(currentHour, format, period) {\n    if (this.isTwentyFour(format)) {\n      return currentHour;\n    }\n    const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\n    if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\n      return 0;\n    } else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\n      return 12;\n    }\n    return hour;\n  }\n  static formatTime(time, opts) {\n    if (!time) {\n      return \"Invalid Time\";\n    }\n    const parsedTime = this.parseTime(time, opts).setLocale(this.defaultLocale);\n    const isTwelve = !this.isTwentyFour(opts.format);\n    if (isTwelve) {\n      return parsedTime.toLocaleString({\n        ...DateTime.TIME_SIMPLE,\n        hour12: isTwelve\n      }).replace(/\\u200E/g, \"\");\n    }\n    return parsedTime.toISOTime({\n      includeOffset: false,\n      suppressMilliseconds: true,\n      suppressSeconds: true\n    }).replace(/\\u200E/g, \"\");\n  }\n  static fromDateTimeToString(time, format) {\n    return time.reconfigure({\n      numberingSystem: this.defaultNumberingSystem,\n      locale: this.defaultLocale\n    }).toFormat(this.isTwentyFour(format) ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE);\n  }\n  static isBetween(time, before, after, unit = \"minutes\") {\n    const innerUnit = unit === \"hours\" ? unit : void 0;\n    return this.isSameOrBefore(time, after, innerUnit) && this.isSameOrAfter(time, before, innerUnit);\n  }\n  static isSameOrAfter(time, compareWith, unit = \"minutes\") {\n    if (unit === \"hours\") {\n      return time.hour >= compareWith.hour;\n    }\n    return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n  }\n  static isSameOrBefore(time, compareWith, unit = \"minutes\") {\n    if (unit === \"hours\") {\n      return time.hour <= compareWith.hour;\n    }\n    return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n  }\n  static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n    if (!time) {\n      return void 0;\n    }\n    const convertedTime = this.parseTime(time, {\n      format\n    });\n    const minutes = convertedTime.minute;\n    if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n      throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n    }\n    const isAfter = min && !max && this.isSameOrAfter(convertedTime, min, granularity);\n    const isBefore = max && !min && this.isSameOrBefore(convertedTime, max, granularity);\n    const between = min && max && this.isBetween(convertedTime, min, max, granularity);\n    const isAvailable = !min && !max;\n    return isAfter || isBefore || between || isAvailable;\n  }\n  static isTwentyFour(format) {\n    return format === 24;\n  }\n  static parseTime(time, opts) {\n    const localeOpts = this._getLocaleOptionsByTime(time, opts);\n    let timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n    // If there's a space, means we have the meridiem. Way faster than splitting text\n    // if (~time.indexOf(\" \")) {\n    // 09/02/2023 it seems that sometimes the space from the formatter is a nnbsp (Chromium >= 110)\n    // which causes the indexOf(\" \") to fail: charCode 32, while nbsp is 8239\n    if (time.match(/\\s/g)) {\n      /*\r\n       * We translate the meridiem in simple AM or PM letters (instead of A.M.)\r\n       * because even if we set the locale with NgxMatTimepickerModule.setLocale\r\n       * the default (en-US) will always be used here\r\n       */\n      time = time.replace(/\\.\\s*/g, \"\");\n      timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n    }\n    return DateTime.fromFormat(time.replace(/\\s+/g, \" \"), timeMask, {\n      numberingSystem: localeOpts.numberingSystem,\n      locale: localeOpts.locale\n    });\n  }\n  static toLocaleTimeString(time, opts = {}) {\n    const {\n      format = this.defaultFormat,\n      locale = this.defaultLocale\n    } = opts;\n    let hourCycle = \"h12\";\n    let timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\n    if (this.isTwentyFour(format)) {\n      hourCycle = \"h23\";\n      timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\n    }\n    return DateTime.fromFormat(time, timeMask).reconfigure({\n      locale,\n      numberingSystem: opts.numberingSystem,\n      defaultToEN: opts.defaultToEN,\n      outputCalendar: opts.outputCalendar\n    }).toLocaleString({\n      ...DateTime.TIME_SIMPLE,\n      hourCycle\n    });\n  }\n  /**\r\n   *\r\n   * @param time\r\n   * @param opts\r\n   * @private\r\n   */\n  static _getLocaleOptionsByTime(time, opts) {\n    const {\n      numberingSystem,\n      locale\n    } = DateTime.now().reconfigure({\n      locale: opts.locale,\n      numberingSystem: opts.numberingSystem,\n      outputCalendar: opts.outputCalendar,\n      defaultToEN: opts.defaultToEN\n    }).resolvedLocaleOptions();\n    return isNaN(parseInt(time, 10)) ? {\n      numberingSystem: numberingSystem,\n      locale\n    } : {\n      numberingSystem: this.defaultNumberingSystem,\n      locale: this.defaultLocale\n    };\n  }\n}\nNgxMatTimepickerAdapter.defaultFormat = 12;\nNgxMatTimepickerAdapter.defaultLocale = \"en-US\";\nNgxMatTimepickerAdapter.defaultNumberingSystem = \"latn\";\nvar NgxMatTimepickerUnits;\n(function (NgxMatTimepickerUnits) {\n  NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"HOUR\"] = 0] = \"HOUR\";\n  NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"MINUTE\"] = 1] = \"MINUTE\";\n})(NgxMatTimepickerUnits || (NgxMatTimepickerUnits = {}));\nconst NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken(\"NGX_MAT_TIMEPICKER_CONFIG\");\nfunction provideNgxMatTimepickerOptions(config) {\n  return [{\n    provide: NGX_MAT_TIMEPICKER_CONFIG,\n    useValue: config\n  }];\n}\nconst DEFAULT_HOUR = {\n  time: 12,\n  angle: 360\n};\nconst DEFAULT_MINUTE = {\n  time: 0,\n  angle: 360\n};\nclass NgxMatTimepickerService {\n  constructor() {\n    this._hour$ = new BehaviorSubject(DEFAULT_HOUR);\n    this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);\n    this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);\n  }\n  set hour(hour) {\n    this._hour$.next(hour);\n  }\n  set minute(minute) {\n    this._minute$.next(minute);\n  }\n  set period(period) {\n    const isPeriodValid = period === NgxMatTimepickerPeriods.AM || period === NgxMatTimepickerPeriods.PM;\n    if (isPeriodValid) {\n      this._period$.next(period);\n    }\n  }\n  get selectedHour() {\n    return this._hour$.asObservable();\n  }\n  get selectedMinute() {\n    return this._minute$.asObservable();\n  }\n  get selectedPeriod() {\n    return this._period$.asObservable();\n  }\n  getFullTime(format) {\n    const selectedHour = this._hour$.getValue().time;\n    const selectedMinute = this._minute$.getValue().time;\n    const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n    const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n    const period = format === 12 ? this._period$.getValue() : \"\";\n    const time = `${hour}:${minute} ${period}`.trim();\n    return NgxMatTimepickerAdapter.formatTime(time, {\n      format\n    });\n  }\n  setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n    /* Workaround to double error message*/\n    try {\n      if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\n        this._setDefaultTime(time, format);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  _resetTime() {\n    this.hour = {\n      ...DEFAULT_HOUR\n    };\n    this.minute = {\n      ...DEFAULT_MINUTE\n    };\n    this.period = NgxMatTimepickerPeriods.AM;\n  }\n  _setDefaultTime(time, format) {\n    const defaultDto = NgxMatTimepickerAdapter.parseTime(time, {\n      format\n    });\n    if (defaultDto.isValid) {\n      const period = time.substring(time.length - 2).toUpperCase();\n      const hour = defaultDto.hour;\n      this.hour = {\n        ...DEFAULT_HOUR,\n        time: formatHourByPeriod(hour, period)\n      };\n      this.minute = {\n        ...DEFAULT_MINUTE,\n        time: defaultDto.minute\n      };\n      this.period = period;\n    } else {\n      this._resetTime();\n    }\n  }\n}\nNgxMatTimepickerService.ɵfac = function NgxMatTimepickerService_Factory(t) {\n  return new (t || NgxMatTimepickerService)();\n};\nNgxMatTimepickerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMatTimepickerService,\n  factory: NgxMatTimepickerService.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], null, null);\n})();\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\nfunction formatHourByPeriod(hour, period) {\n  switch (period) {\n    case NgxMatTimepickerPeriods.AM:\n      return hour === 0 ? 12 : hour;\n    case NgxMatTimepickerPeriods.PM:\n      return hour === 12 ? 12 : hour - 12;\n    default:\n      return hour;\n  }\n}\nclass NgxMatTimepickerEventService {\n  constructor() {\n    this._backdropClick$ = new Subject();\n    this._keydownEvent$ = new Subject();\n  }\n  get backdropClick() {\n    return this._backdropClick$.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  get keydownEvent() {\n    return this._keydownEvent$.asObservable().pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  dispatchEvent(event) {\n    switch (event.type) {\n      case \"click\":\n        this._backdropClick$.next(event);\n        break;\n      case \"keydown\":\n        this._keydownEvent$.next(event);\n        break;\n      default:\n        throw new Error(\"no such event type\");\n    }\n  }\n}\nNgxMatTimepickerEventService.ɵfac = function NgxMatTimepickerEventService_Factory(t) {\n  return new (t || NgxMatTimepickerEventService)();\n};\nNgxMatTimepickerEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMatTimepickerEventService,\n  factory: NgxMatTimepickerEventService.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerEventService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken(\"TimeLocale\", {\n  providedIn: \"root\",\n  factory: () => NgxMatTimepickerAdapter.defaultLocale\n});\nclass NgxMatTimepickerLocaleService {\n  constructor(initialLocale) {\n    this._locale = initialLocale;\n  }\n  get locale() {\n    return this._locale;\n  }\n  updateLocale(newValue) {\n    this._locale = newValue || this._initialLocale;\n  }\n}\nNgxMatTimepickerLocaleService.ɵfac = function NgxMatTimepickerLocaleService_Factory(t) {\n  return new (t || NgxMatTimepickerLocaleService)(i0.ɵɵinject(NGX_MAT_TIMEPICKER_LOCALE));\n};\nNgxMatTimepickerLocaleService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMatTimepickerLocaleService,\n  factory: NgxMatTimepickerLocaleService.ɵfac,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerLocaleService, [{\n    type: Injectable,\n    args: [{\n      providedIn: \"root\"\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MAT_TIMEPICKER_LOCALE]\n      }]\n    }];\n  }, null);\n})();\nclass NgxMatTimepickerBaseDirective {\n  constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {\n    this._timepickerSrv = _timepickerSrv;\n    this._eventSrv = _eventSrv;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this.data = data;\n    this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n    this._subsCtrl$ = new Subject();\n    this.color = data.color;\n    this.defaultTime = data.defaultTime;\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get defaultTime() {\n    return this._defaultTime;\n  }\n  set defaultTime(time) {\n    this._defaultTime = time;\n    this._setDefaultTime(time);\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  changePeriod(period) {\n    this._timepickerSrv.period = period;\n    this._onTimeChange();\n  }\n  changeTimeUnit(unit) {\n    this.activeTimeUnit = unit;\n  }\n  close() {\n    this.data.timepickerBaseRef.close();\n  }\n  ngOnDestroy() {\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  ngOnInit() {\n    this._defineTime();\n    this.selectedHour = this._timepickerSrv.selectedHour.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedMinute = this._timepickerSrv.selectedMinute.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.selectedPeriod = this._timepickerSrv.selectedPeriod.pipe(shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$)).subscribe(this._setDefaultTime.bind(this));\n  }\n  onHourChange(hour) {\n    this._timepickerSrv.hour = hour;\n    this._onTimeChange();\n  }\n  onHourSelected(hour) {\n    if (!this.data.hoursOnly) {\n      this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\n    }\n    this.data.timepickerBaseRef.hourSelected.next(hour);\n  }\n  onKeydown(e) {\n    this._eventSrv.dispatchEvent(e);\n    e.stopPropagation();\n  }\n  onMinuteChange(minute) {\n    this._timepickerSrv.minute = minute;\n    this._onTimeChange();\n  }\n  setTime() {\n    this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));\n    this.close();\n  }\n  _defineTime() {\n    const minTime = this.data.minTime;\n    if (minTime && !this.data.time && !this.data.defaultTime) {\n      const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\n      this._setDefaultTime(time);\n    }\n  }\n  _onTimeChange() {\n    const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\n      locale: this._locale,\n      format: this.data.format\n    });\n    this.data.timepickerBaseRef.timeChanged.emit(time);\n  }\n  _setDefaultTime(time) {\n    this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\n  }\n}\nNgxMatTimepickerBaseDirective.ɵfac = function NgxMatTimepickerBaseDirective_Factory(t) {\n  return new (t || NgxMatTimepickerBaseDirective)(i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService), i0.ɵɵdirectiveInject(NGX_MAT_TIMEPICKER_CONFIG));\n};\nNgxMatTimepickerBaseDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatTimepickerBaseDirective,\n  selectors: [[\"\", \"ngxMatTimepickerBase\", \"\"]],\n  hostBindings: function NgxMatTimepickerBaseDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NgxMatTimepickerBaseDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeydown($event);\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    defaultTime: \"defaultTime\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerBaseDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerBase]\"\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerService\n    }, {\n      type: NgxMatTimepickerEventService\n    }, {\n      type: NgxMatTimepickerLocaleService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MAT_TIMEPICKER_CONFIG]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    onKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }]\n  });\n})();\n\n// @dynamic\nclass NgxMatTimepickerUtils {\n  static disableHours(hours, config) {\n    if (config.min || config.max) {\n      return hours.map(value => {\n        const hour = NgxMatTimepickerAdapter.isTwentyFour(config.format) ? value.time : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\n        const currentTime = DateTime.fromObject({\n          hour\n        }).toFormat(NgxMatTimepickerFormat.TWELVE);\n        return {\n          ...value,\n          disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\n        };\n      });\n    }\n    return hours;\n  }\n  static disableMinutes(minutes, selectedHour, config) {\n    if (config.min || config.max) {\n      const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\n      let currentTime = DateTime.fromObject({\n        hour,\n        minute: 0\n      });\n      return minutes.map(value => {\n        currentTime = currentTime.set({\n          minute: value.time\n        });\n        return {\n          ...value,\n          disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime.toFormat(NgxMatTimepickerFormat.TWELVE), config.min, config.max, \"minutes\")\n        };\n      });\n    }\n    return minutes;\n  }\n  static getHours(format) {\n    return Array(format).fill(1).map((v, i) => {\n      const angleStep = 30;\n      const time = v + i;\n      const angle = angleStep * time;\n      return {\n        time: time === 24 ? 0 : time,\n        angle\n      };\n    });\n  }\n  static getMinutes(gap = 1) {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n    for (let i = 0; i < minutesCount; i++) {\n      const angle = angleStep * i;\n      if (i % gap === 0) {\n        minutes.push({\n          time: i,\n          angle: angle !== 0 ? angle : 360\n        });\n      }\n    }\n    return minutes;\n  }\n  static isDigit(e) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n    // Allow: Ctrl/cmd+A\n    e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: Ctrl/cmd+C\n    e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: Ctrl/cmd+X\n    e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true) ||\n    // Allow: home, end, left, right, up, down\n    e.keyCode >= 35 && e.keyCode <= 40) {\n      return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n  }\n}\nvar NgxMatTimepickerMeasure;\n(function (NgxMatTimepickerMeasure) {\n  NgxMatTimepickerMeasure[\"hour\"] = \"hour\";\n  NgxMatTimepickerMeasure[\"minute\"] = \"minute\";\n})(NgxMatTimepickerMeasure || (NgxMatTimepickerMeasure = {}));\nclass NgxMatTimepickerParserPipe {\n  constructor(_timepickerLocaleSrv) {\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {\n    if (time == null || time === \"\") {\n      return \"\";\n    }\n    if (!isNaN(+time)) {\n      return `${time}`;\n    }\n    if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\n      return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\n    }\n    return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\n  }\n  _parseTime(time, format, timeMeasure) {\n    const parsedTime = DateTime.fromFormat(String(time), format, {\n      numberingSystem: this._numberingSystem\n    })[timeMeasure];\n    if (!isNaN(parsedTime)) {\n      return parsedTime;\n    }\n    throw new Error(`Cannot parse time - ${time}`);\n  }\n}\nNgxMatTimepickerParserPipe.ɵfac = function NgxMatTimepickerParserPipe_Factory(t) {\n  return new (t || NgxMatTimepickerParserPipe)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService, 16));\n};\nNgxMatTimepickerParserPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"ngxMatTimepickerParser\",\n  type: NgxMatTimepickerParserPipe,\n  pure: true\n});\nNgxMatTimepickerParserPipe.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxMatTimepickerParserPipe,\n  factory: NgxMatTimepickerParserPipe.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerParserPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"ngxMatTimepickerParser\"\n    }]\n  }, {\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, null);\n})();\nclass NgxMatTimepickerAutofocusDirective {\n  constructor(_element, document) {\n    this._element = _element;\n    this.document = document;\n    this._activeElement = this.document.activeElement;\n  }\n  ngOnChanges() {\n    if (this.isFocusActive) {\n      // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n      setTimeout(() => this._element.nativeElement.focus({\n        preventScroll: true\n      }));\n    }\n  }\n  ngOnDestroy() {\n    // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n    setTimeout(() => this._activeElement.focus({\n      preventScroll: true\n    }));\n  }\n}\nNgxMatTimepickerAutofocusDirective.ɵfac = function NgxMatTimepickerAutofocusDirective_Factory(t) {\n  return new (t || NgxMatTimepickerAutofocusDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\nNgxMatTimepickerAutofocusDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatTimepickerAutofocusDirective,\n  selectors: [[\"\", \"ngxMatTimepickerAutofocus\", \"\"]],\n  inputs: {\n    isFocusActive: [\"ngxMatTimepickerAutofocus\", \"isFocusActive\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerAutofocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerAutofocus]\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    isFocusActive: [{\n      type: Input,\n      args: [\"ngxMatTimepickerAutofocus\"]\n    }]\n  });\n})();\nclass NgxMatTimepickerTimeLocalizerPipe {\n  constructor(_timepickerLocaleSrv) {\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  transform(time, timeUnit, isKeyboardEnabled = false) {\n    if (time == null || time === \"\") {\n      return \"\";\n    }\n    switch (timeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        {\n          const format = time === 0 || isKeyboardEnabled ? \"HH\" : \"H\";\n          return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\n        }\n      case NgxMatTimepickerUnits.MINUTE:\n        return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\n      default:\n        throw new Error(`There is no Time Unit with type ${timeUnit}`);\n    }\n  }\n  _formatTime(timeMeasure, time, format) {\n    try {\n      return DateTime.fromObject({\n        [timeMeasure]: +time\n      }).setLocale(this._locale).toFormat(format);\n    } catch {\n      throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\n    }\n  }\n}\nNgxMatTimepickerTimeLocalizerPipe.ɵfac = function NgxMatTimepickerTimeLocalizerPipe_Factory(t) {\n  return new (t || NgxMatTimepickerTimeLocalizerPipe)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService, 16));\n};\nNgxMatTimepickerTimeLocalizerPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"timeLocalizer\",\n  type: NgxMatTimepickerTimeLocalizerPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerTimeLocalizerPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"timeLocalizer\"\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, null);\n})();\nfunction retainSelection() {\n  this.selectionStart = this.selectionEnd;\n}\nclass NgxMatTimepickerDialControlComponent {\n  constructor(_elRef, _timeParserPipe) {\n    this._elRef = _elRef;\n    this._timeParserPipe = _timeParserPipe;\n    this.focused = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.timeUnitChanged = new EventEmitter();\n    this.unfocused = new EventEmitter();\n  }\n  get _selectedTime() {\n    if (!!this.time) {\n      return this.timeList.find(t => t.time === +this.time);\n    }\n    return undefined;\n  }\n  changeTimeByKeyboard(e) {\n    const char = String.fromCharCode(e.keyCode);\n    if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n      e.preventDefault();\n    }\n  }\n  ngAfterViewInit() {\n    this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\n  }\n  ngOnDestroy() {\n    this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\n  }\n  onKeydown(e) {\n    if (!NgxMatTimepickerUtils.isDigit(e)) {\n      e.preventDefault();\n    } else {\n      this._changeTimeByArrow(e.keyCode);\n    }\n  }\n  onModelChange(value) {\n    this.time = this._timeParserPipe.transform(value, this.timeUnit);\n  }\n  saveTimeAndChangeTimeUnit(event, unit) {\n    event.preventDefault();\n    this.previousTime = this.time;\n    this.timeUnitChanged.next(unit);\n    this.focused.next();\n  }\n  updateTime() {\n    if (this._selectedTime) {\n      this.timeChanged.next(this._selectedTime);\n      this.previousTime = this._selectedTime.time;\n    }\n  }\n  _addTime(amount) {\n    return `0${+this.time + amount}`.substr(-2);\n  }\n  _changeTimeByArrow(keyCode) {\n    let time;\n    // arrow up\n    if (keyCode === 38) {\n      time = this._addTime(this.minutesGap || 1);\n    }\n    // arrow down\n    else if (keyCode === 40) {\n      time = this._addTime(-1 * (this.minutesGap || 1));\n    }\n    if (!isTimeUnavailable(time, this.timeList)) {\n      this.time = time;\n      this.updateTime();\n    }\n  }\n}\nNgxMatTimepickerDialControlComponent.ɵfac = function NgxMatTimepickerDialControlComponent_Factory(t) {\n  return new (t || NgxMatTimepickerDialControlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NgxMatTimepickerParserPipe));\n};\nNgxMatTimepickerDialControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerDialControlComponent,\n  selectors: [[\"ngx-mat-timepicker-dial-control\"]],\n  inputs: {\n    disabled: \"disabled\",\n    isActive: \"isActive\",\n    isEditable: \"isEditable\",\n    minutesGap: \"minutesGap\",\n    time: \"time\",\n    timeList: \"timeList\",\n    timeUnit: \"timeUnit\"\n  },\n  outputs: {\n    focused: \"focused\",\n    timeChanged: \"timeChanged\",\n    timeUnitChanged: \"timeUnitChanged\",\n    unfocused: \"unfocused\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgxMatTimepickerParserPipe])],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"timepicker-dial__control timepicker-dial__item\", \"readonly\", \"\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", 4, \"ngIf\", \"ngIfElse\"], [\"editableTemplate\", \"\"], [\"readonly\", \"\", 1, \"timepicker-dial__control\", \"timepicker-dial__item\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\"], [1, \"timepicker-dial__control\", \"timepicker-dial__item\", \"timepicker-dial__control_editable\", 3, \"ngClass\", \"ngModel\", \"disabled\", \"ngxMatTimepickerAutofocus\", \"ngModelChange\", \"input\", \"focus\", \"keydown\", \"keypress\"]],\n  template: function NgxMatTimepickerDialControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxMatTimepickerDialControlComponent_input_0_Template, 2, 10, \"input\", 0);\n      i0.ɵɵtemplate(1, NgxMatTimepickerDialControlComponent_ng_template_1_Template, 3, 13, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isEditable)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, NgxMatTimepickerAutofocusDirective, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n  styles: [\".timepicker-dial__control[_ngcontent-%COMP%]{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control[_ngcontent-%COMP%]:focus{outline:none;background-color:#0000001a}.timepicker-dial__control[_ngcontent-%COMP%]:disabled{cursor:default}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialControlComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dial-control\",\n      providers: [NgxMatTimepickerParserPipe],\n      template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\",\n      styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: NgxMatTimepickerParserPipe\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    focused: [{\n      type: Output\n    }],\n    isActive: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    time: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timeList: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }],\n    unfocused: [{\n      type: Output\n    }]\n  });\n})();\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n  const isNumber = /\\d/.test(nextTime);\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return isTimeUnavailable(time, timeList);\n  }\n  return undefined;\n}\nfunction isTimeUnavailable(time, timeList) {\n  const selectedTime = timeList.find(value => value.time === +time);\n  return !selectedTime || selectedTime && selectedTime.disabled;\n}\nclass NgxMatTimepickerPeriodComponent {\n  constructor(_overlay) {\n    this._overlay = _overlay;\n    this.isPeriodAvailable = true;\n    this.overlayScrollStrategy = this._overlay.scrollStrategies.reposition();\n    this.periodChanged = new EventEmitter();\n    this.timePeriod = NgxMatTimepickerPeriods;\n  }\n  animationDone() {\n    this.isPeriodAvailable = true;\n  }\n  changePeriod(period) {\n    this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\n    if (this.isPeriodAvailable) {\n      this.periodChanged.next(period);\n    }\n  }\n  _getDisabledTimeByPeriod(period) {\n    switch (this.activeTimeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        return NgxMatTimepickerUtils.disableHours(this.hours, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n      case NgxMatTimepickerUnits.MINUTE:\n        return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period\n        });\n      default:\n        throw new Error(\"no such NgxMatTimepickerUnits\");\n    }\n  }\n  _isSwitchPeriodAvailable(period) {\n    const time = this._getDisabledTimeByPeriod(period);\n    return !time.every(t => t.disabled);\n  }\n}\nNgxMatTimepickerPeriodComponent.ɵfac = function NgxMatTimepickerPeriodComponent_Factory(t) {\n  return new (t || NgxMatTimepickerPeriodComponent)(i0.ɵɵdirectiveInject(i1$1.Overlay));\n};\nNgxMatTimepickerPeriodComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerPeriodComponent,\n  selectors: [[\"ngx-mat-timepicker-period\"]],\n  inputs: {\n    activeTimeUnit: \"activeTimeUnit\",\n    format: \"format\",\n    hours: \"hours\",\n    maxTime: \"maxTime\",\n    meridiems: \"meridiems\",\n    minTime: \"minTime\",\n    minutes: \"minutes\",\n    selectedHour: \"selectedHour\",\n    selectedPeriod: \"selectedPeriod\"\n  },\n  outputs: {\n    periodChanged: \"periodChanged\"\n  },\n  decls: 7,\n  vars: 12,\n  consts: [[\"cdkOverlayOrigin\", \"\", 1, \"timepicker-period\"], [\"eventPanelOrigin\", \"cdkOverlayOrigin\"], [\"type\", \"button\", 1, \"timepicker-dial__item\", \"timepicker-period__btn\", 3, \"ngClass\", \"click\"], [\"cdkConnectedOverlay\", \"\", \"cdkConnectedOverlayPanelClass\", \"todo-remove-pointer-events-if-necessary\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\"], [\"class\", \"timepicker-period__warning\", 4, \"ngIf\"], [1, \"timepicker-period__warning\"]],\n  template: function NgxMatTimepickerPeriodComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerPeriodComponent_Template_button_click_2_listener() {\n        return ctx.changePeriod(ctx.timePeriod.AM);\n      });\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerPeriodComponent_Template_button_click_4_listener() {\n        return ctx.changePeriod(ctx.timePeriod.PM);\n      });\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(6, NgxMatTimepickerPeriodComponent_ng_template_6_Template, 1, 1, \"ng-template\", 3);\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.selectedPeriod === ctx.timePeriod.AM));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.meridiems[0]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.selectedPeriod === ctx.timePeriod.PM));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.meridiems[1]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx.overlayScrollStrategy)(\"cdkConnectedOverlayPositionStrategy\", ctx.overlayPositionStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", !ctx.isPeriodAvailable);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i1$1.CdkConnectedOverlay, i1$1.CdkOverlayOrigin],\n  styles: [\".timepicker-period[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:relative}.timepicker-period__btn[_ngcontent-%COMP%]{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active[_ngcontent-%COMP%]{opacity:1}.timepicker-period__btn[_ngcontent-%COMP%]:focus{background-color:#00000012}.timepicker-period__warning[_ngcontent-%COMP%]{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning[_ngcontent-%COMP%] > p[_ngcontent-%COMP%]{margin:0;font-size:12px;font-weight:700;color:#fff}\"],\n  data: {\n    animation: [trigger(\"scaleInOut\", [transition(\":enter\", [style({\n      transform: \"scale(0)\"\n    }), animate(\".2s\", style({\n      transform: \"scale(1)\"\n    })), sequence([animate(\"3s\", style({\n      opacity: 1\n    })), animate(\".3s\", style({\n      opacity: 0\n    }))])])])]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerPeriodComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-period\",\n      animations: [trigger(\"scaleInOut\", [transition(\":enter\", [style({\n        transform: \"scale(0)\"\n      }), animate(\".2s\", style({\n        transform: \"scale(1)\"\n      })), sequence([animate(\"3s\", style({\n        opacity: 1\n      })), animate(\".3s\", style({\n        opacity: 0\n      }))])])])],\n      template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\",\n      styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }];\n  }, {\n    activeTimeUnit: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hours: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    meridiems: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minutes: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    selectedPeriod: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerDialComponent {\n  constructor(_localeSrv) {\n    this._localeSrv = _localeSrv;\n    this.hourChanged = new EventEmitter();\n    this.meridiems = Info.meridiems({\n      locale: this._locale\n    });\n    this.minuteChanged = new EventEmitter();\n    this.periodChanged = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n    this.timeUnitChanged = new EventEmitter();\n    this._color = \"primary\";\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get hourString() {\n    return `${this.hour}`;\n  }\n  get minuteString() {\n    return `${this.minute}`;\n  }\n  get _locale() {\n    return this._localeSrv.locale;\n  }\n  changeHour(hour) {\n    this.hourChanged.next(hour);\n  }\n  changeMinute(minute) {\n    this.minuteChanged.next(minute);\n  }\n  changePeriod(period) {\n    this.periodChanged.next(period);\n  }\n  changeTimeUnit(unit) {\n    this.timeUnitChanged.next(unit);\n  }\n  hideHint() {\n    this.isHintVisible = false;\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const periodChanged = changes[\"period\"] && changes[\"period\"].currentValue;\n    // tslint:disable-next-line:no-string-literal\n    if (periodChanged || changes[\"format\"] && changes[\"format\"].currentValue) {\n      const hours = NgxMatTimepickerUtils.getHours(this.format);\n      this.hours = NgxMatTimepickerUtils.disableHours(hours, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n    // tslint:disable-next-line:no-string-literal\n    if (periodChanged || changes[\"hour\"] && changes[\"hour\"].currentValue) {\n      const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n      this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n  showHint() {\n    this.isHintVisible = true;\n  }\n}\nNgxMatTimepickerDialComponent.ɵfac = function NgxMatTimepickerDialComponent_Factory(t) {\n  return new (t || NgxMatTimepickerDialComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n};\nNgxMatTimepickerDialComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerDialComponent,\n  selectors: [[\"ngx-mat-timepicker-dial\"]],\n  inputs: {\n    activeTimeUnit: \"activeTimeUnit\",\n    color: \"color\",\n    editableHintTmpl: \"editableHintTmpl\",\n    format: \"format\",\n    hour: \"hour\",\n    hoursOnly: \"hoursOnly\",\n    isEditable: \"isEditable\",\n    maxTime: \"maxTime\",\n    minTime: \"minTime\",\n    minute: \"minute\",\n    minutesGap: \"minutesGap\",\n    period: \"period\"\n  },\n  outputs: {\n    hourChanged: \"hourChanged\",\n    minuteChanged: \"minuteChanged\",\n    periodChanged: \"periodChanged\",\n    timeUnitChanged: \"timeUnitChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 9,\n  vars: 14,\n  consts: [[1, \"timepicker-dial\"], [1, \"timepicker-dial__container\"], [1, \"timepicker-dial__time\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [3, \"timeList\", \"time\", \"timeUnit\", \"isActive\", \"isEditable\", \"minutesGap\", \"disabled\", \"timeUnitChanged\", \"timeChanged\", \"focused\", \"unfocused\"], [\"class\", \"timepicker-dial__period\", 3, \"selectedPeriod\", \"activeTimeUnit\", \"maxTime\", \"minTime\", \"format\", \"hours\", \"minutes\", \"selectedHour\", \"meridiems\", \"periodChanged\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"timepicker-dial__period\", 3, \"selectedPeriod\", \"activeTimeUnit\", \"maxTime\", \"minTime\", \"format\", \"hours\", \"minutes\", \"selectedHour\", \"meridiems\", \"periodChanged\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\"], [\"editableHintDefault\", \"\"], [1, \"timepicker-dial__hint\"]],\n  template: function NgxMatTimepickerDialComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"ngx-mat-timepicker-dial-control\", 3);\n      i0.ɵɵlistener(\"timeUnitChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_3_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"timeChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_3_listener($event) {\n        return ctx.changeHour($event);\n      })(\"focused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_3_listener() {\n        return ctx.showHint();\n      })(\"unfocused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_3_listener() {\n        return ctx.hideHint();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"span\");\n      i0.ɵɵtext(5, \":\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"ngx-mat-timepicker-dial-control\", 4);\n      i0.ɵɵlistener(\"timeUnitChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeUnitChanged_6_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"timeChanged\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_timeChanged_6_listener($event) {\n        return ctx.changeMinute($event);\n      })(\"focused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_focused_6_listener() {\n        return ctx.showHint();\n      })(\"unfocused\", function NgxMatTimepickerDialComponent_Template_ngx_mat_timepicker_dial_control_unfocused_6_listener() {\n        return ctx.hideHint();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(7, NgxMatTimepickerDialComponent_ngx_mat_timepicker_period_7_Template, 1, 9, \"ngx-mat-timepicker-period\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, NgxMatTimepickerDialComponent_div_8_Template, 4, 4, \"div\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"timeList\", ctx.hours)(\"time\", ctx.hourString)(\"timeUnit\", ctx.timeUnit.HOUR)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.HOUR)(\"isEditable\", ctx.isEditable);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"timeList\", ctx.minutes)(\"time\", ctx.minuteString)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"isActive\", ctx.activeTimeUnit === ctx.timeUnit.MINUTE)(\"isEditable\", ctx.isEditable)(\"minutesGap\", ctx.minutesGap)(\"disabled\", ctx.hoursOnly);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isEditable || ctx.editableHintTmpl);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, NgxMatTimepickerDialControlComponent, NgxMatTimepickerPeriodComponent],\n  styles: [\".timepicker-dial[_ngcontent-%COMP%]{text-align:center}.timepicker-dial__container[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time[_ngcontent-%COMP%]{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period[_ngcontent-%COMP%]{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden[_ngcontent-%COMP%]{visibility:hidden}.timepicker-dial__hint[_ngcontent-%COMP%]{display:inline-block;font-size:10px}.timepicker-dial__hint[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-size:14px}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dial\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\",\n      styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, {\n    activeTimeUnit: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    editableHintTmpl: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hour: [{\n      type: Input\n    }],\n    hourChanged: [{\n      type: Output\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    isEditable: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minute: [{\n      type: Input\n    }],\n    minuteChanged: [{\n      type: Output\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    periodChanged: [{\n      type: Output\n    }],\n    timeUnitChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass NgxMatTimepickerActiveHourPipe {\n  transform(hour, currentHour, isClockFaceDisabled) {\n    if (hour == null || isClockFaceDisabled) {\n      return false;\n    }\n    return hour === currentHour;\n  }\n}\nNgxMatTimepickerActiveHourPipe.ɵfac = function NgxMatTimepickerActiveHourPipe_Factory(t) {\n  return new (t || NgxMatTimepickerActiveHourPipe)();\n};\nNgxMatTimepickerActiveHourPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"activeHour\",\n  type: NgxMatTimepickerActiveHourPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerActiveHourPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"activeHour\"\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerActiveMinutePipe {\n  transform(minute, currentMinute, gap, isClockFaceDisabled) {\n    if (minute == null || isClockFaceDisabled) {\n      return false;\n    }\n    const defaultGap = 5;\n    return currentMinute === minute && minute % (gap || defaultGap) === 0;\n  }\n}\nNgxMatTimepickerActiveMinutePipe.ɵfac = function NgxMatTimepickerActiveMinutePipe_Factory(t) {\n  return new (t || NgxMatTimepickerActiveMinutePipe)();\n};\nNgxMatTimepickerActiveMinutePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"activeMinute\",\n  type: NgxMatTimepickerActiveMinutePipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerActiveMinutePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'activeMinute'\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerMinutesFormatterPipe {\n  transform(minute, gap = 5) {\n    if (!minute) {\n      return minute;\n    }\n    return minute % gap === 0 ? minute : '';\n  }\n}\nNgxMatTimepickerMinutesFormatterPipe.ɵfac = function NgxMatTimepickerMinutesFormatterPipe_Factory(t) {\n  return new (t || NgxMatTimepickerMinutesFormatterPipe)();\n};\nNgxMatTimepickerMinutesFormatterPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"minutesFormatter\",\n  type: NgxMatTimepickerMinutesFormatterPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerMinutesFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'minutesFormatter'\n    }]\n  }], null, null);\n})();\nfunction roundAngle(angle, step) {\n  return Math.round(angle / step) * step;\n}\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n  if (y > y0 && x >= x0) {\n    // II quarter\n    return 180 - currentAngle;\n  } else if (y > y0 && x < x0) {\n    // III quarter\n    return 180 + currentAngle;\n  } else if (y < y0 && x < x0) {\n    // IV quarter\n    return 360 - currentAngle;\n  } else {\n    // I quarter\n    return currentAngle;\n  }\n}\nconst CLOCK_HAND_STYLES = {\n  small: {\n    height: \"75px\",\n    top: \"calc(50% - 75px)\"\n  },\n  large: {\n    height: \"103px\",\n    top: \"calc(50% - 103px)\"\n  }\n};\nclass NgxMatTimepickerFaceComponent {\n  constructor() {\n    this.color = \"primary\";\n    this.innerClockFaceSize = 85;\n    this.timeChange = new EventEmitter();\n    this.timeSelected = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n  }\n  ngAfterViewInit() {\n    this._setClockHandPosition();\n    this._addTouchEvents();\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const faceTimeChanges = changes[\"faceTime\"];\n    // tslint:disable-next-line:no-string-literal\n    const selectedTimeChanges = changes[\"selectedTime\"];\n    if (faceTimeChanges && faceTimeChanges.currentValue && selectedTimeChanges && selectedTimeChanges.currentValue) {\n      /* Set time according to pass an input value */\n      this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n    }\n    if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n      this._setClockHandPosition();\n    }\n    if (faceTimeChanges && faceTimeChanges.currentValue) {\n      // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n      setTimeout(() => this._selectAvailableTime());\n    }\n  }\n  ngOnDestroy() {\n    this._removeTouchEvents();\n  }\n  onMousedown(e) {\n    e.preventDefault();\n    this._isStarted = true;\n  }\n  onMouseup(e) {\n    e.preventDefault();\n    this._isStarted = false;\n  }\n  selectTime(e) {\n    if (!this._isStarted && e instanceof MouseEvent && e.type !== \"click\") {\n      return;\n    }\n    const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n    /* Get x0 and y0 of the circle */\n    const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n    const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n    /* Counting the arctangent and convert it to from radian to deg */\n    const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n    /* Get angle according to quadrant */\n    const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n    /* Check if selected time from the inner clock face (24 hours format only) */\n    const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n    /* Round angle according to angle step */\n    const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? 6 * (this.minutesGap || 1) : 30;\n    const roundedAngle = roundAngle(circleAngle, angleStep);\n    const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n    const selectedTime = this.faceTime.find(val => val.angle === angle);\n    if (selectedTime && !selectedTime.disabled) {\n      this.timeChange.next(selectedTime);\n      /* To let know whether user ended interaction with clock face */\n      if (!this._isStarted) {\n        this.timeSelected.next(selectedTime.time);\n      }\n    }\n  }\n  trackByTime(_item_, time) {\n    return time.time;\n  }\n  _addTouchEvents() {\n    this._touchStartHandler = this.onMousedown.bind(this);\n    this._touchEndHandler = this.onMouseup.bind(this);\n    this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\n    this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\n  }\n  _decreaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n  }\n  _increaseClockHand() {\n    this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n    this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n  }\n  _isInnerClockFace(x0, y0, x, y) {\n    /* Detect whether time from the inner clock face or not (24 format only) */\n    return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n  }\n  _removeTouchEvents() {\n    this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\n    this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\n  }\n  _selectAvailableTime() {\n    const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n    this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n    if (currentTime && currentTime.disabled && !this.isClockFaceDisabled) {\n      const availableTime = this.faceTime.find(time => !time.disabled);\n      this.timeChange.next(availableTime);\n    }\n  }\n  _setClockHandPosition() {\n    if (NgxMatTimepickerAdapter.isTwentyFour(this.format)) {\n      if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n        this._decreaseClockHand();\n      } else {\n        this._increaseClockHand();\n      }\n    }\n    this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n  }\n}\nNgxMatTimepickerFaceComponent.ɵfac = function NgxMatTimepickerFaceComponent_Factory(t) {\n  return new (t || NgxMatTimepickerFaceComponent)();\n};\nNgxMatTimepickerFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerFaceComponent,\n  selectors: [[\"ngx-mat-timepicker-face\"]],\n  viewQuery: function NgxMatTimepickerFaceComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 7);\n      i0.ɵɵviewQuery(_c3, 7, ElementRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockFace = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockHand = _t.first);\n    }\n  },\n  hostBindings: function NgxMatTimepickerFaceComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousedown\", function NgxMatTimepickerFaceComponent_mousedown_HostBindingHandler($event) {\n        return ctx.onMousedown($event);\n      })(\"mouseup\", function NgxMatTimepickerFaceComponent_mouseup_HostBindingHandler($event) {\n        return ctx.onMouseup($event);\n      })(\"click\", function NgxMatTimepickerFaceComponent_click_HostBindingHandler($event) {\n        return ctx.selectTime($event);\n      })(\"touchmove\", function NgxMatTimepickerFaceComponent_touchmove_HostBindingHandler($event) {\n        return ctx.selectTime($event.changedTouches[0]);\n      })(\"touchend\", function NgxMatTimepickerFaceComponent_touchend_HostBindingHandler($event) {\n        return ctx.selectTime($event.changedTouches[0]);\n      })(\"mousemove\", function NgxMatTimepickerFaceComponent_mousemove_HostBindingHandler($event) {\n        return ctx.selectTime($event);\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    faceTime: \"faceTime\",\n    format: \"format\",\n    minutesGap: \"minutesGap\",\n    selectedTime: \"selectedTime\",\n    unit: \"unit\"\n  },\n  outputs: {\n    timeChange: \"timeChange\",\n    timeSelected: \"timeSelected\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c6,\n  decls: 11,\n  vars: 9,\n  consts: [[\"hourButton\", \"\"], [\"minutesFace\", \"\"], [1, \"clock-face\"], [\"clockFace\", \"\"], [\"class\", \"clock-face__container\", 4, \"ngIf\", \"ngIfElse\"], [1, \"clock-face__clock-hand\", 3, \"color\", \"ngClass\", \"hidden\"], [\"clockHand\", \"\"], [\"mat-mini-fab\", \"\", 3, \"color\", 4, \"ngIf\"], [1, \"clock-face__center\", 3, \"color\"], [\"mat-mini-fab\", \"\", \"disableRipple\", \"\", 1, \"mat-elevation-z0\", 3, \"color\", \"ngStyle\", \"disabled\"], [1, \"clock-face__container\"], [\"class\", \"clock-face__number clock-face__number--outer\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--outer\", 3, \"ngStyle\"], [\"class\", \"clock-face__inner\", 4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"clock-face__inner\"], [\"class\", \"clock-face__number clock-face__number--inner\", 3, \"top\", \"ngStyle\", \"height\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"clock-face__number\", \"clock-face__number--inner\", 3, \"ngStyle\"], [\"mat-mini-fab\", \"\", 3, \"color\"], [1, \"clock-face__clock-hand_minute_dot\"]],\n  template: function NgxMatTimepickerFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c6);\n      i0.ɵɵtemplate(0, NgxMatTimepickerFaceComponent_ng_template_0_Template, 4, 13, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(2, NgxMatTimepickerFaceComponent_ng_template_2_Template, 2, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(4, \"div\", 2, 3);\n      i0.ɵɵtemplate(6, NgxMatTimepickerFaceComponent_div_6_Template, 4, 7, \"div\", 4);\n      i0.ɵɵelementStart(7, \"mat-toolbar\", 5, 6);\n      i0.ɵɵtemplate(9, NgxMatTimepickerFaceComponent_button_9_Template, 2, 1, \"button\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"mat-toolbar\", 8);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r2 = i0.ɵɵreference(3);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.unit !== ctx.timeUnit.MINUTE)(\"ngIfElse\", _r2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"ngClass\", i0.ɵɵpureFunction1(7, _c7, ctx.unit === ctx.timeUnit.MINUTE))(\"hidden\", ctx.isClockFaceDisabled);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.unit === ctx.timeUnit.MINUTE);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i6.MatMiniFabButton, i7.MatToolbar, i1.SlicePipe, NgxMatTimepickerActiveHourPipe, NgxMatTimepickerActiveMinutePipe, NgxMatTimepickerMinutesFormatterPipe, NgxMatTimepickerTimeLocalizerPipe],\n  styles: [\"ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\",\n      styles: [\"ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"]\n    }]\n  }], null, {\n    clockFace: [{\n      type: ViewChild,\n      args: [\"clockFace\", {\n        static: true\n      }]\n    }],\n    clockHand: [{\n      type: ViewChild,\n      args: [\"clockHand\", {\n        static: true,\n        read: ElementRef\n      }]\n    }],\n    color: [{\n      type: Input\n    }],\n    faceTime: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    selectedTime: [{\n      type: Input\n    }],\n    timeChange: [{\n      type: Output\n    }],\n    timeSelected: [{\n      type: Output\n    }],\n    unit: [{\n      type: Input\n    }],\n    onMousedown: [{\n      type: HostListener,\n      args: [\"mousedown\", [\"$event\"]]\n    }],\n    onMouseup: [{\n      type: HostListener,\n      args: [\"mouseup\", [\"$event\"]]\n    }],\n    selectTime: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }, {\n      type: HostListener,\n      args: [\"touchmove\", [\"$event.changedTouches[0]\"]]\n    }, {\n      type: HostListener,\n      args: [\"touchend\", [\"$event.changedTouches[0]\"]]\n    }, {\n      type: HostListener,\n      args: [\"mousemove\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxMatTimepickerMinutesFaceComponent {\n  constructor() {\n    this.minuteChange = new EventEmitter();\n    this.minutesList = [];\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    if (changes[\"period\"] && changes[\"period\"].currentValue) {\n      const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\n      this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n}\nNgxMatTimepickerMinutesFaceComponent.ɵfac = function NgxMatTimepickerMinutesFaceComponent_Factory(t) {\n  return new (t || NgxMatTimepickerMinutesFaceComponent)();\n};\nNgxMatTimepickerMinutesFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerMinutesFaceComponent,\n  selectors: [[\"ngx-mat-timepicker-minutes-face\"]],\n  inputs: {\n    color: \"color\",\n    format: \"format\",\n    maxTime: \"maxTime\",\n    minTime: \"minTime\",\n    minutesGap: \"minutesGap\",\n    period: \"period\",\n    selectedHour: \"selectedHour\",\n    selectedMinute: \"selectedMinute\"\n  },\n  outputs: {\n    minuteChange: \"minuteChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 5,\n  consts: [[3, \"color\", \"faceTime\", \"selectedTime\", \"minutesGap\", \"unit\", \"timeChange\"]],\n  template: function NgxMatTimepickerMinutesFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMatTimepickerMinutesFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n        return ctx.minuteChange.next($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"faceTime\", ctx.minutesList)(\"selectedTime\", ctx.selectedMinute)(\"minutesGap\", ctx.minutesGap)(\"unit\", ctx.timeUnit.MINUTE);\n    }\n  },\n  dependencies: [NgxMatTimepickerFaceComponent],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerMinutesFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-minutes-face\",\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    color: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    minuteChange: [{\n      type: Output\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    period: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }],\n    selectedMinute: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerHoursFaceDirective {\n  constructor() {\n    this.hourChange = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursList = [];\n    this._color = \"primary\";\n    this._format = 24;\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  set format(newValue) {\n    this._format = newValue;\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n  }\n  get format() {\n    return this._format;\n  }\n  onTimeSelected(time) {\n    this.hourSelected.next(time);\n  }\n}\nNgxMatTimepickerHoursFaceDirective.ɵfac = function NgxMatTimepickerHoursFaceDirective_Factory(t) {\n  return new (t || NgxMatTimepickerHoursFaceDirective)();\n};\nNgxMatTimepickerHoursFaceDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatTimepickerHoursFaceDirective,\n  selectors: [[\"\", \"ngxMatTimepickerHoursFace\", \"\"]],\n  inputs: {\n    color: \"color\",\n    format: \"format\",\n    maxTime: \"maxTime\",\n    minTime: \"minTime\",\n    selectedHour: \"selectedHour\"\n  },\n  outputs: {\n    hourChange: \"hourChange\",\n    hourSelected: \"hourSelected\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerHoursFaceDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerHoursFace]\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    color: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    hourChange: [{\n      type: Output\n    }],\n    hourSelected: [{\n      type: Output\n    }],\n    maxTime: [{\n      type: Input\n    }],\n    minTime: [{\n      type: Input\n    }],\n    selectedHour: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n  constructor() {\n    super();\n    this.format = 12;\n  }\n  ngOnChanges(changes) {\n    if (changes['period'] && changes['period'].currentValue) {\n      this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }\n}\nNgxMatTimepicker12HoursFaceComponent.ɵfac = function NgxMatTimepicker12HoursFaceComponent_Factory(t) {\n  return new (t || NgxMatTimepicker12HoursFaceComponent)();\n};\nNgxMatTimepicker12HoursFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepicker12HoursFaceComponent,\n  selectors: [[\"ngx-mat-timepicker-12-hours-face\"]],\n  inputs: {\n    period: \"period\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 3,\n  consts: [[3, \"color\", \"selectedTime\", \"faceTime\", \"timeChange\", \"timeSelected\"]],\n  template: function NgxMatTimepicker12HoursFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n        return ctx.hourChange.next($event);\n      })(\"timeSelected\", function NgxMatTimepicker12HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener($event) {\n        return ctx.onTimeSelected($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList);\n    }\n  },\n  dependencies: [NgxMatTimepickerFaceComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepicker12HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-12-hours-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    period: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\n  constructor() {\n    super();\n    this.format = 24;\n  }\n  ngAfterContentInit() {\n    this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n      min: this.minTime,\n      max: this.maxTime,\n      format: this.format\n    });\n  }\n}\nNgxMatTimepicker24HoursFaceComponent.ɵfac = function NgxMatTimepicker24HoursFaceComponent_Factory(t) {\n  return new (t || NgxMatTimepicker24HoursFaceComponent)();\n};\nNgxMatTimepicker24HoursFaceComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepicker24HoursFaceComponent,\n  selectors: [[\"ngx-mat-timepicker-24-hours-face\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 4,\n  consts: [[3, \"color\", \"selectedTime\", \"faceTime\", \"format\", \"timeChange\", \"timeSelected\"]],\n  template: function NgxMatTimepicker24HoursFaceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-mat-timepicker-face\", 0);\n      i0.ɵɵlistener(\"timeChange\", function NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeChange_0_listener($event) {\n        return ctx.hourChange.next($event);\n      })(\"timeSelected\", function NgxMatTimepicker24HoursFaceComponent_Template_ngx_mat_timepicker_face_timeSelected_0_listener($event) {\n        return ctx.onTimeSelected($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"selectedTime\", ctx.selectedHour)(\"faceTime\", ctx.hoursList)(\"format\", ctx.format);\n    }\n  },\n  dependencies: [NgxMatTimepickerFaceComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepicker24HoursFaceComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-24-hours-face\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\"\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass NgxMatTimepickerContentComponent {}\nNgxMatTimepickerContentComponent.ɵfac = function NgxMatTimepickerContentComponent_Factory(t) {\n  return new (t || NgxMatTimepickerContentComponent)();\n};\nNgxMatTimepickerContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerContentComponent,\n  selectors: [[\"ngx-mat-timepicker-content\"]],\n  inputs: {\n    appendToInput: \"appendToInput\",\n    inputElement: \"inputElement\"\n  },\n  ngContentSelectors: _c8,\n  decls: 5,\n  vars: 2,\n  consts: [[4, \"ngIf\", \"ngIfElse\"], [\"timepickerModal\", \"\"], [\"timepickerOutlet\", \"\"], [4, \"ngTemplateOutlet\"]],\n  template: function NgxMatTimepickerContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, NgxMatTimepickerContentComponent_div_0_Template, 2, 1, \"div\", 0);\n      i0.ɵɵtemplate(1, NgxMatTimepickerContentComponent_ng_template_1_Template, 1, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(3, NgxMatTimepickerContentComponent_ng_template_3_Template, 1, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.appendToInput)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerContentComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-content\",\n      template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\"\n    }]\n  }], null, {\n    appendToInput: [{\n      type: Input\n    }],\n    inputElement: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\n  constructor(data, _dialogRef, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n    super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n    this.data = data;\n    this._dialogRef = _dialogRef;\n  }\n  close() {\n    this._dialogRef.close();\n  }\n}\nNgxMatTimepickerDialogComponent.ɵfac = function NgxMatTimepickerDialogComponent_Factory(t) {\n  return new (t || NgxMatTimepickerDialogComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1$2.MatDialogRef), i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n};\nNgxMatTimepickerDialogComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerDialogComponent,\n  selectors: [[\"ngx-mat-timepicker-dialog\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 21,\n  vars: 27,\n  consts: [[\"cancelBtnDefault\", \"\"], [\"confirmBtnDefault\", \"\"], [\"mat-dialog-content\", \"\"], [3, \"appendToInput\", \"inputElement\"], [1, \"timepicker\", 3, \"ngClass\"], [1, \"timepicker-header\", 3, \"color\"], [3, \"color\", \"format\", \"hour\", \"minute\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"editableHintTmpl\", \"minutesGap\", \"hoursOnly\", \"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"], [1, \"timepicker__main-content\"], [1, \"timepicker__body\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\", 4, \"ngSwitchCase\"], [\"mat-dialog-actions\", \"\"], [3, \"click\"], [4, \"ngTemplateOutlet\"], [\"mat-button\", \"\", 3, \"color\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\", 4, \"ngIf\", \"ngIfElse\"], [\"ampmHours\", \"\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\"]],\n  template: function NgxMatTimepickerDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxMatTimepickerDialogComponent_ng_template_0_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(2, NgxMatTimepickerDialogComponent_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"ngx-mat-timepicker-content\", 3)(6, \"div\", 4)(7, \"mat-toolbar\", 5)(8, \"ngx-mat-timepicker-dial\", 6);\n      i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener($event) {\n        return ctx.changePeriod($event);\n      })(\"timeUnitChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"hourChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener($event) {\n        return ctx.onHourChange($event);\n      })(\"minuteChanged\", function NgxMatTimepickerDialogComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener($event) {\n        return ctx.onMinuteChange($event);\n      });\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵpipe(11, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8);\n      i0.ɵɵtemplate(14, NgxMatTimepickerDialogComponent_div_14_Template, 4, 2, \"div\", 9);\n      i0.ɵɵtemplate(15, NgxMatTimepickerDialogComponent_ngx_mat_timepicker_minutes_face_15_Template, 4, 14, \"ngx-mat-timepicker-minutes-face\", 10);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(16, \"div\", 11)(17, \"div\", 12);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerDialogComponent_Template_div_click_17_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtemplate(18, NgxMatTimepickerDialogComponent_ng_container_18_Template, 1, 0, \"ng-container\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 12);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerDialogComponent_Template_div_click_19_listener() {\n        return ctx.setTime();\n      });\n      i0.ɵɵtemplate(20, NgxMatTimepickerDialogComponent_ng_container_20_Template, 1, 0, \"ng-container\", 13);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      const _r2 = i0.ɵɵreference(3);\n      let tmp_6_0;\n      let tmp_7_0;\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"appendToInput\", ctx.data.appendToInput)(\"inputElement\", ctx.data.inputElement);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.data.timepickerClass);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"format\", ctx.data.format)(\"hour\", (tmp_6_0 = i0.ɵɵpipeBind1(9, 21, ctx.selectedHour)) == null ? null : tmp_6_0.time)(\"minute\", (tmp_7_0 = i0.ɵɵpipeBind1(10, 23, ctx.selectedMinute)) == null ? null : tmp_7_0.time)(\"period\", i0.ɵɵpipeBind1(11, 25, ctx.selectedPeriod))(\"activeTimeUnit\", ctx.activeTimeUnit)(\"minTime\", ctx.data.minTime)(\"maxTime\", ctx.data.maxTime)(\"isEditable\", ctx.data.enableKeyboardInput)(\"editableHintTmpl\", ctx.data.editableHintTmpl)(\"minutesGap\", ctx.data.minutesGap)(\"hoursOnly\", ctx.data.hoursOnly);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.activeTimeUnit);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.HOUR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.MINUTE);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.cancelBtnTmpl ? ctx.data.cancelBtnTmpl : _r0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.confirmBtnTmpl ? ctx.data.confirmBtnTmpl : _r2);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i6.MatButton, i1$2.MatDialogContent, i1$2.MatDialogActions, i7.MatToolbar, NgxMatTimepickerDialComponent, NgxMatTimepickerMinutesFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepickerContentComponent, i1.AsyncPipe],\n  styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDialogComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-dialog\",\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\",\n      styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_DATA]\n      }]\n    }, {\n      type: i1$2.MatDialogRef\n    }, {\n      type: NgxMatTimepickerService\n    }, {\n      type: NgxMatTimepickerEventService\n    }, {\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, null);\n})();\nclass NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\n  constructor(data, timepickerSrv, eventSrv, timepickerLocaleSrv) {\n    super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\n    this.data = data;\n  }\n  close() {\n    this.data.timepickerBaseRef.close();\n  }\n}\nNgxMatTimepickerStandaloneComponent.ɵfac = function NgxMatTimepickerStandaloneComponent_Factory(t) {\n  return new (t || NgxMatTimepickerStandaloneComponent)(i0.ɵɵdirectiveInject(NGX_MAT_TIMEPICKER_CONFIG), i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n};\nNgxMatTimepickerStandaloneComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerStandaloneComponent,\n  selectors: [[\"ngx-mat-timepicker-standalone\"]],\n  hostVars: 2,\n  hostBindings: function NgxMatTimepickerStandaloneComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-app-background\", true);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 21,\n  vars: 27,\n  consts: [[\"cancelBtnDefault\", \"\"], [\"confirmBtnDefault\", \"\"], [\"cdkTrapFocus\", \"\", \"cdkTrapFocusAutoCapture\", \"\"], [3, \"appendToInput\", \"inputElement\"], [1, \"timepicker\", 3, \"ngClass\"], [1, \"timepicker-header\", 3, \"color\"], [3, \"color\", \"format\", \"hour\", \"minute\", \"period\", \"activeTimeUnit\", \"minTime\", \"maxTime\", \"isEditable\", \"editableHintTmpl\", \"minutesGap\", \"hoursOnly\", \"periodChanged\", \"timeUnitChanged\", \"hourChanged\", \"minuteChanged\"], [1, \"timepicker__main-content\"], [1, \"timepicker__body\", 3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\", 4, \"ngSwitchCase\"], [1, \"ngx-mat-timepicker-standalone-actions\"], [3, \"click\"], [4, \"ngTemplateOutlet\"], [\"mat-button\", \"\", 3, \"color\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\", 4, \"ngIf\", \"ngIfElse\"], [\"ampmHours\", \"\"], [3, \"color\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedHour\", \"period\", \"minTime\", \"maxTime\", \"hourChange\", \"hourSelected\"], [3, \"color\", \"selectedMinute\", \"selectedHour\", \"minTime\", \"maxTime\", \"format\", \"period\", \"minutesGap\", \"minuteChange\"]],\n  template: function NgxMatTimepickerStandaloneComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxMatTimepickerStandaloneComponent_ng_template_0_Template, 2, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(2, NgxMatTimepickerStandaloneComponent_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"ngx-mat-timepicker-content\", 3)(6, \"div\", 4)(7, \"mat-toolbar\", 5)(8, \"ngx-mat-timepicker-dial\", 6);\n      i0.ɵɵlistener(\"periodChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_periodChanged_8_listener($event) {\n        return ctx.changePeriod($event);\n      })(\"timeUnitChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_timeUnitChanged_8_listener($event) {\n        return ctx.changeTimeUnit($event);\n      })(\"hourChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_hourChanged_8_listener($event) {\n        return ctx.onHourChange($event);\n      })(\"minuteChanged\", function NgxMatTimepickerStandaloneComponent_Template_ngx_mat_timepicker_dial_minuteChanged_8_listener($event) {\n        return ctx.onMinuteChange($event);\n      });\n      i0.ɵɵpipe(9, \"async\");\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵpipe(11, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 7)(13, \"div\", 8);\n      i0.ɵɵtemplate(14, NgxMatTimepickerStandaloneComponent_div_14_Template, 4, 2, \"div\", 9);\n      i0.ɵɵtemplate(15, NgxMatTimepickerStandaloneComponent_ngx_mat_timepicker_minutes_face_15_Template, 4, 14, \"ngx-mat-timepicker-minutes-face\", 10);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(16, \"div\", 11)(17, \"div\", 12);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerStandaloneComponent_Template_div_click_17_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtemplate(18, NgxMatTimepickerStandaloneComponent_ng_container_18_Template, 1, 0, \"ng-container\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 12);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerStandaloneComponent_Template_div_click_19_listener() {\n        return ctx.setTime();\n      });\n      i0.ɵɵtemplate(20, NgxMatTimepickerStandaloneComponent_ng_container_20_Template, 1, 0, \"ng-container\", 13);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      const _r2 = i0.ɵɵreference(3);\n      let tmp_6_0;\n      let tmp_7_0;\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"appendToInput\", ctx.data.appendToInput)(\"inputElement\", ctx.data.inputElement);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.data.timepickerClass);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"format\", ctx.data.format)(\"hour\", (tmp_6_0 = i0.ɵɵpipeBind1(9, 21, ctx.selectedHour)) == null ? null : tmp_6_0.time)(\"minute\", (tmp_7_0 = i0.ɵɵpipeBind1(10, 23, ctx.selectedMinute)) == null ? null : tmp_7_0.time)(\"period\", i0.ɵɵpipeBind1(11, 25, ctx.selectedPeriod))(\"activeTimeUnit\", ctx.activeTimeUnit)(\"minTime\", ctx.data.minTime)(\"maxTime\", ctx.data.maxTime)(\"isEditable\", ctx.data.enableKeyboardInput)(\"editableHintTmpl\", ctx.data.editableHintTmpl)(\"minutesGap\", ctx.data.minutesGap)(\"hoursOnly\", ctx.data.hoursOnly);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.activeTimeUnit);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.HOUR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", ctx.timeUnit.MINUTE);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.cancelBtnTmpl ? ctx.data.cancelBtnTmpl : _r0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.data.confirmBtnTmpl ? ctx.data.confirmBtnTmpl : _r2);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i5.CdkTrapFocus, i6.MatButton, i7.MatToolbar, NgxMatTimepickerDialComponent, NgxMatTimepickerMinutesFaceComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepickerContentComponent, i1.AsyncPipe],\n  styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerStandaloneComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-standalone\",\n      host: {\n        \"[class.mat-app-background]\": \"true\"\n      },\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus\\r\\n\\t cdkTrapFocusAutoCapture>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\",\n      styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_MAT_TIMEPICKER_CONFIG]\n      }]\n    }, {\n      type: NgxMatTimepickerService\n    }, {\n      type: NgxMatTimepickerEventService\n    }, {\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, null);\n})();\nlet config;\nclass NgxMatTimepickerComponent {\n  constructor(_eventService, _dialog, _overlay) {\n    this._eventService = _eventService;\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this.closed = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursOnly = false;\n    this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\n    this.isEsc = !0;\n    this.opened = new EventEmitter();\n    this.overlayPositions = [{\n      originX: \"center\",\n      originY: \"bottom\",\n      overlayX: \"center\",\n      overlayY: \"top\",\n      offsetY: 0\n    }, {\n      originX: \"center\",\n      originY: \"top\",\n      overlayX: \"center\",\n      overlayY: \"bottom\",\n      offsetY: 0\n    }];\n    this.showPicker = !1;\n    this.timeChanged = new EventEmitter();\n    this.timeSet = new EventEmitter();\n    this.timeUpdated = new BehaviorSubject(void 0); // used in the dialog, check if a better approach can be used\n    this._appendToInput = !1;\n    this._color = \"primary\";\n    this._format = 12;\n  }\n  set appendToInput(newValue) {\n    this._appendToInput = coerceBooleanProperty(newValue);\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  get disabled() {\n    return this._timepickerInput && this._timepickerInput.disabled;\n  }\n  get format() {\n    return this._timepickerInput ? this._timepickerInput.format : this._format;\n  }\n  set format(value) {\n    this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\n  }\n  get inputElement() {\n    return this._timepickerInput && this._timepickerInput.element;\n  }\n  get maxTime() {\n    return this._timepickerInput ? this._timepickerInput.max : this.max;\n  }\n  get minTime() {\n    return this._timepickerInput ? this._timepickerInput.min : this.min;\n  }\n  get minutesGap() {\n    return this._minutesGap;\n  }\n  set minutesGap(gap) {\n    if (gap == null) {\n      return;\n    }\n    gap = Math.floor(gap);\n    this._minutesGap = gap <= 59 ? gap : 1;\n  }\n  get overlayOrigin() {\n    return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\n  }\n  get time() {\n    return this._timepickerInput && this._timepickerInput.value;\n  }\n  close() {\n    if (this._appendToInput) {\n      this._overlayRef && this._overlayRef.dispose();\n    } else {\n      this._dialogRef && this._dialogRef.close();\n    }\n    this.showPicker = !1;\n    this.closed.emit();\n  }\n  open() {\n    // Set data to be injected\n    config = {\n      timepickerBaseRef: this,\n      time: this.time,\n      defaultTime: this.defaultTime,\n      maxTime: this.maxTime,\n      minTime: this.minTime,\n      format: this.format,\n      minutesGap: this.minutesGap,\n      disableAnimation: this.disableAnimation,\n      cancelBtnTmpl: this.cancelBtnTmpl,\n      confirmBtnTmpl: this.confirmBtnTmpl,\n      editableHintTmpl: this.editableHintTmpl,\n      disabled: this.disabled,\n      enableKeyboardInput: this.enableKeyboardInput,\n      preventOverlayClick: this.preventOverlayClick,\n      appendToInput: this._appendToInput,\n      hoursOnly: this.hoursOnly,\n      timepickerClass: this.timepickerClass,\n      inputElement: this.inputElement,\n      color: this.color\n    };\n    if (this._appendToInput) {\n      this.showPicker = !0;\n    } else {\n      this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\n        panelClass: \"ngx-mat-timepicker-dialog\",\n        data: {\n          ...config\n        }\n      });\n      this._dialogRef.afterClosed().subscribe(() => {\n        this.closed.emit();\n      });\n    }\n    this.opened.emit();\n  }\n  /***\r\n   * Register an input with this timepicker.\r\n   * input - The timepicker input to register with this timepicker\r\n   */\n  registerInput(input) {\n    if (this._timepickerInput) {\n      console.warn(\"Input for this timepicker was already set\", input.element);\n      throw Error(\"A Timepicker can only be associated with a single input.\");\n    }\n    this._timepickerInput = input;\n  }\n  unregisterInput() {\n    this._timepickerInput = void 0;\n  }\n  updateTime(time) {\n    this.timeUpdated.next(time);\n  }\n}\nNgxMatTimepickerComponent.nextId = 0;\nNgxMatTimepickerComponent.ɵfac = function NgxMatTimepickerComponent_Factory(t) {\n  return new (t || NgxMatTimepickerComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerEventService), i0.ɵɵdirectiveInject(i1$2.MatDialog), i0.ɵɵdirectiveInject(i1$1.Overlay));\n};\nNgxMatTimepickerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerComponent,\n  selectors: [[\"ngx-mat-timepicker\"]],\n  hostVars: 1,\n  hostBindings: function NgxMatTimepickerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    appendToInput: \"appendToInput\",\n    color: \"color\",\n    format: \"format\",\n    minutesGap: \"minutesGap\",\n    cancelBtnTmpl: \"cancelBtnTmpl\",\n    confirmBtnTmpl: \"confirmBtnTmpl\",\n    defaultTime: \"defaultTime\",\n    disableAnimation: \"disableAnimation\",\n    editableHintTmpl: \"editableHintTmpl\",\n    enableKeyboardInput: \"enableKeyboardInput\",\n    hoursOnly: \"hoursOnly\",\n    isEsc: \"isEsc\",\n    max: \"max\",\n    min: \"min\",\n    preventOverlayClick: \"preventOverlayClick\",\n    timepickerClass: \"timepickerClass\"\n  },\n  outputs: {\n    closed: \"closed\",\n    hourSelected: \"hourSelected\",\n    opened: \"opened\",\n    timeChanged: \"timeChanged\",\n    timeSet: \"timeSet\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NGX_MAT_TIMEPICKER_CONFIG,\n    useFactory() {\n      return config;\n    }\n  }])],\n  decls: 1,\n  vars: 4,\n  consts: [[\"cdkConnectedOverlay\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"backdropClick\"]],\n  template: function NgxMatTimepickerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxMatTimepickerComponent_ng_template_0_Template, 1, 0, \"ng-template\", 0);\n      i0.ɵɵlistener(\"backdropClick\", function NgxMatTimepickerComponent_Template_ng_template_backdropClick_0_listener() {\n        return ctx.close();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"cdkConnectedOverlayPositions\", ctx.overlayPositions)(\"cdkConnectedOverlayHasBackdrop\", !0)(\"cdkConnectedOverlayOrigin\", ctx.overlayOrigin)(\"cdkConnectedOverlayOpen\", ctx.showPicker);\n    }\n  },\n  dependencies: [i1$1.CdkConnectedOverlay, NgxMatTimepickerStandaloneComponent],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker\",\n      template: `\n\t\t<ng-template\n\t\t\t\tcdkConnectedOverlay\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\n\t\t\t\t(backdropClick)=\"close()\"\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\n\t\t</ng-template>`,\n      providers: [{\n        provide: NGX_MAT_TIMEPICKER_CONFIG,\n        useFactory() {\n          return config;\n        }\n      }]\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerEventService\n    }, {\n      type: i1$2.MatDialog\n    }, {\n      type: i1$1.Overlay\n    }];\n  }, {\n    appendToInput: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    minutesGap: [{\n      type: Input\n    }],\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    disableAnimation: [{\n      type: Input\n    }],\n    editableHintTmpl: [{\n      type: Input\n    }],\n    enableKeyboardInput: [{\n      type: Input\n    }],\n    hourSelected: [{\n      type: Output\n    }],\n    hoursOnly: [{\n      type: Input\n    }],\n    id: [{\n      type: HostBinding,\n      args: [\"id\"]\n    }],\n    isEsc: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    opened: [{\n      type: Output\n    }],\n    preventOverlayClick: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timepickerClass: [{\n      type: Input\n    }],\n    timeSet: [{\n      type: Output\n    }]\n  });\n})();\n\n/* To override a default toggle icon */\nclass NgxMatTimepickerToggleIconDirective {}\nNgxMatTimepickerToggleIconDirective.ɵfac = function NgxMatTimepickerToggleIconDirective_Factory(t) {\n  return new (t || NgxMatTimepickerToggleIconDirective)();\n};\nNgxMatTimepickerToggleIconDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatTimepickerToggleIconDirective,\n  selectors: [[\"\", \"ngxMatTimepickerToggleIcon\", \"\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerToggleIconDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepickerToggleIcon]\"\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerToggleComponent {\n  get disabled() {\n    return this._disabled === void 0 ? this.timepicker?.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  open(event) {\n    if (this.timepicker) {\n      this.timepicker.open();\n      event.stopPropagation();\n    }\n  }\n}\nNgxMatTimepickerToggleComponent.ɵfac = function NgxMatTimepickerToggleComponent_Factory(t) {\n  return new (t || NgxMatTimepickerToggleComponent)();\n};\nNgxMatTimepickerToggleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerToggleComponent,\n  selectors: [[\"ngx-mat-timepicker-toggle\"]],\n  contentQueries: function NgxMatTimepickerToggleComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, NgxMatTimepickerToggleIconDirective, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customIcon = _t.first);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    timepicker: [\"for\", \"timepicker\"]\n  },\n  ngContentSelectors: _c10,\n  decls: 3,\n  vars: 2,\n  consts: [[\"color\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"ngx-mat-timepicker-toggle\", \"mat-elevation-z0\", 3, \"disabled\", \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"class\", \"ngx-mat-timepicker-toggle-default-icon\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"fill\", \"currentColor\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", 1, \"ngx-mat-timepicker-toggle-default-icon\"], [\"d\", \"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"]],\n  template: function NgxMatTimepickerToggleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c9);\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerToggleComponent_Template_button_click_0_listener($event) {\n        return ctx.open($event);\n      });\n      i0.ɵɵtemplate(1, NgxMatTimepickerToggleComponent__svg_svg_1_Template, 2, 0, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"disabled\", ctx.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.customIcon);\n    }\n  },\n  dependencies: [i1.NgIf, i6.MatIconButton],\n  styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerToggleComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-toggle\",\n      encapsulation: ViewEncapsulation.None,\n      template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\",\n      styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"]\n    }]\n  }], null, {\n    disabled: [{\n      type: Input\n    }],\n    customIcon: [{\n      type: ContentChild,\n      args: [NgxMatTimepickerToggleIconDirective, {\n        static: true\n      }]\n    }],\n    timepicker: [{\n      type: Input,\n      args: [\"for\"]\n    }]\n  });\n})();\nfunction concatTime(currentTime, nextTime) {\n  const isNumber = /\\d/.test(nextTime);\n  if (isNumber) {\n    const time = currentTime + nextTime;\n    return +time;\n  }\n  return undefined;\n}\nclass NgxMatTimepickerControlComponent {\n  constructor(_timeParser) {\n    this._timeParser = _timeParser;\n    this.id = NgxMatTimepickerControlComponent.nextId++;\n    this.timeChanged = new EventEmitter();\n    this._color = \"primary\";\n    this._floatLabel = \"auto\";\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get color() {\n    return this._color;\n  }\n  set floatLabel(newValue) {\n    this._floatLabel = newValue;\n  }\n  get floatLabel() {\n    return this._floatLabel;\n  }\n  changeTime(event) {\n    event.stopPropagation();\n    const char = event.data;\n    const time = concatTime(String(this.time), char);\n    this._changeTimeIfValid(time);\n  }\n  decrease() {\n    if (!this.disabled) {\n      let previousTime = +this.time - 1;\n      if (previousTime < this.min) {\n        previousTime = this.max;\n      }\n      if (this._isSelectedTimeDisabled(previousTime)) {\n        previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\n      }\n      if (previousTime !== this.time) {\n        this.timeChanged.emit(previousTime);\n      }\n    }\n  }\n  increase() {\n    if (!this.disabled) {\n      let nextTime = +this.time + 1;\n      if (nextTime > this.max) {\n        nextTime = this.min;\n      }\n      if (this._isSelectedTimeDisabled(nextTime)) {\n        nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\n      }\n      if (nextTime !== this.time) {\n        this.timeChanged.emit(nextTime);\n      }\n    }\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    if (changes[\"timeList\"] && this.time != null) {\n      if (this._isSelectedTimeDisabled(this.time)) {\n        this._setAvailableTime();\n      }\n    }\n  }\n  onBlur() {\n    this.isFocused = false;\n    if (this._previousTime !== this.time) {\n      this._changeTimeIfValid(+this.time);\n    }\n  }\n  onFocus() {\n    this.isFocused = true;\n    this._previousTime = this.time;\n  }\n  onKeydown(event) {\n    event.stopPropagation();\n    if (!NgxMatTimepickerUtils.isDigit(event)) {\n      event.preventDefault();\n    }\n    switch (event.key) {\n      case \"ArrowUp\":\n        this.increase();\n        break;\n      case \"ArrowDown\":\n        this.decrease();\n        break;\n    }\n    if (this.preventTyping && event.key !== \"Tab\") {\n      event.preventDefault();\n    }\n  }\n  onModelChange(value) {\n    this.time = +this._timeParser.transform(value, this.timeUnit);\n  }\n  _changeTimeIfValid(value) {\n    if (!isNaN(value)) {\n      this.time = value;\n      if (this.time > this.max) {\n        const timeString = String(value);\n        this.time = +timeString[timeString.length - 1];\n      }\n      if (this.time < this.min) {\n        this.time = this.min;\n      }\n      this.timeChanged.emit(this.time);\n    }\n  }\n  _getAvailableTime(currentTime, fn) {\n    const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n    const availableTime = fn(currentTimeIndex);\n    return availableTime != null ? availableTime : this.time;\n  }\n  _getNextAvailableTime(index) {\n    const timeCollection = this.timeList;\n    const maxValue = timeCollection.length;\n    for (let i = index + 1; i < maxValue; i++) {\n      const time = timeCollection[i];\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n    return undefined;\n  }\n  _getPrevAvailableTime(index) {\n    for (let i = index; i >= 0; i--) {\n      const time = this.timeList[i];\n      if (!time.disabled) {\n        return time.time;\n      }\n    }\n    return undefined;\n  }\n  _isSelectedTimeDisabled(time) {\n    return this.timeList.find(faceTime => faceTime.time === time).disabled;\n  }\n  _setAvailableTime() {\n    this.time = this.timeList.find(t => !t.disabled).time;\n    this.timeChanged.emit(this.time);\n  }\n}\nNgxMatTimepickerControlComponent.nextId = 0;\nNgxMatTimepickerControlComponent.ɵfac = function NgxMatTimepickerControlComponent_Factory(t) {\n  return new (t || NgxMatTimepickerControlComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerParserPipe));\n};\nNgxMatTimepickerControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerControlComponent,\n  selectors: [[\"ngx-mat-timepicker-time-control\"]],\n  inputs: {\n    color: \"color\",\n    disabled: \"disabled\",\n    floatLabel: \"floatLabel\",\n    max: \"max\",\n    min: \"min\",\n    placeholder: \"placeholder\",\n    preventTyping: \"preventTyping\",\n    time: \"time\",\n    timeList: \"timeList\",\n    timeUnit: \"timeUnit\"\n  },\n  outputs: {\n    timeChanged: \"timeChanged\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgxMatTimepickerParserPipe]), i0.ɵɵNgOnChangesFeature],\n  decls: 13,\n  vars: 17,\n  consts: [[1, \"ngx-mat-timepicker-control\", 3, \"color\", \"floatLabel\", \"ngClass\"], [\"matInput\", \"\", \"maxlength\", \"2\", 3, \"id\", \"name\", \"ngModel\", \"placeholder\", \"disabled\", \"ngModelChange\", \"keydown\", \"beforeinput\", \"focus\", \"blur\"], [\"matSuffix\", \"\", 1, \"arrows-wrap\"], [\"role\", \"button\", 1, \"arrow\", 3, \"click\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"height\", \"18\", \"viewBox\", \"0 0 24 24\", \"width\", \"18\"], [\"d\", \"M0 0h24v24H0z\", \"fill\", \"none\"], [\"d\", \"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"], [\"d\", \"M0 0h24v24H0V0z\", \"fill\", \"none\"], [\"d\", \"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"]],\n  template: function NgxMatTimepickerControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-form-field\", 0)(1, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function NgxMatTimepickerControlComponent_Template_input_ngModelChange_1_listener($event) {\n        return ctx.onModelChange($event);\n      })(\"keydown\", function NgxMatTimepickerControlComponent_Template_input_keydown_1_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"beforeinput\", function NgxMatTimepickerControlComponent_Template_input_beforeinput_1_listener($event) {\n        return ctx.changeTime($event);\n      })(\"focus\", function NgxMatTimepickerControlComponent_Template_input_focus_1_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function NgxMatTimepickerControlComponent_Template_input_blur_1_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵpipe(2, \"timeLocalizer\");\n      i0.ɵɵpipe(3, \"ngxMatTimepickerParser\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"span\", 3);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerControlComponent_Template_span_click_5_listener() {\n        return ctx.increase();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(6, \"svg\", 4);\n      i0.ɵɵelement(7, \"path\", 5)(8, \"path\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(9, \"span\", 3);\n      i0.ɵɵlistener(\"click\", function NgxMatTimepickerControlComponent_Template_span_click_9_listener() {\n        return ctx.decrease();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(10, \"svg\", 4);\n      i0.ɵɵelement(11, \"path\", 7)(12, \"path\", 8);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.isFocused));\n      i0.ɵɵadvance(1);\n      i0.ɵɵpropertyInterpolate1(\"id\", \"ngx_mat_timepicker_field_\", ctx.id, \"\")(\"name\", \"ngx_mat_timepicker_field_\", ctx.id, \"\");\n      i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind3(2, 8, i0.ɵɵpipeBind2(3, 12, ctx.time, ctx.timeUnit), ctx.timeUnit, true))(\"placeholder\", ctx.placeholder)(\"disabled\", ctx.disabled);\n    }\n  },\n  dependencies: [i1.NgClass, i3.DefaultValueAccessor, i3.NgControlStatus, i3.MaxLengthValidator, i3.NgModel, i4.MatFormField, i4.MatSuffix, i5$1.MatInput, NgxMatTimepickerParserPipe, NgxMatTimepickerTimeLocalizerPipe],\n  styles: [\".ngx-mat-timepicker-control[_ngcontent-%COMP%]{width:60px;min-width:60px}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%]{position:relative;z-index:1}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%] > .arrow[_ngcontent-%COMP%]{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control[_ngcontent-%COMP%]   .arrows-wrap[_ngcontent-%COMP%] > .arrow[_ngcontent-%COMP%]:hover{opacity:1}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerControlComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-time-control\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [NgxMatTimepickerParserPipe],\n      template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\",\n      styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerParserPipe\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    floatLabel: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    preventTyping: [{\n      type: Input\n    }],\n    time: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    timeList: [{\n      type: Input\n    }],\n    timeUnit: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerFieldComponent {\n  constructor(_timepickerService, _timepickerLocaleSrv) {\n    this._timepickerService = _timepickerService;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this.maxHour = 12;\n    this.minHour = 1;\n    this.period = NgxMatTimepickerPeriods.AM;\n    this.periods = [NgxMatTimepickerPeriods.AM, NgxMatTimepickerPeriods.PM];\n    this.timeChanged = new EventEmitter();\n    this.timeUnit = NgxMatTimepickerUnits;\n    this._color = \"primary\";\n    this._floatLabel = \"auto\";\n    this._format = 12;\n    this._isFirstTimeChange = true;\n    this._subsCtrl$ = new Subject();\n    this._onChange = () => {};\n  }\n  get color() {\n    return this._color;\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  get defaultTime() {\n    return this._defaultTime;\n  }\n  set defaultTime(val) {\n    this._defaultTime = val;\n    this._isDefaultTime = !!val;\n  }\n  get floatLabel() {\n    return this._floatLabel;\n  }\n  set floatLabel(newValue) {\n    this._floatLabel = newValue;\n  }\n  get format() {\n    return this._format;\n  }\n  set format(value) {\n    this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\n    this.minHour = this._format === 12 ? 1 : 0;\n    this.maxHour = this._format === 12 ? 12 : 23;\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    const isDynamicallyChanged = value && this._previousFormat && this._previousFormat !== this._format;\n    if (isDynamicallyChanged) {\n      this._updateTime(this.timepickerTime);\n    }\n    this._previousFormat = this._format;\n  }\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    if (typeof value === \"string\") {\n      this._max = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._max = value;\n  }\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    if (typeof value === \"string\") {\n      this._min = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._min = value;\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  changeHour(hour) {\n    this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\n    this._changeTime();\n  }\n  changeMinute(minute) {\n    this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\n    this._changeTime();\n  }\n  changePeriod(event) {\n    this._timepickerService.period = event.value;\n    this._changeTime();\n  }\n  ngOnDestroy() {\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  ngOnInit() {\n    this._initTime(this.defaultTime);\n    this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\n    this.minutesList = NgxMatTimepickerUtils.getMinutes();\n    this.isTimeRangeSet = !!(this.min || this.max);\n    this.hour$ = this._timepickerService.selectedHour.pipe(tap(clockTime => this._selectedHour = clockTime.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes()));\n    this.minute$ = this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false));\n    if (this.format === 12) {\n      this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap(period => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\n    }\n  }\n  onTimeSet(time) {\n    this._updateTime(time);\n    this._emitLocalTimeChange(time);\n  }\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  registerOnTouched(_fn_) {}\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  writeValue(val) {\n    if (val) {\n      this._initTime(val);\n    } else {\n      this._resetTime();\n    }\n  }\n  _changeDefaultTimeValue(clockFaceTime) {\n    if (!this._isDefaultTime && this._isFirstTimeChange) {\n      return {\n        ...clockFaceTime,\n        time: null\n      };\n    }\n    return clockFaceTime;\n  }\n  _changeTime() {\n    const time = this._timepickerService.getFullTime(this.format);\n    this.timepickerTime = time;\n    this._emitLocalTimeChange(time);\n  }\n  _emitLocalTimeChange(time) {\n    const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, {\n      format: this.format,\n      locale: this._locale\n    });\n    this._onChange(localTime);\n    this.timeChanged.emit(localTime);\n  }\n  _initTime(time) {\n    const isDefaultTimeAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this.min, this.max, \"minutes\", null, this.format);\n    if (!isDefaultTimeAvailable) {\n      if (this.min) {\n        this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));\n        return;\n      }\n      if (this.max) {\n        this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));\n        return;\n      }\n    }\n    this._updateTime(time);\n  }\n  _isPeriodDisabled(period) {\n    return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\n      min: this.min,\n      max: this.max,\n      format: 12,\n      period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\n    }).every(time => time.disabled);\n  }\n  _resetTime() {\n    this._timepickerService.hour = {\n      angle: 0,\n      time: null\n    };\n    this._timepickerService.minute = {\n      angle: 0,\n      time: null\n    };\n  }\n  _updateAvailableHours() {\n    this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n  _updateAvailableMinutes() {\n    this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\n      min: this.min,\n      max: this.max,\n      format: this.format,\n      period: this.period\n    });\n  }\n  _updateAvailableTime() {\n    this._updateAvailableHours();\n    if (this._selectedHour) {\n      this._updateAvailableMinutes();\n    }\n  }\n  _updateTime(time) {\n    if (time) {\n      const formattedTime = NgxMatTimepickerAdapter.formatTime(time, {\n        locale: this._locale,\n        format: this.format\n      });\n      this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n      this.timepickerTime = formattedTime;\n    }\n  }\n}\nNgxMatTimepickerFieldComponent.ɵfac = function NgxMatTimepickerFieldComponent_Factory(t) {\n  return new (t || NgxMatTimepickerFieldComponent)(i0.ɵɵdirectiveInject(NgxMatTimepickerService), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService));\n};\nNgxMatTimepickerFieldComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxMatTimepickerFieldComponent,\n  selectors: [[\"ngx-mat-timepicker-field\"]],\n  inputs: {\n    color: \"color\",\n    defaultTime: \"defaultTime\",\n    floatLabel: \"floatLabel\",\n    format: \"format\",\n    max: \"max\",\n    min: \"min\",\n    cancelBtnTmpl: \"cancelBtnTmpl\",\n    confirmBtnTmpl: \"confirmBtnTmpl\",\n    controlOnly: \"controlOnly\",\n    disabled: \"disabled\",\n    toggleIcon: \"toggleIcon\"\n  },\n  outputs: {\n    timeChanged: \"timeChanged\"\n  },\n  features: [i0.ɵɵProvidersFeature([NgxMatTimepickerService, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxMatTimepickerFieldComponent,\n    multi: true\n  }])],\n  decls: 13,\n  vars: 36,\n  consts: [[1, \"ngx-mat-timepicker\", 3, \"ngClass\"], [1, \"ngx-mat-timepicker__control--first\", 3, \"color\", \"floatLabel\", \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [1, \"separator-colon\", \"ngx-mat-timepicker__control--second\"], [1, \"ngx-mat-timepicker__control--third\", 3, \"color\", \"floatLabel\", \"placeholder\", \"time\", \"min\", \"max\", \"timeUnit\", \"disabled\", \"timeList\", \"preventTyping\", \"timeChanged\"], [\"class\", \"period-select ngx-mat-timepicker__control--forth\", 3, \"color\", 4, \"ngIf\"], [\"class\", \"ngx-mat-timepicker__toggle\", 3, \"for\", \"disabled\", 4, \"ngIf\"], [3, \"color\", \"min\", \"max\", \"defaultTime\", \"format\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"timeSet\"], [\"timepicker\", \"\"], [\"defaultIcon\", \"\"], [1, \"period-select\", \"ngx-mat-timepicker__control--forth\", 3, \"color\"], [3, \"disabled\", \"ngModel\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"ngx-mat-timepicker__toggle\", 3, \"for\", \"disabled\"], [\"ngxMatTimepickerToggleIcon\", \"\"], [4, \"ngTemplateOutlet\"]],\n  template: function NgxMatTimepickerFieldComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"ngx-mat-timepicker-time-control\", 1);\n      i0.ɵɵlistener(\"timeChanged\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_1_listener($event) {\n        return ctx.changeHour($event);\n      });\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"span\", 2);\n      i0.ɵɵtext(4, \":\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"ngx-mat-timepicker-time-control\", 3);\n      i0.ɵɵlistener(\"timeChanged\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_time_control_timeChanged_5_listener($event) {\n        return ctx.changeMinute($event);\n      });\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, NgxMatTimepickerFieldComponent_mat_form_field_7_Template, 3, 4, \"mat-form-field\", 4);\n      i0.ɵɵtemplate(8, NgxMatTimepickerFieldComponent_ngx_mat_timepicker_toggle_8_Template, 3, 3, \"ngx-mat-timepicker-toggle\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"ngx-mat-timepicker\", 6, 7);\n      i0.ɵɵlistener(\"timeSet\", function NgxMatTimepickerFieldComponent_Template_ngx_mat_timepicker_timeSet_9_listener($event) {\n        return ctx.onTimeSet($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, NgxMatTimepickerFieldComponent_ng_template_11_Template, 2, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      let tmp_4_0;\n      let tmp_14_0;\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(34, _c11, ctx.disabled));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"placeholder\", \"HH\")(\"time\", (tmp_4_0 = i0.ɵɵpipeBind1(2, 30, ctx.hour$)) == null ? null : tmp_4_0.time)(\"min\", ctx.minHour)(\"max\", ctx.maxHour)(\"timeUnit\", ctx.timeUnit.HOUR)(\"disabled\", ctx.disabled)(\"timeList\", ctx.hoursList)(\"preventTyping\", ctx.isTimeRangeSet);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"floatLabel\", ctx.floatLabel)(\"placeholder\", \"MM\")(\"time\", (tmp_14_0 = i0.ɵɵpipeBind1(6, 32, ctx.minute$)) == null ? null : tmp_14_0.time)(\"min\", 0)(\"max\", 59)(\"timeUnit\", ctx.timeUnit.MINUTE)(\"disabled\", ctx.disabled)(\"timeList\", ctx.minutesList)(\"preventTyping\", ctx.isTimeRangeSet);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.format !== 24);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.controlOnly);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"color\", ctx.color)(\"min\", ctx.min)(\"max\", ctx.max)(\"defaultTime\", ctx.timepickerTime)(\"format\", ctx.format)(\"cancelBtnTmpl\", ctx.cancelBtnTmpl)(\"confirmBtnTmpl\", ctx.confirmBtnTmpl);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i3.NgControlStatus, i3.NgModel, i4.MatFormField, i6$1.MatSelect, i7$1.MatOption, i8.MatIcon, NgxMatTimepickerComponent, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective, NgxMatTimepickerControlComponent, i1.AsyncPipe],\n  styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerFieldComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-mat-timepicker-field\",\n      providers: [NgxMatTimepickerService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMatTimepickerFieldComponent,\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"(hour$ | async)?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"(minute$ | async)?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\",\n      styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: NgxMatTimepickerService\n    }, {\n      type: NgxMatTimepickerLocaleService\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    defaultTime: [{\n      type: Input\n    }],\n    floatLabel: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    cancelBtnTmpl: [{\n      type: Input\n    }],\n    confirmBtnTmpl: [{\n      type: Input\n    }],\n    controlOnly: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    timeChanged: [{\n      type: Output\n    }],\n    toggleIcon: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxMatTimepickerDirective {\n  constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {\n    this._elementRef = _elementRef;\n    this._timepickerLocaleSrv = _timepickerLocaleSrv;\n    this._matFormField = _matFormField;\n    this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\n    this._format = 12;\n    this._subsCtrl$ = new Subject();\n    this._value = \"\";\n    this.onTouched = () => {};\n    this._onChange = () => {};\n  }\n  get element() {\n    return this._elementRef && this._elementRef.nativeElement;\n  }\n  get format() {\n    return this._format;\n  }\n  set format(value) {\n    this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;\n    const isDynamicallyChanged = value && this._previousFormat && this._previousFormat !== this._format;\n    if (isDynamicallyChanged) {\n      this.value = this._value;\n      this._timepicker.updateTime(this._value);\n    }\n    this._previousFormat = this._format;\n  }\n  get max() {\n    return this._max;\n  }\n  set max(value) {\n    if (typeof value === \"string\") {\n      this._max = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._max = value;\n  }\n  get min() {\n    return this._min;\n  }\n  set min(value) {\n    if (typeof value === \"string\") {\n      this._min = NgxMatTimepickerAdapter.parseTime(value, {\n        locale: this._locale,\n        format: this.format\n      });\n      return;\n    }\n    this._min = value;\n  }\n  set timepicker(picker) {\n    this._registerTimepicker(picker);\n  }\n  get value() {\n    if (!this._value) {\n      return \"\";\n    }\n    return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, {\n      format: this.format,\n      locale: this._locale\n    });\n  }\n  set value(value) {\n    if (!value) {\n      this._value = \"\";\n      this._updateInputValue();\n      return;\n    }\n    const time = NgxMatTimepickerAdapter.formatTime(value, {\n      locale: this._locale,\n      format: this.format\n    });\n    const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, \"minutes\", this._timepicker.minutesGap, this._format);\n    if (isAvailable) {\n      this._value = time;\n      this._updateInputValue();\n      return;\n    }\n    console.warn(\"Selected time doesn't match min or max value\");\n  }\n  set _defaultTime(time) {\n    this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\n      locale: this._locale,\n      format: this.format\n    });\n  }\n  get _locale() {\n    return this._timepickerLocaleSrv.locale;\n  }\n  ngOnChanges(changes) {\n    // tslint:disable-next-line:no-string-literal\n    const vChanges = changes[\"value\"];\n    if (vChanges && vChanges.currentValue) {\n      this._defaultTime = vChanges.currentValue;\n    }\n  }\n  ngOnDestroy() {\n    this._unregisterTimepicker();\n    this._subsCtrl$.next();\n    this._subsCtrl$.complete();\n  }\n  onClick(event) {\n    if (!this.disableClick) {\n      this._timepicker.open();\n      event.stopPropagation();\n    }\n  }\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  updateValue(value) {\n    this.value = value;\n    this._onChange(value);\n  }\n  writeValue(value) {\n    this.value = value;\n    if (value) {\n      this._defaultTime = value;\n    }\n  }\n  _registerTimepicker(picker) {\n    if (picker) {\n      this._timepicker = picker;\n      this._timepicker.registerInput(this);\n      this._timepicker.timeSet.pipe(takeUntil$1(this._subsCtrl$)).subscribe(time => {\n        this.value = time;\n        this._onChange(this.value);\n        this.onTouched();\n        this._defaultTime = this._value;\n      });\n    } else {\n      throw new Error(\"NgxMatTimepickerComponent is not defined.\" + \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\n    }\n  }\n  _unregisterTimepicker() {\n    if (this._timepicker) {\n      this._timepicker.unregisterInput();\n    }\n  }\n  _updateInputValue() {\n    this._elementRef.nativeElement.value = this.value;\n  }\n}\nNgxMatTimepickerDirective.ɵfac = function NgxMatTimepickerDirective_Factory(t) {\n  return new (t || NgxMatTimepickerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(NgxMatTimepickerLocaleService), i0.ɵɵdirectiveInject(MatFormField, 8));\n};\nNgxMatTimepickerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxMatTimepickerDirective,\n  selectors: [[\"\", \"ngxMatTimepicker\", \"\"]],\n  hostVars: 2,\n  hostBindings: function NgxMatTimepickerDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function NgxMatTimepickerDirective_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      })(\"click\", function NgxMatTimepickerDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"change\", function NgxMatTimepickerDirective_change_HostBindingHandler($event) {\n        return ctx.updateValue($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"cdkOverlayOrigin\", ctx.cdkOverlayOrigin);\n    }\n  },\n  inputs: {\n    format: \"format\",\n    max: \"max\",\n    min: \"min\",\n    timepicker: [\"ngxMatTimepicker\", \"timepicker\"],\n    value: \"value\",\n    disableClick: \"disableClick\",\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxMatTimepickerDirective,\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[ngxMatTimepicker]\",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: NgxMatTimepickerDirective,\n        multi: true\n      }],\n      // tslint:disable-next-line:no-host-metadata-property\n      host: {\n        \"[disabled]\": \"disabled\",\n        \"(blur)\": \"onTouched()\"\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: NgxMatTimepickerLocaleService\n    }, {\n      type: i4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }];\n  }, {\n    format: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    timepicker: [{\n      type: Input,\n      args: [\"ngxMatTimepicker\"]\n    }],\n    value: [{\n      type: Input\n    }],\n    cdkOverlayOrigin: [{\n      type: HostBinding,\n      args: [\"attr.cdkOverlayOrigin\"]\n    }],\n    disableClick: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    updateValue: [{\n      type: HostListener,\n      args: [\"change\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxMatTimepickerTimeFormatterPipe {\n  transform(time, timeUnit) {\n    if (time == null || time === '') {\n      return time;\n    }\n    switch (timeUnit) {\n      case NgxMatTimepickerUnits.HOUR:\n        return DateTime.fromObject({\n          hour: +time\n        }).toFormat(\"HH\");\n      case NgxMatTimepickerUnits.MINUTE:\n        return DateTime.fromObject({\n          minute: +time\n        }).toFormat(\"mm\");\n      default:\n        throw new Error(\"no such time unit\");\n    }\n  }\n}\nNgxMatTimepickerTimeFormatterPipe.ɵfac = function NgxMatTimepickerTimeFormatterPipe_Factory(t) {\n  return new (t || NgxMatTimepickerTimeFormatterPipe)();\n};\nNgxMatTimepickerTimeFormatterPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"timeFormatter\",\n  type: NgxMatTimepickerTimeFormatterPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerTimeFormatterPipe, [{\n    type: Pipe,\n    args: [{\n      name: \"timeFormatter\"\n    }]\n  }], null, null);\n})();\nclass NgxMatTimepickerModule {\n  static setLocale(locale) {\n    return {\n      ngModule: NgxMatTimepickerModule,\n      providers: [{\n        provide: NGX_MAT_TIMEPICKER_LOCALE,\n        useValue: locale\n      }, {\n        provide: NGX_MAT_TIMEPICKER_CONFIG,\n        useValue: undefined\n      }, NgxMatTimepickerLocaleService]\n    };\n  }\n}\nNgxMatTimepickerModule.ɵfac = function NgxMatTimepickerModule_Factory(t) {\n  return new (t || NgxMatTimepickerModule)();\n};\nNgxMatTimepickerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatTimepickerModule\n});\nNgxMatTimepickerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgxMatTimepickerLocaleService, {\n    provide: MAT_FAB_DEFAULT_OPTIONS,\n    useValue: {\n      color: \"void\"\n    }\n  }],\n  imports: [CommonModule, A11yModule, FormsModule, MatButtonModule, MatFormFieldModule, MatDialogModule, MatInputModule, MatSelectModule, MatToolbarModule, MatIconModule, OverlayModule, PortalModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatTimepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, A11yModule, FormsModule, MatButtonModule, MatFormFieldModule, MatDialogModule, MatInputModule, MatSelectModule, MatToolbarModule, MatIconModule, OverlayModule, PortalModule],\n      exports: [NgxMatTimepickerComponent, NgxMatTimepickerToggleComponent, NgxMatTimepickerFieldComponent, NgxMatTimepickerDirective, NgxMatTimepickerToggleIconDirective],\n      declarations: [\n      // Not really used, but needed to use it as abstract class\n      NgxMatTimepickerBaseDirective, NgxMatTimepickerHoursFaceDirective,\n      //\n      NgxMatTimepickerActiveHourPipe, NgxMatTimepickerActiveMinutePipe, NgxMatTimepickerComponent, NgxMatTimepickerDialComponent, NgxMatTimepickerDialControlComponent, NgxMatTimepickerDialogComponent, NgxMatTimepickerDirective, NgxMatTimepickerFaceComponent, NgxMatTimepickerMinutesFaceComponent, NgxMatTimepickerPeriodComponent, NgxMatTimepickerStandaloneComponent, NgxMatTimepickerToggleComponent, NgxMatTimepicker12HoursFaceComponent, NgxMatTimepicker24HoursFaceComponent, NgxMatTimepickerToggleIconDirective, NgxMatTimepickerAutofocusDirective, NgxMatTimepickerMinutesFormatterPipe, NgxMatTimepickerFieldComponent, NgxMatTimepickerControlComponent, NgxMatTimepickerParserPipe, NgxMatTimepickerContentComponent, NgxMatTimepickerTimeFormatterPipe, NgxMatTimepickerTimeLocalizerPipe],\n      providers: [NgxMatTimepickerLocaleService, {\n        provide: MAT_FAB_DEFAULT_OPTIONS,\n        useValue: {\n          color: \"void\"\n        }\n      }]\n    }]\n  }], null, null);\n})();\n\n// COMPONENTS\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxMatTimepickerComponent, NgxMatTimepickerDirective, NgxMatTimepickerFieldComponent, NgxMatTimepickerLocaleService, NgxMatTimepickerModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective };","map":{"version":3,"names":["coerceBooleanProperty","i0","InjectionToken","Injectable","Inject","Directive","Input","HostListener","Pipe","Optional","EventEmitter","Component","Output","ChangeDetectionStrategy","ElementRef","ViewEncapsulation","ViewChild","HostBinding","ContentChild","NgModule","DateTime","Info","i1$2","MAT_DIALOG_DATA","MatDialogModule","BehaviorSubject","Subject","takeUntil","takeUntil$1","shareReplay","tap","map","distinctUntilChanged","i1","DOCUMENT","CommonModule","i6","MatButtonModule","MAT_FAB_DEFAULT_OPTIONS","i7","MatToolbarModule","i3","NG_VALUE_ACCESSOR","FormsModule","trigger","transition","style","animate","sequence","i1$1","CdkOverlayOrigin","OverlayModule","i5","A11yModule","i4","MatFormField","MatFormFieldModule","i6$1","MatSelectModule","i7$1","i8","MatIconModule","i5$1","MatInputModule","PortalModule","NgxMatTimepickerFormat","NgxMatTimepickerPeriods","NgxMatTimepickerAdapter","formatHour","currentHour","format","period","isTwentyFour","hour","AM","PM","formatTime","time","opts","parsedTime","parseTime","setLocale","defaultLocale","isTwelve","toLocaleString","TIME_SIMPLE","hour12","replace","toISOTime","includeOffset","suppressMilliseconds","suppressSeconds","fromDateTimeToString","reconfigure","numberingSystem","defaultNumberingSystem","locale","toFormat","TWENTY_FOUR","TWELVE","isBetween","before","after","unit","innerUnit","isSameOrBefore","isSameOrAfter","compareWith","hasSame","valueOf","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","between","isAvailable","localeOpts","_getLocaleOptionsByTime","timeMask","TWENTY_FOUR_SHORT","match","TWELVE_SHORT","fromFormat","toLocaleTimeString","defaultFormat","hourCycle","defaultToEN","outputCalendar","now","resolvedLocaleOptions","isNaN","parseInt","NgxMatTimepickerUnits","NGX_MAT_TIMEPICKER_CONFIG","provideNgxMatTimepickerOptions","config","provide","useValue","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMatTimepickerService","constructor","_hour$","_minute$","_period$","next","isPeriodValid","selectedHour","asObservable","selectedMinute","selectedPeriod","getFullTime","getValue","trim","setDefaultTimeIfAvailable","_setDefaultTime","e","console","error","_resetTime","defaultDto","isValid","substring","length","toUpperCase","formatHourByPeriod","ɵfac","ɵprov","type","args","providedIn","NgxMatTimepickerEventService","_backdropClick$","_keydownEvent$","backdropClick","pipe","bufferSize","refCount","keydownEvent","dispatchEvent","event","NGX_MAT_TIMEPICKER_LOCALE","factory","NgxMatTimepickerLocaleService","initialLocale","_locale","updateLocale","newValue","_initialLocale","undefined","decorators","NgxMatTimepickerBaseDirective","_timepickerSrv","_eventSrv","_timepickerLocaleSrv","data","activeTimeUnit","HOUR","timeUnit","_color","_subsCtrl$","color","defaultTime","_defaultTime","changePeriod","_onTimeChange","changeTimeUnit","close","timepickerBaseRef","ngOnDestroy","complete","ngOnInit","_defineTime","timeUpdated","subscribe","bind","onHourChange","onHourSelected","hoursOnly","MINUTE","hourSelected","onKeydown","stopPropagation","onMinuteChange","setTime","timeSet","emit","minTime","timeChanged","maxTime","ɵdir","selector","NgxMatTimepickerUtils","disableHours","hours","value","currentTime","fromObject","disabled","disableMinutes","set","getHours","Array","fill","v","i","angleStep","getMinutes","gap","minutesCount","push","isDigit","some","n","keyCode","ctrlKey","metaKey","NgxMatTimepickerMeasure","NgxMatTimepickerParserPipe","_numberingSystem","local","transform","_parseTime","toString","timeMeasure","String","ɵpipe","name","NgxMatTimepickerAutofocusDirective","_element","document","_activeElement","activeElement","ngOnChanges","isFocusActive","setTimeout","nativeElement","focus","preventScroll","NgxMatTimepickerTimeLocalizerPipe","isKeyboardEnabled","_formatTime","retainSelection","selectionStart","selectionEnd","NgxMatTimepickerDialControlComponent","_elRef","_timeParserPipe","focused","timeUnitChanged","unfocused","_selectedTime","timeList","find","t","changeTimeByKeyboard","char","fromCharCode","isTimeDisabledToChange","preventDefault","ngAfterViewInit","querySelector","addEventListener","removeEventListener","_changeTimeByArrow","onModelChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","_addTime","amount","substr","isTimeUnavailable","ɵcmp","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","NgModel","providers","template","styles","isActive","isEditable","nextTime","isNumber","test","selectedTime","NgxMatTimepickerPeriodComponent","_overlay","isPeriodAvailable","overlayScrollStrategy","scrollStrategies","reposition","periodChanged","timePeriod","animationDone","_isSwitchPeriodAvailable","_getDisabledTimeByPeriod","every","Overlay","CdkConnectedOverlay","opacity","animations","meridiems","NgxMatTimepickerDialComponent","_localeSrv","hourChanged","minuteChanged","hourString","minuteString","changeHour","changeMinute","hideHint","isHintVisible","changes","currentValue","showHint","NgTemplateOutlet","changeDetection","OnPush","editableHintTmpl","NgxMatTimepickerActiveHourPipe","isClockFaceDisabled","NgxMatTimepickerActiveMinutePipe","currentMinute","defaultGap","NgxMatTimepickerMinutesFormatterPipe","roundAngle","step","Math","round","countAngleByCords","x0","y0","x","y","currentAngle","CLOCK_HAND_STYLES","small","height","top","large","NgxMatTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","_setClockHandPosition","_addTouchEvents","faceTimeChanges","selectedTimeChanges","faceTime","_selectAvailableTime","_removeTouchEvents","onMousedown","_isStarted","onMouseup","selectTime","MouseEvent","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","_isInnerClockFace","roundedAngle","val","trackByTime","_item_","_touchStartHandler","_touchEndHandler","_decreaseClockHand","clockHand","_increaseClockHand","sqrt","pow","availableTime","NgForOf","NgStyle","MatMiniFabButton","MatToolbar","SlicePipe","encapsulation","None","static","read","NgxMatTimepickerMinutesFaceComponent","minuteChange","minutesList","NgxMatTimepickerHoursFaceDirective","hourChange","hoursList","_format","onTimeSelected","NgxMatTimepicker12HoursFaceComponent","NgxMatTimepicker24HoursFaceComponent","ngAfterContentInit","NgxMatTimepickerContentComponent","appendToInput","inputElement","NgxMatTimepickerDialogComponent","_dialogRef","timepickerSrv","eventSrv","timepickerLocaleSrv","MatDialogRef","NgSwitch","NgSwitchCase","MatButton","MatDialogContent","MatDialogActions","AsyncPipe","NgxMatTimepickerStandaloneComponent","CdkTrapFocus","host","NgxMatTimepickerComponent","_eventService","_dialog","closed","id","nextId","isEsc","opened","overlayPositions","originX","originY","overlayX","overlayY","offsetY","showPicker","_appendToInput","_timepickerInput","element","_minutesGap","floor","overlayOrigin","cdkOverlayOrigin","_overlayRef","dispose","open","disableAnimation","cancelBtnTmpl","confirmBtnTmpl","enableKeyboardInput","preventOverlayClick","timepickerClass","panelClass","afterClosed","registerInput","input","warn","unregisterInput","MatDialog","useFactory","NgxMatTimepickerToggleIconDirective","NgxMatTimepickerToggleComponent","_disabled","timepicker","MatIconButton","customIcon","concatTime","NgxMatTimepickerControlComponent","_timeParser","_floatLabel","floatLabel","changeTime","_changeTimeIfValid","decrease","_isSelectedTimeDisabled","_getAvailableTime","_getPrevAvailableTime","increase","_getNextAvailableTime","_setAvailableTime","onBlur","isFocused","_previousTime","onFocus","key","preventTyping","timeString","fn","currentTimeIndex","findIndex","index","timeCollection","maxValue","MaxLengthValidator","MatSuffix","MatInput","placeholder","NgxMatTimepickerFieldComponent","_timepickerService","maxHour","minHour","periods","_isFirstTimeChange","_onChange","_isDefaultTime","isDynamicallyChanged","_previousFormat","_updateTime","timepickerTime","_max","_min","h","_changeTime","m","_initTime","isTimeRangeSet","hour$","clockTime","_selectedHour","_changeDefaultTimeValue","_updateAvailableMinutes","minute$","isChangePeriodDisabled","_isPeriodDisabled","_updateAvailableTime","onTimeSet","_emitLocalTimeChange","registerOnChange","registerOnTouched","_fn_","setDisabledState","isDisabled","writeValue","clockFaceTime","localTime","isDefaultTimeAvailable","_updateAvailableHours","formattedTime","useExisting","multi","MatSelect","MatOption","MatIcon","controlOnly","toggleIcon","NgxMatTimepickerDirective","_elementRef","_matFormField","getConnectedOverlayOrigin","_value","onTouched","_timepicker","picker","_registerTimepicker","_updateInputValue","vChanges","_unregisterTimepicker","onClick","disableClick","updateValue","NgxMatTimepickerTimeFormatterPipe","NgxMatTimepickerModule","ngModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/Dell/OneDrive/Desktop/iba-travel/node_modules/ngx-mat-timepicker/fesm2020/ngx-mat-timepicker.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Directive, Input, HostListener, Pipe, Optional, EventEmitter, Component, Output, ChangeDetectionStrategy, ElementRef, ViewEncapsulation, ViewChild, HostBinding, ContentChild, NgModule } from '@angular/core';\nimport { DateTime, Info } from 'ts-luxon';\nimport * as i1$2 from '@angular/material/dialog';\nimport { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\nimport { BehaviorSubject, Subject, takeUntil as takeUntil$1 } from 'rxjs';\nimport { shareReplay, takeUntil, tap, map, distinctUntilChanged } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i6 from '@angular/material/button';\nimport { MatButtonModule, MAT_FAB_DEFAULT_OPTIONS } from '@angular/material/button';\nimport * as i7 from '@angular/material/toolbar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport * as i3 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { trigger, transition, style, animate, sequence } from '@angular/animations';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/material/form-field';\nimport { MatFormField, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i6$1 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7$1 from '@angular/material/core';\nimport * as i8 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i5$1 from '@angular/material/input';\nimport { MatInputModule } from '@angular/material/input';\nimport { PortalModule } from '@angular/cdk/portal';\n\nvar NgxMatTimepickerFormat;\r\n(function (NgxMatTimepickerFormat) {\r\n    NgxMatTimepickerFormat[\"TWELVE\"] = \"hh:mm a\";\r\n    NgxMatTimepickerFormat[\"TWELVE_SHORT\"] = \"h:m a\";\r\n    NgxMatTimepickerFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\r\n    NgxMatTimepickerFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\r\n})(NgxMatTimepickerFormat || (NgxMatTimepickerFormat = {}));\n\nvar NgxMatTimepickerPeriods;\r\n(function (NgxMatTimepickerPeriods) {\r\n    NgxMatTimepickerPeriods[\"AM\"] = \"AM\";\r\n    NgxMatTimepickerPeriods[\"PM\"] = \"PM\";\r\n})(NgxMatTimepickerPeriods || (NgxMatTimepickerPeriods = {}));\n\n// @dynamic\r\nclass NgxMatTimepickerAdapter {\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour, format, period) {\r\n        if (this.isTwentyFour(format)) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === NgxMatTimepickerPeriods.AM ? currentHour : currentHour + 12;\r\n        if (period === NgxMatTimepickerPeriods.AM && hour === 12) {\r\n            return 0;\r\n        }\r\n        else if (period === NgxMatTimepickerPeriods.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n    static formatTime(time, opts) {\r\n        if (!time) {\r\n            return \"Invalid Time\";\r\n        }\r\n        const parsedTime = this.parseTime(time, opts).setLocale(this.defaultLocale);\r\n        const isTwelve = !this.isTwentyFour(opts.format);\r\n        if (isTwelve) {\r\n            return parsedTime.toLocaleString({\r\n                ...DateTime.TIME_SIMPLE,\r\n                hour12: isTwelve\r\n            }).replace(/\\u200E/g, \"\");\r\n        }\r\n        return parsedTime.toISOTime({\r\n            includeOffset: false,\r\n            suppressMilliseconds: true,\r\n            suppressSeconds: true\r\n        }).replace(/\\u200E/g, \"\");\r\n    }\r\n    static fromDateTimeToString(time, format) {\r\n        return time.reconfigure({\r\n            numberingSystem: this.defaultNumberingSystem,\r\n            locale: this.defaultLocale\r\n        }).toFormat(this.isTwentyFour(format) ? NgxMatTimepickerFormat.TWENTY_FOUR : NgxMatTimepickerFormat.TWELVE);\r\n    }\r\n    static isBetween(time, before, after, unit = \"minutes\") {\r\n        const innerUnit = unit === \"hours\" ? unit : void 0;\r\n        return this.isSameOrBefore(time, after, innerUnit) && this.isSameOrAfter(time, before, innerUnit);\r\n    }\r\n    static isSameOrAfter(time, compareWith, unit = \"minutes\") {\r\n        if (unit === \"hours\") {\r\n            return time.hour >= compareWith.hour;\r\n        }\r\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n    }\r\n    static isSameOrBefore(time, compareWith, unit = \"minutes\") {\r\n        if (unit === \"hours\") {\r\n            return time.hour <= compareWith.hour;\r\n        }\r\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n    }\r\n    static isTimeAvailable(time, min, max, granularity, minutesGap, format) {\r\n        if (!time) {\r\n            return void 0;\r\n        }\r\n        const convertedTime = this.parseTime(time, { format });\r\n        const minutes = convertedTime.minute;\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && this.isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && this.isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && this.isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n    static isTwentyFour(format) {\r\n        return format === 24;\r\n    }\r\n    static parseTime(time, opts) {\r\n        const localeOpts = this._getLocaleOptionsByTime(time, opts);\r\n        let timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\r\n        // If there's a space, means we have the meridiem. Way faster than splitting text\r\n        // if (~time.indexOf(\" \")) {\r\n        // 09/02/2023 it seems that sometimes the space from the formatter is a nnbsp (Chromium >= 110)\r\n        // which causes the indexOf(\" \") to fail: charCode 32, while nbsp is 8239\r\n        if (time.match(/\\s/g)) {\r\n            /*\r\n             * We translate the meridiem in simple AM or PM letters (instead of A.M.)\r\n             * because even if we set the locale with NgxMatTimepickerModule.setLocale\r\n             * the default (en-US) will always be used here\r\n             */\r\n            time = time.replace(/\\.\\s*/g, \"\");\r\n            timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\r\n        }\r\n        return DateTime.fromFormat(time.replace(/\\s+/g, \" \"), timeMask, {\r\n            numberingSystem: localeOpts.numberingSystem,\r\n            locale: localeOpts.locale\r\n        });\r\n    }\r\n    static toLocaleTimeString(time, opts = {}) {\r\n        const { format = this.defaultFormat, locale = this.defaultLocale } = opts;\r\n        let hourCycle = \"h12\";\r\n        let timeMask = NgxMatTimepickerFormat.TWELVE_SHORT;\r\n        if (this.isTwentyFour(format)) {\r\n            hourCycle = \"h23\";\r\n            timeMask = NgxMatTimepickerFormat.TWENTY_FOUR_SHORT;\r\n        }\r\n        return DateTime.fromFormat(time, timeMask).reconfigure({\r\n            locale,\r\n            numberingSystem: opts.numberingSystem,\r\n            defaultToEN: opts.defaultToEN,\r\n            outputCalendar: opts.outputCalendar\r\n        }).toLocaleString({\r\n            ...DateTime.TIME_SIMPLE,\r\n            hourCycle\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @param time\r\n     * @param opts\r\n     * @private\r\n     */\r\n    static _getLocaleOptionsByTime(time, opts) {\r\n        const { numberingSystem, locale } = DateTime.now().reconfigure({\r\n            locale: opts.locale,\r\n            numberingSystem: opts.numberingSystem,\r\n            outputCalendar: opts.outputCalendar,\r\n            defaultToEN: opts.defaultToEN\r\n        }).resolvedLocaleOptions();\r\n        return isNaN(parseInt(time, 10)) ? {\r\n            numberingSystem: numberingSystem,\r\n            locale\r\n        } : {\r\n            numberingSystem: this.defaultNumberingSystem,\r\n            locale: this.defaultLocale\r\n        };\r\n    }\r\n}\r\nNgxMatTimepickerAdapter.defaultFormat = 12;\r\nNgxMatTimepickerAdapter.defaultLocale = \"en-US\";\r\nNgxMatTimepickerAdapter.defaultNumberingSystem = \"latn\";\n\nvar NgxMatTimepickerUnits;\r\n(function (NgxMatTimepickerUnits) {\r\n    NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"HOUR\"] = 0] = \"HOUR\";\r\n    NgxMatTimepickerUnits[NgxMatTimepickerUnits[\"MINUTE\"] = 1] = \"MINUTE\";\r\n})(NgxMatTimepickerUnits || (NgxMatTimepickerUnits = {}));\n\nconst NGX_MAT_TIMEPICKER_CONFIG = new InjectionToken(\"NGX_MAT_TIMEPICKER_CONFIG\");\r\nfunction provideNgxMatTimepickerOptions(config) {\r\n    return [\r\n        { provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: config },\r\n    ];\r\n}\n\nconst DEFAULT_HOUR = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\nclass NgxMatTimepickerService {\r\n    constructor() {\r\n        this._hour$ = new BehaviorSubject(DEFAULT_HOUR);\r\n        this._minute$ = new BehaviorSubject(DEFAULT_MINUTE);\r\n        this._period$ = new BehaviorSubject(NgxMatTimepickerPeriods.AM);\r\n    }\r\n    set hour(hour) {\r\n        this._hour$.next(hour);\r\n    }\r\n    set minute(minute) {\r\n        this._minute$.next(minute);\r\n    }\r\n    set period(period) {\r\n        const isPeriodValid = (period === NgxMatTimepickerPeriods.AM) || (period === NgxMatTimepickerPeriods.PM);\r\n        if (isPeriodValid) {\r\n            this._period$.next(period);\r\n        }\r\n    }\r\n    get selectedHour() {\r\n        return this._hour$.asObservable();\r\n    }\r\n    get selectedMinute() {\r\n        return this._minute$.asObservable();\r\n    }\r\n    get selectedPeriod() {\r\n        return this._period$.asObservable();\r\n    }\r\n    getFullTime(format) {\r\n        const selectedHour = this._hour$.getValue().time;\r\n        const selectedMinute = this._minute$.getValue().time;\r\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\r\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\r\n        const period = format === 12 ? this._period$.getValue() : \"\";\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n        return NgxMatTimepickerAdapter.formatTime(time, { format });\r\n    }\r\n    setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (NgxMatTimepickerAdapter.isTimeAvailable(time, min, max, \"minutes\", minutesGap)) {\r\n                this._setDefaultTime(time, format);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    _resetTime() {\r\n        this.hour = { ...DEFAULT_HOUR };\r\n        this.minute = { ...DEFAULT_MINUTE };\r\n        this.period = NgxMatTimepickerPeriods.AM;\r\n    }\r\n    _setDefaultTime(time, format) {\r\n        const defaultDto = NgxMatTimepickerAdapter.parseTime(time, { format });\r\n        if (defaultDto.isValid) {\r\n            const period = time.substring(time.length - 2).toUpperCase();\r\n            const hour = defaultDto.hour;\r\n            this.hour = { ...DEFAULT_HOUR, time: formatHourByPeriod(hour, period) };\r\n            this.minute = { ...DEFAULT_MINUTE, time: defaultDto.minute };\r\n            this.period = period;\r\n        }\r\n        else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxMatTimepickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\"\r\n                }]\r\n        }] });\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour, period) {\r\n    switch (period) {\r\n        case NgxMatTimepickerPeriods.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case NgxMatTimepickerPeriods.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\n\nclass NgxMatTimepickerEventService {\r\n    constructor() {\r\n        this._backdropClick$ = new Subject();\r\n        this._keydownEvent$ = new Subject();\r\n    }\r\n    get backdropClick() {\r\n        return this._backdropClick$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n    }\r\n    get keydownEvent() {\r\n        return this._keydownEvent$.asObservable().pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n    }\r\n    dispatchEvent(event) {\r\n        switch (event.type) {\r\n            case \"click\":\r\n                this._backdropClick$.next(event);\r\n                break;\r\n            case \"keydown\":\r\n                this._keydownEvent$.next(event);\r\n                break;\r\n            default:\r\n                throw new Error(\"no such event type\");\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerEventService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxMatTimepickerEventService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerEventService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\"\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\n\nconst NGX_MAT_TIMEPICKER_LOCALE = new InjectionToken(\"TimeLocale\", {\r\n    providedIn: \"root\",\r\n    factory: () => NgxMatTimepickerAdapter.defaultLocale\r\n});\n\nclass NgxMatTimepickerLocaleService {\r\n    constructor(initialLocale) {\r\n        this._locale = initialLocale;\r\n    }\r\n    get locale() {\r\n        return this._locale;\r\n    }\r\n    updateLocale(newValue) {\r\n        this._locale = newValue || this._initialLocale;\r\n    }\r\n}\r\nNgxMatTimepickerLocaleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, deps: [{ token: NGX_MAT_TIMEPICKER_LOCALE }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgxMatTimepickerLocaleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, providedIn: \"root\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerLocaleService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: \"root\"\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_MAT_TIMEPICKER_LOCALE]\r\n                }] }]; } });\n\nclass NgxMatTimepickerBaseDirective {\r\n    constructor(_timepickerSrv, _eventSrv, _timepickerLocaleSrv, data) {\r\n        this._timepickerSrv = _timepickerSrv;\r\n        this._eventSrv = _eventSrv;\r\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\r\n        this.data = data;\r\n        this.activeTimeUnit = NgxMatTimepickerUnits.HOUR;\r\n        this.timeUnit = NgxMatTimepickerUnits;\r\n        this._color = \"primary\";\r\n        this._subsCtrl$ = new Subject();\r\n        this.color = data.color;\r\n        this.defaultTime = data.defaultTime;\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    get defaultTime() {\r\n        return this._defaultTime;\r\n    }\r\n    set defaultTime(time) {\r\n        this._defaultTime = time;\r\n        this._setDefaultTime(time);\r\n    }\r\n    get _locale() {\r\n        return this._timepickerLocaleSrv.locale;\r\n    }\r\n    changePeriod(period) {\r\n        this._timepickerSrv.period = period;\r\n        this._onTimeChange();\r\n    }\r\n    changeTimeUnit(unit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n    close() {\r\n        this.data.timepickerBaseRef.close();\r\n    }\r\n    ngOnDestroy() {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n    ngOnInit() {\r\n        this._defineTime();\r\n        this.selectedHour = this._timepickerSrv.selectedHour\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.selectedMinute = this._timepickerSrv.selectedMinute\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.selectedPeriod = this._timepickerSrv.selectedPeriod\r\n            .pipe(shareReplay({ bufferSize: 1, refCount: true }));\r\n        this.data.timepickerBaseRef.timeUpdated.pipe(takeUntil(this._subsCtrl$))\r\n            .subscribe(this._setDefaultTime.bind(this));\r\n    }\r\n    onHourChange(hour) {\r\n        this._timepickerSrv.hour = hour;\r\n        this._onTimeChange();\r\n    }\r\n    onHourSelected(hour) {\r\n        if (!this.data.hoursOnly) {\r\n            this.changeTimeUnit(NgxMatTimepickerUnits.MINUTE);\r\n        }\r\n        this.data.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n    onKeydown(e) {\r\n        this._eventSrv.dispatchEvent(e);\r\n        e.stopPropagation();\r\n    }\r\n    onMinuteChange(minute) {\r\n        this._timepickerSrv.minute = minute;\r\n        this._onTimeChange();\r\n    }\r\n    setTime() {\r\n        this.data.timepickerBaseRef.timeSet.emit(this._timepickerSrv.getFullTime(this.data.format));\r\n        this.close();\r\n    }\r\n    _defineTime() {\r\n        const minTime = this.data.minTime;\r\n        if (minTime && (!this.data.time && !this.data.defaultTime)) {\r\n            const time = NgxMatTimepickerAdapter.fromDateTimeToString(minTime, this.data.format);\r\n            this._setDefaultTime(time);\r\n        }\r\n    }\r\n    _onTimeChange() {\r\n        const time = NgxMatTimepickerAdapter.toLocaleTimeString(this._timepickerSrv.getFullTime(this.data.format), {\r\n            locale: this._locale,\r\n            format: this.data.format\r\n        });\r\n        this.data.timepickerBaseRef.timeChanged.emit(time);\r\n    }\r\n    _setDefaultTime(time) {\r\n        this._timepickerSrv.setDefaultTimeIfAvailable(time, this.data.minTime, this.data.maxTime, this.data.format, this.data.minutesGap);\r\n    }\r\n}\r\nNgxMatTimepickerBaseDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerBaseDirective, deps: [{ token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }, { token: NGX_MAT_TIMEPICKER_CONFIG }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMatTimepickerBaseDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerBaseDirective, selector: \"[ngxMatTimepickerBase]\", inputs: { color: \"color\", defaultTime: \"defaultTime\" }, host: { listeners: { \"keydown\": \"onKeydown($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerBaseDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"[ngxMatTimepickerBase]\"\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_MAT_TIMEPICKER_CONFIG]\r\n                }] }]; }, propDecorators: { color: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], onKeydown: [{\r\n                type: HostListener,\r\n                args: [\"keydown\", [\"$event\"]]\r\n            }] } });\n\n// @dynamic\r\nclass NgxMatTimepickerUtils {\r\n    static disableHours(hours, config) {\r\n        if (config.min || config.max) {\r\n            return hours.map(value => {\r\n                const hour = NgxMatTimepickerAdapter.isTwentyFour(config.format)\r\n                    ? value.time\r\n                    : NgxMatTimepickerAdapter.formatHour(value.time, config.format, config.period);\r\n                const currentTime = DateTime.fromObject({ hour }).toFormat(NgxMatTimepickerFormat.TWELVE);\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime, config.min, config.max, \"hours\")\r\n                };\r\n            });\r\n        }\r\n        return hours;\r\n    }\r\n    static disableMinutes(minutes, selectedHour, config) {\r\n        if (config.min || config.max) {\r\n            const hour = NgxMatTimepickerAdapter.formatHour(selectedHour, config.format, config.period);\r\n            let currentTime = DateTime.fromObject({\r\n                hour,\r\n                minute: 0\r\n            });\r\n            return minutes.map(value => {\r\n                currentTime = currentTime.set({ minute: value.time });\r\n                return {\r\n                    ...value,\r\n                    disabled: !NgxMatTimepickerAdapter.isTimeAvailable(currentTime.toFormat(NgxMatTimepickerFormat.TWELVE), config.min, config.max, \"minutes\")\r\n                };\r\n            });\r\n        }\r\n        return minutes;\r\n    }\r\n    static getHours(format) {\r\n        return Array(format).fill(1).map((v, i) => {\r\n            const angleStep = 30;\r\n            const time = v + i;\r\n            const angle = angleStep * time;\r\n            return { time: time === 24 ? 0 : time, angle };\r\n        });\r\n    }\r\n    static getMinutes(gap = 1) {\r\n        const minutesCount = 60;\r\n        const angleStep = 360 / minutesCount;\r\n        const minutes = [];\r\n        for (let i = 0; i < minutesCount; i++) {\r\n            const angle = angleStep * i;\r\n            if (i % gap === 0) {\r\n                minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });\r\n            }\r\n        }\r\n        return minutes;\r\n    }\r\n    static isDigit(e) {\r\n        // Allow: backspace, delete, tab, escape, enter\r\n        if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n            // Allow: Ctrl/cmd+A\r\n            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+C\r\n            (e.keyCode === 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: Ctrl/cmd+X\r\n            (e.keyCode === 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n            // Allow: home, end, left, right, up, down\r\n            (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n            return true;\r\n        }\r\n        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n    }\r\n}\n\nvar NgxMatTimepickerMeasure;\r\n(function (NgxMatTimepickerMeasure) {\r\n    NgxMatTimepickerMeasure[\"hour\"] = \"hour\";\r\n    NgxMatTimepickerMeasure[\"minute\"] = \"minute\";\r\n})(NgxMatTimepickerMeasure || (NgxMatTimepickerMeasure = {}));\n\nclass NgxMatTimepickerParserPipe {\r\n    constructor(_timepickerLocaleSrv) {\r\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\r\n        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;\r\n    }\r\n    get _locale() {\r\n        return this._timepickerLocaleSrv.locale;\r\n    }\r\n    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n        if (!isNaN(+time)) {\r\n            return `${time}`;\r\n        }\r\n        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {\r\n            return this._parseTime(time, \"mm\", NgxMatTimepickerMeasure.minute).toString();\r\n        }\r\n        return this._parseTime(time, \"HH\", NgxMatTimepickerMeasure.hour).toString();\r\n    }\r\n    _parseTime(time, format, timeMeasure) {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n}\r\nNgxMatTimepickerParserPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerParserPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, name: \"ngxMatTimepickerParser\" });\r\nNgxMatTimepickerParserPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerParserPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: \"ngxMatTimepickerParser\"\r\n                }]\r\n        }, {\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerLocaleService }]; } });\n\nclass NgxMatTimepickerAutofocusDirective {\r\n    constructor(_element, document) {\r\n        this._element = _element;\r\n        this.document = document;\r\n        this._activeElement = this.document.activeElement;\r\n    }\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this._element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this._activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\nNgxMatTimepickerAutofocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerAutofocusDirective, deps: [{ token: i0.ElementRef }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMatTimepickerAutofocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerAutofocusDirective, selector: \"[ngxMatTimepickerAutofocus]\", inputs: { isFocusActive: [\"ngxMatTimepickerAutofocus\", \"isFocusActive\"] }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerAutofocusDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"[ngxMatTimepickerAutofocus]\"\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { isFocusActive: [{\r\n                type: Input,\r\n                args: [\"ngxMatTimepickerAutofocus\"]\r\n            }] } });\n\nclass NgxMatTimepickerTimeLocalizerPipe {\r\n    constructor(_timepickerLocaleSrv) {\r\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\r\n    }\r\n    get _locale() {\r\n        return this._timepickerLocaleSrv.locale;\r\n    }\r\n    transform(time, timeUnit, isKeyboardEnabled = false) {\r\n        if (time == null || time === \"\") {\r\n            return \"\";\r\n        }\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR: {\r\n                const format = (time === 0 || isKeyboardEnabled) ? \"HH\" : \"H\";\r\n                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);\r\n            }\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return this._formatTime(NgxMatTimepickerMeasure.minute, time, \"mm\");\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n    _formatTime(timeMeasure, time, format) {\r\n        try {\r\n            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this._locale).toFormat(format);\r\n        }\r\n        catch {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerTimeLocalizerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerTimeLocalizerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: \"timeLocalizer\"\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerLocaleService }]; } });\n\nfunction retainSelection() {\r\n    this.selectionStart = this.selectionEnd;\r\n}\r\nclass NgxMatTimepickerDialControlComponent {\r\n    constructor(_elRef, _timeParserPipe) {\r\n        this._elRef = _elRef;\r\n        this._timeParserPipe = _timeParserPipe;\r\n        this.focused = new EventEmitter();\r\n        this.timeChanged = new EventEmitter();\r\n        this.timeUnitChanged = new EventEmitter();\r\n        this.unfocused = new EventEmitter();\r\n    }\r\n    get _selectedTime() {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n        return undefined;\r\n    }\r\n    changeTimeByKeyboard(e) {\r\n        const char = String.fromCharCode(e.keyCode);\r\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this._elRef.nativeElement.querySelector(\"input\").addEventListener(\"select\", retainSelection, false);\r\n    }\r\n    ngOnDestroy() {\r\n        this._elRef.nativeElement.querySelector(\"input\").removeEventListener(\"select\", retainSelection);\r\n    }\r\n    onKeydown(e) {\r\n        if (!NgxMatTimepickerUtils.isDigit(e)) {\r\n            e.preventDefault();\r\n        }\r\n        else {\r\n            this._changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n    onModelChange(value) {\r\n        this.time = this._timeParserPipe.transform(value, this.timeUnit);\r\n    }\r\n    saveTimeAndChangeTimeUnit(event, unit) {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n    updateTime() {\r\n        if (this._selectedTime) {\r\n            this.timeChanged.next(this._selectedTime);\r\n            this.previousTime = this._selectedTime.time;\r\n        }\r\n    }\r\n    _addTime(amount) {\r\n        return `0${+this.time + amount}`.substr(-2);\r\n    }\r\n    _changeTimeByArrow(keyCode) {\r\n        let time;\r\n        // arrow up\r\n        if (keyCode === 38) {\r\n            time = this._addTime(this.minutesGap || 1);\r\n        }\r\n        // arrow down\r\n        else if (keyCode === 40) {\r\n            time = this._addTime(-1 * (this.minutesGap || 1));\r\n        }\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerDialControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialControlComponent, deps: [{ token: i0.ElementRef }, { token: NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerDialControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerDialControlComponent, selector: \"ngx-mat-timepicker-dial-control\", inputs: { disabled: \"disabled\", isActive: \"isActive\", isEditable: \"isEditable\", minutesGap: \"minutesGap\", time: \"time\", timeList: \"timeList\", timeUnit: \"timeUnit\" }, outputs: { focused: \"focused\", timeChanged: \"timeChanged\", timeUnitChanged: \"timeUnitChanged\", unfocused: \"unfocused\" }, providers: [NgxMatTimepickerParserPipe], ngImport: i0, template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"directive\", type: NgxMatTimepickerAutofocusDirective, selector: \"[ngxMatTimepickerAutofocus]\", inputs: [\"ngxMatTimepickerAutofocus\"] }, { kind: \"pipe\", type: NgxMatTimepickerParserPipe, name: \"ngxMatTimepickerParser\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialControlComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-dial-control\", providers: [NgxMatTimepickerParserPipe], template: \"<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\r\\n       [ngClass]=\\\"{'active': isActive}\\\"\\r\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit: true\\\"\\r\\n       (ngModelChange)=\\\"time = $event\\\"\\r\\n       [disabled]=\\\"disabled\\\"\\r\\n       (input)=\\\"updateTime()\\\"\\r\\n       (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n       readonly\\r\\n       [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\r\\n\\r\\n<ng-template #editableTemplate>\\r\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\r\\n           [ngClass]=\\\"{'active': isActive}\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (input)=\\\"updateTime()\\\"\\r\\n           (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\r\\n           [ngxMatTimepickerAutofocus]=\\\"isActive\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NgxMatTimepickerParserPipe }]; }, propDecorators: { disabled: [{\r\n                type: Input\r\n            }], focused: [{\r\n                type: Output\r\n            }], isActive: [{\r\n                type: Input\r\n            }], isEditable: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], time: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }], timeList: [{\r\n                type: Input\r\n            }], timeUnit: [{\r\n                type: Input\r\n            }], timeUnitChanged: [{\r\n                type: Output\r\n            }], unfocused: [{\r\n                type: Output\r\n            }] } });\r\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\r\n    const isNumber = /\\d/.test(nextTime);\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n    return undefined;\r\n}\r\nfunction isTimeUnavailable(time, timeList) {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\n\nclass NgxMatTimepickerPeriodComponent {\r\n    constructor(_overlay) {\r\n        this._overlay = _overlay;\r\n        this.isPeriodAvailable = true;\r\n        this.overlayScrollStrategy = this._overlay.scrollStrategies.reposition();\r\n        this.periodChanged = new EventEmitter();\r\n        this.timePeriod = NgxMatTimepickerPeriods;\r\n    }\r\n    animationDone() {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n    changePeriod(period) {\r\n        this.isPeriodAvailable = this._isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n    _getDisabledTimeByPeriod(period) {\r\n        switch (this.activeTimeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return NgxMatTimepickerUtils.disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return NgxMatTimepickerUtils.disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error(\"no such NgxMatTimepickerUnits\");\r\n        }\r\n    }\r\n    _isSwitchPeriodAvailable(period) {\r\n        const time = this._getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n}\r\nNgxMatTimepickerPeriodComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerPeriodComponent, deps: [{ token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerPeriodComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerPeriodComponent, selector: \"ngx-mat-timepicker-period\", inputs: { activeTimeUnit: \"activeTimeUnit\", format: \"format\", hours: \"hours\", maxTime: \"maxTime\", meridiems: \"meridiems\", minTime: \"minTime\", minutes: \"minutes\", selectedHour: \"selectedHour\", selectedPeriod: \"selectedPeriod\" }, outputs: { periodChanged: \"periodChanged\" }, ngImport: i0, template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1$1.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i1$1.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [\r\n        trigger(\"scaleInOut\", [\r\n            transition(\":enter\", [\r\n                style({ transform: \"scale(0)\" }),\r\n                animate(\".2s\", style({ transform: \"scale(1)\" })),\r\n                sequence([\r\n                    animate(\"3s\", style({ opacity: 1 })),\r\n                    animate(\".3s\", style({ opacity: 0 }))\r\n                ])\r\n            ])\r\n        ])\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerPeriodComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-period\", animations: [\r\n                        trigger(\"scaleInOut\", [\r\n                            transition(\":enter\", [\r\n                                style({ transform: \"scale(0)\" }),\r\n                                animate(\".2s\", style({ transform: \"scale(1)\" })),\r\n                                sequence([\r\n                                    animate(\"3s\", style({ opacity: 1 })),\r\n                                    animate(\".3s\", style({ opacity: 0 }))\r\n                                ])\r\n                            ])\r\n                        ])\r\n                    ], template: \"<div class=\\\"timepicker-period\\\"\\r\\n\\t cdkOverlayOrigin\\r\\n     #eventPanelOrigin=\\\"cdkOverlayOrigin\\\">\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.AM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.AM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[0]}}</button>\\r\\n\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\r\\n\\t\\t\\t[ngClass]=\\\"{'active': selectedPeriod === timePeriod.PM}\\\"\\r\\n\\t\\t\\t(click)=\\\"changePeriod(timePeriod.PM)\\\"\\r\\n\\t\\t\\ttype=\\\"button\\\">{{meridiems[1]}}</button>\\r\\n</div>\\r\\n<ng-template\\r\\n\\t\\tcdkConnectedOverlay\\r\\n\\t\\tcdkConnectedOverlayPanelClass=\\\"todo-remove-pointer-events-if-necessary\\\"\\r\\n\\t\\t[cdkConnectedOverlayScrollStrategy]=\\\"overlayScrollStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayPositionStrategy]=\\\"overlayPositionStrategy\\\"\\r\\n\\t\\t[cdkConnectedOverlayOrigin]=\\\"eventPanelOrigin\\\"\\r\\n\\t\\t[cdkConnectedOverlayOpen]=\\\"!isPeriodAvailable\\\">\\r\\n\\t<div class=\\\"timepicker-period__warning\\\"\\r\\n\\t\\t *ngIf=\\\"!isPeriodAvailable\\\"\\r\\n\\t\\t [@scaleInOut]\\r\\n\\t\\t (@scaleInOut.done)=\\\"animationDone()\\\">\\r\\n\\t\\t<p>Current time would be invalid in this period.</p>\\r\\n\\t</div>\\r\\n</ng-template>\\r\\n\", styles: [\".timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{opacity:.5;padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;user-select:none;outline:none;border-radius:3px;transition:background-color .5s;color:inherit}.timepicker-period__btn.active{opacity:1}.timepicker-period__btn:focus{background-color:#00000012}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:#0000008c;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-weight:700;color:#fff}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }]; }, propDecorators: { activeTimeUnit: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], hours: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], meridiems: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], minutes: [{\r\n                type: Input\r\n            }], periodChanged: [{\r\n                type: Output\r\n            }], selectedHour: [{\r\n                type: Input\r\n            }], selectedPeriod: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepickerDialComponent {\r\n    constructor(_localeSrv) {\r\n        this._localeSrv = _localeSrv;\r\n        this.hourChanged = new EventEmitter();\r\n        this.meridiems = Info.meridiems({ locale: this._locale });\r\n        this.minuteChanged = new EventEmitter();\r\n        this.periodChanged = new EventEmitter();\r\n        this.timeUnit = NgxMatTimepickerUnits;\r\n        this.timeUnitChanged = new EventEmitter();\r\n        this._color = \"primary\";\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    get hourString() {\r\n        return `${this.hour}`;\r\n    }\r\n    get minuteString() {\r\n        return `${this.minute}`;\r\n    }\r\n    get _locale() {\r\n        return this._localeSrv.locale;\r\n    }\r\n    changeHour(hour) {\r\n        this.hourChanged.next(hour);\r\n    }\r\n    changeMinute(minute) {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n    changePeriod(period) {\r\n        this.periodChanged.next(period);\r\n    }\r\n    changeTimeUnit(unit) {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n    hideHint() {\r\n        this.isHintVisible = false;\r\n    }\r\n    ngOnChanges(changes) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        const periodChanged = changes[\"period\"] && changes[\"period\"].currentValue;\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (periodChanged || changes[\"format\"] && changes[\"format\"].currentValue) {\r\n            const hours = NgxMatTimepickerUtils.getHours(this.format);\r\n            this.hours = NgxMatTimepickerUtils.disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (periodChanged || changes[\"hour\"] && changes[\"hour\"].currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n            this.minutes = NgxMatTimepickerUtils.disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n    showHint() {\r\n        this.isHintVisible = true;\r\n    }\r\n}\r\nNgxMatTimepickerDialComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialComponent, deps: [{ token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerDialComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerDialComponent, selector: \"ngx-mat-timepicker-dial\", inputs: { activeTimeUnit: \"activeTimeUnit\", color: \"color\", editableHintTmpl: \"editableHintTmpl\", format: \"format\", hour: \"hour\", hoursOnly: \"hoursOnly\", isEditable: \"isEditable\", maxTime: \"maxTime\", minTime: \"minTime\", minute: \"minute\", minutesGap: \"minutesGap\", period: \"period\" }, outputs: { hourChanged: \"hourChanged\", minuteChanged: \"minuteChanged\", periodChanged: \"periodChanged\", timeUnitChanged: \"timeUnitChanged\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: NgxMatTimepickerDialControlComponent, selector: \"ngx-mat-timepicker-dial-control\", inputs: [\"disabled\", \"isActive\", \"isEditable\", \"minutesGap\", \"time\", \"timeList\", \"timeUnit\"], outputs: [\"focused\", \"timeChanged\", \"timeUnitChanged\", \"unfocused\"] }, { kind: \"component\", type: NgxMatTimepickerPeriodComponent, selector: \"ngx-mat-timepicker-period\", inputs: [\"activeTimeUnit\", \"format\", \"hours\", \"maxTime\", \"meridiems\", \"minTime\", \"minutes\", \"selectedHour\", \"selectedPeriod\"], outputs: [\"periodChanged\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-dial\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"timepicker-dial\\\">\\r\\n    <div class=\\\"timepicker-dial__container\\\">\\r\\n        <div class=\\\"timepicker-dial__time\\\">\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"hours\\\"\\r\\n                                         [time]=\\\"hourString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeHour($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n            <span>:</span>\\r\\n            <ngx-mat-timepicker-dial-control [timeList]=\\\"minutes\\\"\\r\\n                                         [time]=\\\"minuteString\\\"\\r\\n                                         [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n                                         [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\r\\n                                         [isEditable]=\\\"isEditable\\\"\\r\\n                                         [minutesGap]=\\\"minutesGap\\\"\\r\\n                                         [disabled]=\\\"hoursOnly\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (timeChanged)=\\\"changeMinute($event)\\\"\\r\\n                                         (focused)=\\\"showHint()\\\"\\r\\n                                         (unfocused)=\\\"hideHint()\\\">\\r\\n\\r\\n            </ngx-mat-timepicker-dial-control>\\r\\n        </div>\\r\\n        <ngx-mat-timepicker-period class=\\\"timepicker-dial__period\\\"\\r\\n                                   *ngIf=\\\"format !== 24\\\"\\r\\n                                   [selectedPeriod]=\\\"period\\\"\\r\\n                                   [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                   [maxTime]=\\\"maxTime\\\"\\r\\n                                   [minTime]=\\\"minTime\\\"\\r\\n                                   [format]=\\\"format\\\"\\r\\n                                   [hours]=\\\"hours\\\"\\r\\n                                   [minutes]=\\\"minutes\\\"\\r\\n                                   [selectedHour]=\\\"hour\\\"\\r\\n                                   [meridiems]=\\\"meridiems\\\"\\r\\n                                   (periodChanged)=\\\"changePeriod($event)\\\"></ngx-mat-timepicker-period>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\"\\r\\n         [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\r\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\r\\n        <ng-template #editableHintDefault>\\r\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\r\\n        </ng-template>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\".timepicker-dial{text-align:center}.timepicker-dial__container{display:flex;align-items:center;justify-content:center;-webkit-tap-highlight-color:rgba(0,0,0,0)}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px}.timepicker-dial__hint span{font-size:14px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerLocaleService }]; }, propDecorators: { activeTimeUnit: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }], editableHintTmpl: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], hour: [{\r\n                type: Input\r\n            }], hourChanged: [{\r\n                type: Output\r\n            }], hoursOnly: [{\r\n                type: Input\r\n            }], isEditable: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], minute: [{\r\n                type: Input\r\n            }], minuteChanged: [{\r\n                type: Output\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], period: [{\r\n                type: Input\r\n            }], periodChanged: [{\r\n                type: Output\r\n            }], timeUnitChanged: [{\r\n                type: Output\r\n            }] } });\n\nclass NgxMatTimepickerActiveHourPipe {\r\n    transform(hour, currentHour, isClockFaceDisabled) {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        return hour === currentHour;\r\n    }\r\n}\r\nNgxMatTimepickerActiveHourPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerActiveHourPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, name: \"activeHour\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveHourPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: \"activeHour\"\r\n                }]\r\n        }] });\n\nclass NgxMatTimepickerActiveMinutePipe {\r\n    transform(minute, currentMinute, gap, isClockFaceDisabled) {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n}\r\nNgxMatTimepickerActiveMinutePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerActiveMinutePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, name: \"activeMinute\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerActiveMinutePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'activeMinute'\r\n                }]\r\n        }] });\n\nclass NgxMatTimepickerMinutesFormatterPipe {\r\n    transform(minute, gap = 5) {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n}\r\nNgxMatTimepickerMinutesFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerMinutesFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, name: \"minutesFormatter\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFormatterPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'minutesFormatter'\r\n                }]\r\n        }] });\n\nfunction roundAngle(angle, step) {\r\n    return Math.round(angle / step) * step;\r\n}\r\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\r\n    if (y > y0 && x >= x0) { // II quarter\r\n        return 180 - currentAngle;\r\n    }\r\n    else if (y > y0 && x < x0) { // III quarter\r\n        return 180 + currentAngle;\r\n    }\r\n    else if (y < y0 && x < x0) { // IV quarter\r\n        return 360 - currentAngle;\r\n    }\r\n    else { // I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: \"75px\",\r\n        top: \"calc(50% - 75px)\"\r\n    },\r\n    large: {\r\n        height: \"103px\",\r\n        top: \"calc(50% - 103px)\"\r\n    }\r\n};\r\nclass NgxMatTimepickerFaceComponent {\r\n    constructor() {\r\n        this.color = \"primary\";\r\n        this.innerClockFaceSize = 85;\r\n        this.timeChange = new EventEmitter();\r\n        this.timeSelected = new EventEmitter();\r\n        this.timeUnit = NgxMatTimepickerUnits;\r\n    }\r\n    ngAfterViewInit() {\r\n        this._setClockHandPosition();\r\n        this._addTouchEvents();\r\n    }\r\n    ngOnChanges(changes) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        const faceTimeChanges = changes[\"faceTime\"];\r\n        // tslint:disable-next-line:no-string-literal\r\n        const selectedTimeChanges = changes[\"selectedTime\"];\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to pass an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this._setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this._selectAvailableTime());\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._removeTouchEvents();\r\n    }\r\n    onMousedown(e) {\r\n        e.preventDefault();\r\n        this._isStarted = true;\r\n    }\r\n    onMouseup(e) {\r\n        e.preventDefault();\r\n        this._isStarted = false;\r\n    }\r\n    selectTime(e) {\r\n        if (!this._isStarted && (e instanceof MouseEvent && e.type !== \"click\")) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = roundAngle(circleAngle, angleStep);\r\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this._isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n    }\r\n    trackByTime(_item_, time) {\r\n        return time.time;\r\n    }\r\n    _addTouchEvents() {\r\n        this._touchStartHandler = this.onMousedown.bind(this);\r\n        this._touchEndHandler = this.onMouseup.bind(this);\r\n        this.clockFace.nativeElement.addEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n    _decreaseClockHand() {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n    _increaseClockHand() {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n    _isInnerClockFace(x0, y0, x, y) {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n    _removeTouchEvents() {\r\n        this.clockFace.nativeElement.removeEventListener(\"touchstart\", this._touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener(\"touchend\", this._touchEndHandler);\r\n    }\r\n    _selectAvailableTime() {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n    _setClockHandPosition() {\r\n        if (NgxMatTimepickerAdapter.isTwentyFour(this.format)) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this._decreaseClockHand();\r\n            }\r\n            else {\r\n                this._increaseClockHand();\r\n            }\r\n        }\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n}\r\nNgxMatTimepickerFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: { color: \"color\", faceTime: \"faceTime\", format: \"format\", minutesGap: \"minutesGap\", selectedTime: \"selectedTime\", unit: \"unit\" }, outputs: { timeChange: \"timeChange\", timeSelected: \"timeSelected\" }, host: { listeners: { \"mousedown\": \"onMousedown($event)\", \"mouseup\": \"onMouseup($event)\", \"click\": \"selectTime($event)\", \"touchmove\": \"selectTime($event.changedTouches[0])\", \"touchend\": \"selectTime($event.changedTouches[0])\", \"mousemove\": \"selectTime($event)\" } }, viewQueries: [{ propertyName: \"clockFace\", first: true, predicate: [\"clockFace\"], descendants: true, static: true }, { propertyName: \"clockHand\", first: true, predicate: [\"clockHand\"], descendants: true, read: ElementRef, static: true }], usesOnChanges: true, ngImport: i0, template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"component\", type: i6.MatMiniFabButton, selector: \"button[mat-mini-fab]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"pipe\", type: i1.SlicePipe, name: \"slice\" }, { kind: \"pipe\", type: NgxMatTimepickerActiveHourPipe, name: \"activeHour\" }, { kind: \"pipe\", type: NgxMatTimepickerActiveMinutePipe, name: \"activeMinute\" }, { kind: \"pipe\", type: NgxMatTimepickerMinutesFormatterPipe, name: \"minutesFormatter\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-face\", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!-- DEFAULT TEMPLATES - START -->\\r\\n<ng-template #hourButton\\r\\n             let-time>\\r\\n    <button mat-mini-fab\\r\\n            disableRipple\\r\\n            class=\\\"mat-elevation-z0\\\"\\r\\n            [color]=\\\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\\\"\\r\\n            [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n            [disabled]=\\\"time.disabled\\\">\\r\\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #minutesFace>\\r\\n    <div class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\r\\n            <button mat-mini-fab\\r\\n                    disableRipple\\r\\n                    class=\\\"mat-elevation-z0\\\"\\r\\n                    [color]=\\\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\\\"\\r\\n                    [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\r\\n                    [disabled]=\\\"time.disabled\\\">\\r\\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\\r\\n<!-- DEFAULT TEMPLATES - END -->\\r\\n<div class=\\\"clock-face\\\"\\r\\n     #clockFace>\\r\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\"\\r\\n         class=\\\"clock-face__container\\\">\\r\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\r\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\r\\n            <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n        </div>\\r\\n        <div class=\\\"clock-face__inner\\\"\\r\\n             *ngIf=\\\"faceTime.length > 12\\\">\\r\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\r\\n                 [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\"\\r\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg)'}\\\"\\r\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\r\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\r\\n                <ng-content *ngTemplateOutlet=\\\"hourButton; context: {$implicit: time}\\\"></ng-content>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <mat-toolbar class=\\\"clock-face__clock-hand\\\"\\r\\n                 [color]=\\\"color\\\"\\r\\n                 [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\r\\n                 #clockHand\\r\\n                 [hidden]=\\\"isClockFaceDisabled\\\">\\r\\n        <button mat-mini-fab\\r\\n                *ngIf=\\\"unit === timeUnit.MINUTE\\\"\\r\\n                [color]=\\\"color\\\">\\r\\n            <span class=\\\"clock-face__clock-hand_minute_dot\\\"></span>\\r\\n        </button>\\r\\n    </mat-toolbar>\\r\\n    <mat-toolbar class=\\\"clock-face__center\\\"\\r\\n                 [color]=\\\"color\\\"></mat-toolbar>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\\n\"] }]\r\n        }], propDecorators: { clockFace: [{\r\n                type: ViewChild,\r\n                args: [\"clockFace\", { static: true }]\r\n            }], clockHand: [{\r\n                type: ViewChild,\r\n                args: [\"clockHand\", { static: true, read: ElementRef }]\r\n            }], color: [{\r\n                type: Input\r\n            }], faceTime: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], selectedTime: [{\r\n                type: Input\r\n            }], timeChange: [{\r\n                type: Output\r\n            }], timeSelected: [{\r\n                type: Output\r\n            }], unit: [{\r\n                type: Input\r\n            }], onMousedown: [{\r\n                type: HostListener,\r\n                args: [\"mousedown\", [\"$event\"]]\r\n            }], onMouseup: [{\r\n                type: HostListener,\r\n                args: [\"mouseup\", [\"$event\"]]\r\n            }], selectTime: [{\r\n                type: HostListener,\r\n                args: [\"click\", [\"$event\"]]\r\n            }, {\r\n                type: HostListener,\r\n                args: [\"touchmove\", [\"$event.changedTouches[0]\"]]\r\n            }, {\r\n                type: HostListener,\r\n                args: [\"touchend\", [\"$event.changedTouches[0]\"]]\r\n            }, {\r\n                type: HostListener,\r\n                args: [\"mousemove\", [\"$event\"]]\r\n            }] } });\n\nclass NgxMatTimepickerMinutesFaceComponent {\r\n    constructor() {\r\n        this.minuteChange = new EventEmitter();\r\n        this.minutesList = [];\r\n        this.timeUnit = NgxMatTimepickerUnits;\r\n        this._color = \"primary\";\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    ngOnChanges(changes) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (changes[\"period\"] && changes[\"period\"].currentValue) {\r\n            const minutes = NgxMatTimepickerUtils.getMinutes(this.minutesGap);\r\n            this.minutesList = NgxMatTimepickerUtils.disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerMinutesFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerMinutesFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerMinutesFaceComponent, selector: \"ngx-mat-timepicker-minutes-face\", inputs: { color: \"color\", format: \"format\", maxTime: \"maxTime\", minTime: \"minTime\", minutesGap: \"minutesGap\", period: \"period\", selectedHour: \"selectedHour\", selectedMinute: \"selectedMinute\" }, outputs: { minuteChange: \"minuteChange\" }, usesOnChanges: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerMinutesFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-minutes-face\", template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [faceTime]=\\\"minutesList\\\"\\r\\n                     [selectedTime]=\\\"selectedMinute\\\"\\r\\n                     [minutesGap]=\\\"minutesGap\\\"\\r\\n                     (timeChange)=\\\"minuteChange.next($event)\\\"\\r\\n                     [unit]=\\\"timeUnit.MINUTE\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { color: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], minuteChange: [{\r\n                type: Output\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], period: [{\r\n                type: Input\r\n            }], selectedHour: [{\r\n                type: Input\r\n            }], selectedMinute: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepickerHoursFaceDirective {\r\n    constructor() {\r\n        this.hourChange = new EventEmitter();\r\n        this.hourSelected = new EventEmitter();\r\n        this.hoursList = [];\r\n        this._color = \"primary\";\r\n        this._format = 24;\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set format(newValue) {\r\n        this._format = newValue;\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    onTimeSelected(time) {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\nNgxMatTimepickerHoursFaceDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMatTimepickerHoursFaceDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerHoursFaceDirective, selector: \"[ngxMatTimepickerHoursFace]\", inputs: { color: \"color\", format: \"format\", maxTime: \"maxTime\", minTime: \"minTime\", selectedHour: \"selectedHour\" }, outputs: { hourChange: \"hourChange\", hourSelected: \"hourSelected\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"[ngxMatTimepickerHoursFace]\"\r\n                }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { color: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], hourChange: [{\r\n                type: Output\r\n            }], hourSelected: [{\r\n                type: Output\r\n            }], maxTime: [{\r\n                type: Input\r\n            }], minTime: [{\r\n                type: Input\r\n            }], selectedHour: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepicker12HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\r\n    constructor() {\r\n        super();\r\n        this.format = 12;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\nNgxMatTimepicker12HoursFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepicker12HoursFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepicker12HoursFaceComponent, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: { period: \"period\" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepicker12HoursFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-12-hours-face\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { period: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepicker24HoursFaceComponent extends NgxMatTimepickerHoursFaceDirective {\r\n    constructor() {\r\n        super();\r\n        this.format = 24;\r\n    }\r\n    ngAfterContentInit() {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\nNgxMatTimepicker24HoursFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepicker24HoursFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepicker24HoursFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepicker24HoursFaceComponent, selector: \"ngx-mat-timepicker-24-hours-face\", usesInheritance: true, ngImport: i0, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\", dependencies: [{ kind: \"component\", type: NgxMatTimepickerFaceComponent, selector: \"ngx-mat-timepicker-face\", inputs: [\"color\", \"faceTime\", \"format\", \"minutesGap\", \"selectedTime\", \"unit\"], outputs: [\"timeChange\", \"timeSelected\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepicker24HoursFaceComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-24-hours-face\", changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ngx-mat-timepicker-face [color]=\\\"color\\\"\\r\\n                     [selectedTime]=\\\"selectedHour\\\"\\r\\n                     [faceTime]=\\\"hoursList\\\"\\r\\n                     [format]=\\\"format\\\"\\r\\n                     (timeChange)=\\\"hourChange.next($event)\\\"\\r\\n                     (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-mat-timepicker-face>\\r\\n\" }]\r\n        }], ctorParameters: function () { return []; } });\n\nclass NgxMatTimepickerContentComponent {\r\n}\r\nNgxMatTimepickerContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerContentComponent, selector: \"ngx-mat-timepicker-content\", inputs: { appendToInput: \"appendToInput\", inputElement: \"inputElement\" }, ngImport: i0, template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\", dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerContentComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-content\", template: \"<div *ngIf=\\\"appendToInput;else timepickerModal\\\">\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</div>\\r\\n<ng-template #timepickerModal>\\r\\n\\t<ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\r\\n</ng-template>\\r\\n<ng-template #timepickerOutlet>\\r\\n\\t<ng-content></ng-content>\\r\\n</ng-template>\\r\\n\" }]\r\n        }], propDecorators: { appendToInput: [{\r\n                type: Input\r\n            }], inputElement: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepickerDialogComponent extends NgxMatTimepickerBaseDirective {\r\n    constructor(data, _dialogRef, timepickerSrv, eventSrv, timepickerLocaleSrv) {\r\n        super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\r\n        this.data = data;\r\n        this._dialogRef = _dialogRef;\r\n    }\r\n    close() {\r\n        this._dialogRef.close();\r\n    }\r\n}\r\nNgxMatTimepickerDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialogComponent, deps: [{ token: MAT_DIALOG_DATA }, { token: i1$2.MatDialogRef }, { token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerDialogComponent, selector: \"ngx-mat-timepicker-dialog\", usesInheritance: true, ngImport: i0, template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"component\", type: i6.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: i1$2.MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\" }, { kind: \"directive\", type: i1$2.MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: [\"align\"] }, { kind: \"component\", type: i7.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"component\", type: NgxMatTimepickerDialComponent, selector: \"ngx-mat-timepicker-dial\", inputs: [\"activeTimeUnit\", \"color\", \"editableHintTmpl\", \"format\", \"hour\", \"hoursOnly\", \"isEditable\", \"maxTime\", \"minTime\", \"minute\", \"minutesGap\", \"period\"], outputs: [\"hourChanged\", \"minuteChanged\", \"periodChanged\", \"timeUnitChanged\"] }, { kind: \"component\", type: NgxMatTimepickerMinutesFaceComponent, selector: \"ngx-mat-timepicker-minutes-face\", inputs: [\"color\", \"format\", \"maxTime\", \"minTime\", \"minutesGap\", \"period\", \"selectedHour\", \"selectedMinute\"], outputs: [\"minuteChange\"] }, { kind: \"component\", type: NgxMatTimepicker12HoursFaceComponent, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: [\"period\"] }, { kind: \"component\", type: NgxMatTimepicker24HoursFaceComponent, selector: \"ngx-mat-timepicker-24-hours-face\" }, { kind: \"component\", type: NgxMatTimepickerContentComponent, selector: \"ngx-mat-timepicker-content\", inputs: [\"appendToInput\", \"inputElement\"] }, { kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDialogComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-dialog\", encapsulation: ViewEncapsulation.None, template: \"<ng-template #cancelBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">CANCEL\\r\\n    </button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n    <button mat-button\\r\\n            [color]=\\\"color\\\">OK\\r\\n    </button>\\r\\n</ng-template>\\r\\n<div mat-dialog-content>\\r\\n    <ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n                                [inputElement]=\\\"data.inputElement\\\">\\r\\n        <div class=\\\"timepicker\\\"\\r\\n             [ngClass]=\\\"data.timepickerClass\\\">\\r\\n            <mat-toolbar [color]=\\\"color\\\"\\r\\n                         class=\\\"timepicker-header\\\">\\r\\n                <ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n                                         [format]=\\\"data.format\\\"\\r\\n                                         [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                         [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n                                         [period]=\\\"selectedPeriod | async\\\"\\r\\n                                         [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n                                         [minTime]=\\\"data.minTime\\\"\\r\\n                                         [maxTime]=\\\"data.maxTime\\\"\\r\\n                                         [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n                                         [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n                                         [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                         [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n                                         (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n                                         (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n                                         (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n                                         (minuteChanged)=\\\"onMinuteChange($event)\\\"\\r\\n                ></ngx-mat-timepicker-dial>\\r\\n            </mat-toolbar>\\r\\n            <div class=\\\"timepicker__main-content\\\">\\r\\n                <div class=\\\"timepicker__body\\\"\\r\\n                     [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n                        <ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n                                                          [color]=\\\"color\\\"\\r\\n                                                          (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                                          [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                                          [minTime]=\\\"data.minTime\\\"\\r\\n                                                          [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                          [format]=\\\"data.format\\\"\\r\\n                                                          (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n                        <ng-template #ampmHours>\\r\\n                            <ngx-mat-timepicker-12-hours-face\\r\\n                                    [color]=\\\"color\\\"\\r\\n                                    (hourChange)=\\\"onHourChange($event)\\\"\\r\\n                                    [selectedHour]=\\\"selectedHour | async\\\"\\r\\n                                    [period]=\\\"selectedPeriod | async\\\"\\r\\n                                    [minTime]=\\\"data.minTime\\\"\\r\\n                                    [maxTime]=\\\"data.maxTime\\\"\\r\\n                                    (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n                        </ng-template>\\r\\n                    </div>\\r\\n                    <ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n                                                     [color]=\\\"color\\\"\\r\\n                                                     [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n                                                     [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n                                                     [minTime]=\\\"data.minTime\\\"\\r\\n                                                     [maxTime]=\\\"data.maxTime\\\"\\r\\n                                                     [format]=\\\"data.format\\\"\\r\\n                                                     [period]=\\\"selectedPeriod | async\\\"\\r\\n                                                     [minutesGap]=\\\"data.minutesGap\\\"\\r\\n                                                     (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </ngx-mat-timepicker-content>\\r\\n</div>\\r\\n<div mat-dialog-actions>\\r\\n    <div (click)=\\\"close()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n    <div (click)=\\\"setTime()\\\">\\r\\n        <ng-container\\r\\n                *ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n    </div>\\r\\n</div>\\r\\n\", styles: [\"div.ngx-mat-timepicker-dialog>mat-dialog-container{padding-top:0}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content]{padding:0;max-height:85vh}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}div.ngx-mat-timepicker-dialog>mat-dialog-container [mat-dialog-content] .clock-face{margin:16px}div.ngx-mat-timepicker-dialog>mat-dialog-container div[mat-dialog-actions]{justify-content:flex-end;display:flex}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_DIALOG_DATA]\r\n                }] }, { type: i1$2.MatDialogRef }, { type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }]; } });\n\nclass NgxMatTimepickerStandaloneComponent extends NgxMatTimepickerBaseDirective {\r\n    constructor(data, timepickerSrv, eventSrv, timepickerLocaleSrv) {\r\n        super(timepickerSrv, eventSrv, timepickerLocaleSrv, data);\r\n        this.data = data;\r\n    }\r\n    close() {\r\n        this.data.timepickerBaseRef.close();\r\n    }\r\n}\r\nNgxMatTimepickerStandaloneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerStandaloneComponent, deps: [{ token: NGX_MAT_TIMEPICKER_CONFIG }, { token: NgxMatTimepickerService }, { token: NgxMatTimepickerEventService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerStandaloneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerStandaloneComponent, selector: \"ngx-mat-timepicker-standalone\", host: { properties: { \"class.mat-app-background\": \"true\" } }, usesInheritance: true, ngImport: i0, template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus\\r\\n\\t cdkTrapFocusAutoCapture>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i5.CdkTrapFocus, selector: \"[cdkTrapFocus]\", inputs: [\"cdkTrapFocus\", \"cdkTrapFocusAutoCapture\"], exportAs: [\"cdkTrapFocus\"] }, { kind: \"component\", type: i6.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i7.MatToolbar, selector: \"mat-toolbar\", inputs: [\"color\"], exportAs: [\"matToolbar\"] }, { kind: \"component\", type: NgxMatTimepickerDialComponent, selector: \"ngx-mat-timepicker-dial\", inputs: [\"activeTimeUnit\", \"color\", \"editableHintTmpl\", \"format\", \"hour\", \"hoursOnly\", \"isEditable\", \"maxTime\", \"minTime\", \"minute\", \"minutesGap\", \"period\"], outputs: [\"hourChanged\", \"minuteChanged\", \"periodChanged\", \"timeUnitChanged\"] }, { kind: \"component\", type: NgxMatTimepickerMinutesFaceComponent, selector: \"ngx-mat-timepicker-minutes-face\", inputs: [\"color\", \"format\", \"maxTime\", \"minTime\", \"minutesGap\", \"period\", \"selectedHour\", \"selectedMinute\"], outputs: [\"minuteChange\"] }, { kind: \"component\", type: NgxMatTimepicker12HoursFaceComponent, selector: \"ngx-mat-timepicker-12-hours-face\", inputs: [\"period\"] }, { kind: \"component\", type: NgxMatTimepicker24HoursFaceComponent, selector: \"ngx-mat-timepicker-24-hours-face\" }, { kind: \"component\", type: NgxMatTimepickerContentComponent, selector: \"ngx-mat-timepicker-content\", inputs: [\"appendToInput\", \"inputElement\"] }, { kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerStandaloneComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-standalone\", host: {\r\n                        \"[class.mat-app-background]\": \"true\"\r\n                    }, encapsulation: ViewEncapsulation.None, template: \"<ng-template #cancelBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">CANCEL\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<ng-template #confirmBtnDefault>\\r\\n\\t<button mat-button\\r\\n\\t\\t\\t[color]=\\\"color\\\">OK\\r\\n\\t</button>\\r\\n</ng-template>\\r\\n<div cdkTrapFocus\\r\\n\\t cdkTrapFocusAutoCapture>\\r\\n\\t<ngx-mat-timepicker-content [appendToInput]=\\\"data.appendToInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t[inputElement]=\\\"data.inputElement\\\">\\r\\n\\t\\t<div class=\\\"timepicker\\\"\\r\\n\\t\\t\\t [ngClass]=\\\"data.timepickerClass\\\">\\r\\n\\t\\t\\t<mat-toolbar [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t class=\\\"timepicker-header\\\">\\r\\n\\t\\t\\t\\t<ngx-mat-timepicker-dial [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minute]=\\\"(selectedMinute | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [activeTimeUnit]=\\\"activeTimeUnit\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [isEditable]=\\\"data.enableKeyboardInput\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [editableHintTmpl]=\\\"data.editableHintTmpl\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [hoursOnly]=\\\"data.hoursOnly\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (periodChanged)=\\\"changePeriod($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (hourChanged)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChanged)=\\\"onMinuteChange($event)\\\">\\r\\n\\t\\t\\t\\t</ngx-mat-timepicker-dial>\\r\\n\\t\\t\\t</mat-toolbar>\\r\\n\\t\\t\\t<div class=\\\"timepicker__main-content\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"timepicker__body\\\"\\r\\n\\t\\t\\t\\t\\t [ngSwitch]=\\\"activeTimeUnit\\\">\\r\\n\\t\\t\\t\\t\\t<div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-24-hours-face *ngIf=\\\"data.format === 24;else ampmHours\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-24-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t<ng-template #ampmHours>\\r\\n\\t\\t\\t\\t\\t\\t\\t<ngx-mat-timepicker-12-hours-face\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourChange)=\\\"onHourChange($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[selectedHour]=\\\"selectedHour | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t[maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t(hourSelected)=\\\"onHourSelected($event)\\\"></ngx-mat-timepicker-12-hours-face>\\r\\n\\t\\t\\t\\t\\t\\t</ng-template>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<ngx-mat-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [color]=\\\"color\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedMinute]=\\\"selectedMinute | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minTime]=\\\"data.minTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [maxTime]=\\\"data.maxTime\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [format]=\\\"data.format\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [period]=\\\"selectedPeriod | async\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t [minutesGap]=\\\"data.minutesGap\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-mat-timepicker-minutes-face>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</ngx-mat-timepicker-content>\\r\\n\\r\\n\\t<div class=\\\"ngx-mat-timepicker-standalone-actions\\\">\\r\\n\\t\\t<div (click)=\\\"close()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.cancelBtnTmpl ? data.cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div (click)=\\\"setTime()\\\">\\r\\n\\t\\t\\t<ng-container\\r\\n\\t\\t\\t\\t\\t*ngTemplateOutlet=\\\"data.confirmBtnTmpl ? data.confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n\", styles: [\"ngx-mat-timepicker-standalone{display:block;border-radius:4px;box-shadow:0 0 5px 2px #00000040;overflow:hidden}ngx-mat-timepicker-standalone ngx-mat-timepicker-content{display:block}ngx-mat-timepicker-standalone ngx-mat-timepicker-content mat-toolbar.timepicker-header{display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-standalone ngx-mat-timepicker-content .clock-face{margin:16px}ngx-mat-timepicker-standalone .ngx-mat-timepicker-standalone-actions{display:flex;flex-direction:row;justify-content:flex-end;padding:0 16px 16px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [NGX_MAT_TIMEPICKER_CONFIG]\r\n                }] }, { type: NgxMatTimepickerService }, { type: NgxMatTimepickerEventService }, { type: NgxMatTimepickerLocaleService }]; } });\n\nlet config;\r\nclass NgxMatTimepickerComponent {\r\n    constructor(_eventService, _dialog, _overlay) {\r\n        this._eventService = _eventService;\r\n        this._dialog = _dialog;\r\n        this._overlay = _overlay;\r\n        this.closed = new EventEmitter();\r\n        this.hourSelected = new EventEmitter();\r\n        this.hoursOnly = false;\r\n        this.id = `ngx_mat_timepicker_${++NgxMatTimepickerComponent.nextId}`;\r\n        this.isEsc = !0;\r\n        this.opened = new EventEmitter();\r\n        this.overlayPositions = [\r\n            {\r\n                originX: \"center\",\r\n                originY: \"bottom\",\r\n                overlayX: \"center\",\r\n                overlayY: \"top\",\r\n                offsetY: 0\r\n            },\r\n            {\r\n                originX: \"center\",\r\n                originY: \"top\",\r\n                overlayX: \"center\",\r\n                overlayY: \"bottom\",\r\n                offsetY: 0\r\n            }\r\n        ];\r\n        this.showPicker = !1;\r\n        this.timeChanged = new EventEmitter();\r\n        this.timeSet = new EventEmitter();\r\n        this.timeUpdated = new BehaviorSubject(void 0); // used in the dialog, check if a better approach can be used\r\n        this._appendToInput = !1;\r\n        this._color = \"primary\";\r\n        this._format = 12;\r\n    }\r\n    set appendToInput(newValue) {\r\n        this._appendToInput = coerceBooleanProperty(newValue);\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    get disabled() {\r\n        return this._timepickerInput && this._timepickerInput.disabled;\r\n    }\r\n    get format() {\r\n        return this._timepickerInput ? this._timepickerInput.format : this._format;\r\n    }\r\n    set format(value) {\r\n        this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\r\n    }\r\n    get inputElement() {\r\n        return this._timepickerInput && this._timepickerInput.element;\r\n    }\r\n    get maxTime() {\r\n        return this._timepickerInput ? this._timepickerInput.max : this.max;\r\n    }\r\n    get minTime() {\r\n        return this._timepickerInput ? this._timepickerInput.min : this.min;\r\n    }\r\n    get minutesGap() {\r\n        return this._minutesGap;\r\n    }\r\n    set minutesGap(gap) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n    get overlayOrigin() {\r\n        return this._timepickerInput ? this._timepickerInput.cdkOverlayOrigin : void 0;\r\n    }\r\n    get time() {\r\n        return this._timepickerInput && this._timepickerInput.value;\r\n    }\r\n    close() {\r\n        if (this._appendToInput) {\r\n            this._overlayRef && this._overlayRef.dispose();\r\n        }\r\n        else {\r\n            this._dialogRef && this._dialogRef.close();\r\n        }\r\n        this.showPicker = !1;\r\n        this.closed.emit();\r\n    }\r\n    open() {\r\n        // Set data to be injected\r\n        config = {\r\n            timepickerBaseRef: this,\r\n            time: this.time,\r\n            defaultTime: this.defaultTime,\r\n            maxTime: this.maxTime,\r\n            minTime: this.minTime,\r\n            format: this.format,\r\n            minutesGap: this.minutesGap,\r\n            disableAnimation: this.disableAnimation,\r\n            cancelBtnTmpl: this.cancelBtnTmpl,\r\n            confirmBtnTmpl: this.confirmBtnTmpl,\r\n            editableHintTmpl: this.editableHintTmpl,\r\n            disabled: this.disabled,\r\n            enableKeyboardInput: this.enableKeyboardInput,\r\n            preventOverlayClick: this.preventOverlayClick,\r\n            appendToInput: this._appendToInput,\r\n            hoursOnly: this.hoursOnly,\r\n            timepickerClass: this.timepickerClass,\r\n            inputElement: this.inputElement,\r\n            color: this.color\r\n        };\r\n        if (this._appendToInput) {\r\n            this.showPicker = !0;\r\n        }\r\n        else {\r\n            this._dialogRef = this._dialog.open(NgxMatTimepickerDialogComponent, {\r\n                panelClass: \"ngx-mat-timepicker-dialog\",\r\n                data: {\r\n                    ...config\r\n                }\r\n            });\r\n            this._dialogRef\r\n                .afterClosed()\r\n                .subscribe(() => {\r\n                this.closed.emit();\r\n            });\r\n        }\r\n        this.opened.emit();\r\n    }\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input) {\r\n        if (this._timepickerInput) {\r\n            console.warn(\"Input for this timepicker was already set\", input.element);\r\n            throw Error(\"A Timepicker can only be associated with a single input.\");\r\n        }\r\n        this._timepickerInput = input;\r\n    }\r\n    unregisterInput() {\r\n        this._timepickerInput = void 0;\r\n    }\r\n    updateTime(time) {\r\n        this.timeUpdated.next(time);\r\n    }\r\n}\r\nNgxMatTimepickerComponent.nextId = 0;\r\nNgxMatTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerComponent, deps: [{ token: NgxMatTimepickerEventService }, { token: i1$2.MatDialog }, { token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerComponent, selector: \"ngx-mat-timepicker\", inputs: { appendToInput: \"appendToInput\", color: \"color\", format: \"format\", minutesGap: \"minutesGap\", cancelBtnTmpl: \"cancelBtnTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", defaultTime: \"defaultTime\", disableAnimation: \"disableAnimation\", editableHintTmpl: \"editableHintTmpl\", enableKeyboardInput: \"enableKeyboardInput\", hoursOnly: \"hoursOnly\", isEsc: \"isEsc\", max: \"max\", min: \"min\", preventOverlayClick: \"preventOverlayClick\", timepickerClass: \"timepickerClass\" }, outputs: { closed: \"closed\", hourSelected: \"hourSelected\", opened: \"opened\", timeChanged: \"timeChanged\", timeSet: \"timeSet\" }, host: { properties: { \"id\": \"this.id\" } }, providers: [\r\n        {\r\n            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\r\n                return config;\r\n            }\r\n        }\r\n    ], ngImport: i0, template: `\r\n\t\t<ng-template\r\n\t\t\t\tcdkConnectedOverlay\r\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\r\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\r\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n\t\t\t\t(backdropClick)=\"close()\"\r\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\r\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\r\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\r\n\t\t</ng-template>`, isInline: true, dependencies: [{ kind: \"directive\", type: i1$1.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"component\", type: NgxMatTimepickerStandaloneComponent, selector: \"ngx-mat-timepicker-standalone\" }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: \"ngx-mat-timepicker\",\r\n                    template: `\r\n\t\t<ng-template\r\n\t\t\t\tcdkConnectedOverlay\r\n\t\t\t\t[cdkConnectedOverlayPositions]=\"overlayPositions\"\r\n\t\t\t\t[cdkConnectedOverlayHasBackdrop]=\"!0\"\r\n\t\t\t\tcdkConnectedOverlayBackdropClass=\"cdk-overlay-transparent-backdrop\"\r\n\t\t\t\t(backdropClick)=\"close()\"\r\n\t\t\t\t[cdkConnectedOverlayOrigin]=\"overlayOrigin\"\r\n\t\t\t\t[cdkConnectedOverlayOpen]=\"showPicker\">\r\n\t\t\t<ngx-mat-timepicker-standalone></ngx-mat-timepicker-standalone>\r\n\t\t</ng-template>`,\r\n                    providers: [\r\n                        {\r\n                            provide: NGX_MAT_TIMEPICKER_CONFIG, useFactory() {\r\n                                return config;\r\n                            }\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerEventService }, { type: i1$2.MatDialog }, { type: i1$1.Overlay }]; }, propDecorators: { appendToInput: [{\r\n                type: Input\r\n            }], color: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], minutesGap: [{\r\n                type: Input\r\n            }], cancelBtnTmpl: [{\r\n                type: Input\r\n            }], closed: [{\r\n                type: Output\r\n            }], confirmBtnTmpl: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], disableAnimation: [{\r\n                type: Input\r\n            }], editableHintTmpl: [{\r\n                type: Input\r\n            }], enableKeyboardInput: [{\r\n                type: Input\r\n            }], hourSelected: [{\r\n                type: Output\r\n            }], hoursOnly: [{\r\n                type: Input\r\n            }], id: [{\r\n                type: HostBinding,\r\n                args: [\"id\"]\r\n            }], isEsc: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], opened: [{\r\n                type: Output\r\n            }], preventOverlayClick: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }], timepickerClass: [{\r\n                type: Input\r\n            }], timeSet: [{\r\n                type: Output\r\n            }] } });\n\n/* To override a default toggle icon */\r\nclass NgxMatTimepickerToggleIconDirective {\r\n}\r\nNgxMatTimepickerToggleIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMatTimepickerToggleIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerToggleIconDirective, selector: \"[ngxMatTimepickerToggleIcon]\", ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerToggleIconDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{ selector: \"[ngxMatTimepickerToggleIcon]\" }]\r\n        }] });\n\nclass NgxMatTimepickerToggleComponent {\r\n    get disabled() {\r\n        return this._disabled === void 0 ? this.timepicker?.disabled : this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n    }\r\n    open(event) {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerToggleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerToggleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerToggleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerToggleComponent, selector: \"ngx-mat-timepicker-toggle\", inputs: { disabled: \"disabled\", timepicker: [\"for\", \"timepicker\"] }, queries: [{ propertyName: \"customIcon\", first: true, predicate: NgxMatTimepickerToggleIconDirective, descendants: true, static: true }], ngImport: i0, template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\", styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i6.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerToggleComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-toggle\", encapsulation: ViewEncapsulation.None, template: \"<button class=\\\"ngx-mat-timepicker-toggle mat-elevation-z0\\\"\\r\\n        color=\\\"\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"open($event)\\\"\\r\\n        [disabled]=\\\"disabled\\\"\\r\\n        type=\\\"button\\\">\\r\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n         class=\\\"ngx-mat-timepicker-toggle-default-icon\\\"\\r\\n         fill=\\\"currentColor\\\"\\r\\n         viewBox=\\\"0 0 24 24\\\"\\r\\n         width=\\\"24px\\\"\\r\\n         height=\\\"24px\\\"\\r\\n         *ngIf=\\\"!customIcon\\\">\\r\\n        <path d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\" />\\r\\n    </svg>\\r\\n\\r\\n    <ng-content select=\\\"[ngxMatTimepickerToggleIcon]\\\"></ng-content>\\r\\n</button>\\r\\n\", styles: [\"button.ngx-mat-timepicker-toggle{background-color:transparent;text-align:center;-webkit-user-select:none;user-select:none;cursor:pointer;box-shadow:none}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{margin:auto}.mat-form-field .ngx-mat-timepicker-toggle-default-icon,.mat-form-field .ngx-mat-timepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}body .ngx-mat-timepicker-toggle{color:#0000008a}\\n\"] }]\r\n        }], propDecorators: { disabled: [{\r\n                type: Input\r\n            }], customIcon: [{\r\n                type: ContentChild,\r\n                args: [NgxMatTimepickerToggleIconDirective, { static: true }]\r\n            }], timepicker: [{\r\n                type: Input,\r\n                args: [\"for\"]\r\n            }] } });\n\nfunction concatTime(currentTime, nextTime) {\r\n    const isNumber = /\\d/.test(nextTime);\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return +time;\r\n    }\r\n    return undefined;\r\n}\r\nclass NgxMatTimepickerControlComponent {\r\n    constructor(_timeParser) {\r\n        this._timeParser = _timeParser;\r\n        this.id = NgxMatTimepickerControlComponent.nextId++;\r\n        this.timeChanged = new EventEmitter();\r\n        this._color = \"primary\";\r\n        this._floatLabel = \"auto\";\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set floatLabel(newValue) {\r\n        this._floatLabel = newValue;\r\n    }\r\n    get floatLabel() {\r\n        return this._floatLabel;\r\n    }\r\n    changeTime(event) {\r\n        event.stopPropagation();\r\n        const char = event.data;\r\n        const time = concatTime(String(this.time), char);\r\n        this._changeTimeIfValid(time);\r\n    }\r\n    decrease() {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - 1;\r\n            if (previousTime < this.min) {\r\n                previousTime = this.max;\r\n            }\r\n            if (this._isSelectedTimeDisabled(previousTime)) {\r\n                previousTime = this._getAvailableTime(previousTime, this._getPrevAvailableTime.bind(this));\r\n            }\r\n            if (previousTime !== this.time) {\r\n                this.timeChanged.emit(previousTime);\r\n            }\r\n        }\r\n    }\r\n    increase() {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + 1;\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n            if (this._isSelectedTimeDisabled(nextTime)) {\r\n                nextTime = this._getAvailableTime(nextTime, this._getNextAvailableTime.bind(this));\r\n            }\r\n            if (nextTime !== this.time) {\r\n                this.timeChanged.emit(nextTime);\r\n            }\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (changes[\"timeList\"] && this.time != null) {\r\n            if (this._isSelectedTimeDisabled(this.time)) {\r\n                this._setAvailableTime();\r\n            }\r\n        }\r\n    }\r\n    onBlur() {\r\n        this.isFocused = false;\r\n        if (this._previousTime !== this.time) {\r\n            this._changeTimeIfValid(+this.time);\r\n        }\r\n    }\r\n    onFocus() {\r\n        this.isFocused = true;\r\n        this._previousTime = this.time;\r\n    }\r\n    onKeydown(event) {\r\n        event.stopPropagation();\r\n        if (!NgxMatTimepickerUtils.isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n        switch (event.key) {\r\n            case \"ArrowUp\":\r\n                this.increase();\r\n                break;\r\n            case \"ArrowDown\":\r\n                this.decrease();\r\n                break;\r\n        }\r\n        if (this.preventTyping && event.key !== \"Tab\") {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    onModelChange(value) {\r\n        this.time = +this._timeParser.transform(value, this.timeUnit);\r\n    }\r\n    _changeTimeIfValid(value) {\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n            if (this.time > this.max) {\r\n                const timeString = String(value);\r\n                this.time = +timeString[timeString.length - 1];\r\n            }\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n    }\r\n    _getAvailableTime(currentTime, fn) {\r\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\r\n        const availableTime = fn(currentTimeIndex);\r\n        return availableTime != null ? availableTime : this.time;\r\n    }\r\n    _getNextAvailableTime(index) {\r\n        const timeCollection = this.timeList;\r\n        const maxValue = timeCollection.length;\r\n        for (let i = index + 1; i < maxValue; i++) {\r\n            const time = timeCollection[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    _getPrevAvailableTime(index) {\r\n        for (let i = index; i >= 0; i--) {\r\n            const time = this.timeList[i];\r\n            if (!time.disabled) {\r\n                return time.time;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    _isSelectedTimeDisabled(time) {\r\n        return this.timeList.find((faceTime) => faceTime.time === time).disabled;\r\n    }\r\n    _setAvailableTime() {\r\n        this.time = this.timeList.find(t => !t.disabled).time;\r\n        this.timeChanged.emit(this.time);\r\n    }\r\n}\r\nNgxMatTimepickerControlComponent.nextId = 0;\r\nNgxMatTimepickerControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerControlComponent, deps: [{ token: NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerControlComponent, selector: \"ngx-mat-timepicker-time-control\", inputs: { color: \"color\", disabled: \"disabled\", floatLabel: \"floatLabel\", max: \"max\", min: \"min\", placeholder: \"placeholder\", preventTyping: \"preventTyping\", time: \"time\", timeList: \"timeList\", timeUnit: \"timeUnit\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [NgxMatTimepickerParserPipe], usesOnChanges: true, ngImport: i0, template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\", styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.MaxLengthValidator, selector: \"[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]\", inputs: [\"maxlength\"] }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"directive\", type: i4.MatSuffix, selector: \"[matSuffix], [matIconSuffix], [matTextSuffix]\" }, { kind: \"directive\", type: i5$1.MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", inputs: [\"disabled\", \"id\", \"placeholder\", \"name\", \"required\", \"type\", \"errorStateMatcher\", \"aria-describedby\", \"value\", \"readonly\"], exportAs: [\"matInput\"] }, { kind: \"pipe\", type: NgxMatTimepickerParserPipe, name: \"ngxMatTimepickerParser\" }, { kind: \"pipe\", type: NgxMatTimepickerTimeLocalizerPipe, name: \"timeLocalizer\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerControlComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-time-control\", changeDetection: ChangeDetectionStrategy.OnPush, providers: [NgxMatTimepickerParserPipe], template: \"<mat-form-field [color]=\\\"color\\\"\\r\\n                [floatLabel]=\\\"floatLabel\\\"\\r\\n                [ngClass]=\\\"{'active': isFocused}\\\"\\r\\n                class=\\\"ngx-mat-timepicker-control\\\">\\r\\n    <input id=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           name=\\\"ngx_mat_timepicker_field_{{id}}\\\"\\r\\n           matInput\\r\\n           maxlength=\\\"2\\\"\\r\\n           [ngModel]=\\\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\r\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\r\\n           [placeholder]=\\\"placeholder\\\"\\r\\n           [disabled]=\\\"disabled\\\"\\r\\n           (keydown)=\\\"onKeydown($event)\\\"\\r\\n           (beforeinput)=\\\"changeTime($event)\\\"\\r\\n           (focus)=\\\"onFocus()\\\"\\r\\n           (blur)=\\\"onBlur()\\\" />\\r\\n    <div class=\\\"arrows-wrap\\\"\\r\\n         matSuffix>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"increase()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n        <span class=\\\"arrow\\\"\\r\\n              role=\\\"button\\\"\\r\\n              (click)=\\\"decrease()\\\">\\r\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n                 height=\\\"18\\\"\\r\\n                 viewBox=\\\"0 0 24 24\\\"\\r\\n                 width=\\\"18\\\">\\r\\n                <path d=\\\"M0 0h24v24H0V0z\\\"\\r\\n                      fill=\\\"none\\\" />\\r\\n                <path d=\\\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\\\" />\\r\\n            </svg>\\r\\n        </span>\\r\\n    </div>\\r\\n</mat-form-field>\\r\\n\", styles: [\".ngx-mat-timepicker-control{width:60px;min-width:60px}.ngx-mat-timepicker-control .arrows-wrap{position:relative;z-index:1}.ngx-mat-timepicker-control .arrows-wrap>.arrow{text-align:center;opacity:.5;height:15px;cursor:pointer;transition:opacity .2s;-webkit-user-select:none;user-select:none}.ngx-mat-timepicker-control .arrows-wrap>.arrow:hover{opacity:1}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerParserPipe }]; }, propDecorators: { color: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], floatLabel: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], placeholder: [{\r\n                type: Input\r\n            }], preventTyping: [{\r\n                type: Input\r\n            }], time: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }], timeList: [{\r\n                type: Input\r\n            }], timeUnit: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepickerFieldComponent {\r\n    constructor(_timepickerService, _timepickerLocaleSrv) {\r\n        this._timepickerService = _timepickerService;\r\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\r\n        this.maxHour = 12;\r\n        this.minHour = 1;\r\n        this.period = NgxMatTimepickerPeriods.AM;\r\n        this.periods = [\r\n            NgxMatTimepickerPeriods.AM,\r\n            NgxMatTimepickerPeriods.PM\r\n        ];\r\n        this.timeChanged = new EventEmitter();\r\n        this.timeUnit = NgxMatTimepickerUnits;\r\n        this._color = \"primary\";\r\n        this._floatLabel = \"auto\";\r\n        this._format = 12;\r\n        this._isFirstTimeChange = true;\r\n        this._subsCtrl$ = new Subject();\r\n        this._onChange = () => {\r\n        };\r\n    }\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set color(newValue) {\r\n        this._color = newValue;\r\n    }\r\n    get defaultTime() {\r\n        return this._defaultTime;\r\n    }\r\n    set defaultTime(val) {\r\n        this._defaultTime = val;\r\n        this._isDefaultTime = !!val;\r\n    }\r\n    get floatLabel() {\r\n        return this._floatLabel;\r\n    }\r\n    set floatLabel(newValue) {\r\n        this._floatLabel = newValue;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    set format(value) {\r\n        this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n        if (isDynamicallyChanged) {\r\n            this._updateTime(this.timepickerTime);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set max(value) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set min(value) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n    get _locale() {\r\n        return this._timepickerLocaleSrv.locale;\r\n    }\r\n    changeHour(hour) {\r\n        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this._changeTime();\r\n    }\r\n    changeMinute(minute) {\r\n        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this._changeTime();\r\n    }\r\n    changePeriod(event) {\r\n        this._timepickerService.period = event.value;\r\n        this._changeTime();\r\n    }\r\n    ngOnDestroy() {\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n    ngOnInit() {\r\n        this._initTime(this.defaultTime);\r\n        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);\r\n        this.minutesList = NgxMatTimepickerUtils.getMinutes();\r\n        this.isTimeRangeSet = !!(this.min || this.max);\r\n        this.hour$ = this._timepickerService.selectedHour.pipe(tap((clockTime) => this._selectedHour = clockTime.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes()));\r\n        this.minute$ = this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false));\r\n        if (this.format === 12) {\r\n            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((period) => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());\r\n        }\r\n    }\r\n    onTimeSet(time) {\r\n        this._updateTime(time);\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    registerOnTouched(_fn_) {\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    writeValue(val) {\r\n        if (val) {\r\n            this._initTime(val);\r\n        }\r\n        else {\r\n            this._resetTime();\r\n        }\r\n    }\r\n    _changeDefaultTimeValue(clockFaceTime) {\r\n        if (!this._isDefaultTime && this._isFirstTimeChange) {\r\n            return { ...clockFaceTime, time: null };\r\n        }\r\n        return clockFaceTime;\r\n    }\r\n    _changeTime() {\r\n        const time = this._timepickerService.getFullTime(this.format);\r\n        this.timepickerTime = time;\r\n        this._emitLocalTimeChange(time);\r\n    }\r\n    _emitLocalTimeChange(time) {\r\n        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });\r\n        this._onChange(localTime);\r\n        this.timeChanged.emit(localTime);\r\n    }\r\n    _initTime(time) {\r\n        const isDefaultTimeAvailable = NgxMatTimepickerAdapter\r\n            .isTimeAvailable(time, this.min, this.max, \"minutes\", null, this.format);\r\n        if (!isDefaultTimeAvailable) {\r\n            if (this.min) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));\r\n                return;\r\n            }\r\n            if (this.max) {\r\n                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));\r\n                return;\r\n            }\r\n        }\r\n        this._updateTime(time);\r\n    }\r\n    _isPeriodDisabled(period) {\r\n        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: 12,\r\n            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM\r\n        }).every(time => time.disabled);\r\n    }\r\n    _resetTime() {\r\n        this._timepickerService.hour = { angle: 0, time: null };\r\n        this._timepickerService.minute = { angle: 0, time: null };\r\n    }\r\n    _updateAvailableHours() {\r\n        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n    _updateAvailableMinutes() {\r\n        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {\r\n            min: this.min,\r\n            max: this.max,\r\n            format: this.format,\r\n            period: this.period\r\n        });\r\n    }\r\n    _updateAvailableTime() {\r\n        this._updateAvailableHours();\r\n        if (this._selectedHour) {\r\n            this._updateAvailableMinutes();\r\n        }\r\n    }\r\n    _updateTime(time) {\r\n        if (time) {\r\n            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });\r\n            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\r\n            this.timepickerTime = formattedTime;\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerFieldComponent, deps: [{ token: NgxMatTimepickerService }, { token: NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxMatTimepickerFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerFieldComponent, selector: \"ngx-mat-timepicker-field\", inputs: { color: \"color\", defaultTime: \"defaultTime\", floatLabel: \"floatLabel\", format: \"format\", max: \"max\", min: \"min\", cancelBtnTmpl: \"cancelBtnTmpl\", confirmBtnTmpl: \"confirmBtnTmpl\", controlOnly: \"controlOnly\", disabled: \"disabled\", toggleIcon: \"toggleIcon\" }, outputs: { timeChanged: \"timeChanged\" }, providers: [\r\n        NgxMatTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerFieldComponent,\r\n            multi: true\r\n        }\r\n    ], ngImport: i0, template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"(hour$ | async)?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"(minute$ | async)?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\", styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: i6$1.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i7$1.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"component\", type: i8.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: NgxMatTimepickerComponent, selector: \"ngx-mat-timepicker\", inputs: [\"appendToInput\", \"color\", \"format\", \"minutesGap\", \"cancelBtnTmpl\", \"confirmBtnTmpl\", \"defaultTime\", \"disableAnimation\", \"editableHintTmpl\", \"enableKeyboardInput\", \"hoursOnly\", \"isEsc\", \"max\", \"min\", \"preventOverlayClick\", \"timepickerClass\"], outputs: [\"closed\", \"hourSelected\", \"opened\", \"timeChanged\", \"timeSet\"] }, { kind: \"component\", type: NgxMatTimepickerToggleComponent, selector: \"ngx-mat-timepicker-toggle\", inputs: [\"disabled\", \"for\"] }, { kind: \"directive\", type: NgxMatTimepickerToggleIconDirective, selector: \"[ngxMatTimepickerToggleIcon]\" }, { kind: \"component\", type: NgxMatTimepickerControlComponent, selector: \"ngx-mat-timepicker-time-control\", inputs: [\"color\", \"disabled\", \"floatLabel\", \"max\", \"min\", \"placeholder\", \"preventTyping\", \"time\", \"timeList\", \"timeUnit\"], outputs: [\"timeChanged\"] }, { kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerFieldComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: \"ngx-mat-timepicker-field\", providers: [\r\n                        NgxMatTimepickerService,\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: NgxMatTimepickerFieldComponent,\r\n                            multi: true\r\n                        }\r\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"ngx-mat-timepicker\\\"\\r\\n     [ngClass]=\\\"{'ngx-mat-timepicker--disabled': disabled}\\\">\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--first\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'HH'\\\"\\r\\n            [time]=\\\"(hour$ | async)?.time\\\"\\r\\n            [min]=\\\"minHour\\\"\\r\\n            [max]=\\\"maxHour\\\"\\r\\n            [timeUnit]=\\\"timeUnit.HOUR\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"hoursList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeHour($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <span class=\\\"separator-colon ngx-mat-timepicker__control--second\\\">:</span>\\r\\n    <ngx-mat-timepicker-time-control\\r\\n            class=\\\"ngx-mat-timepicker__control--third\\\"\\r\\n            [color]=\\\"color\\\"\\r\\n            [floatLabel]=\\\"floatLabel\\\"\\r\\n            [placeholder]=\\\"'MM'\\\"\\r\\n            [time]=\\\"(minute$ | async)?.time\\\"\\r\\n            [min]=\\\"0\\\"\\r\\n            [max]=\\\"59\\\"\\r\\n            [timeUnit]=\\\"timeUnit.MINUTE\\\"\\r\\n            [disabled]=\\\"disabled\\\"\\r\\n            [timeList]=\\\"minutesList\\\"\\r\\n            [preventTyping]=\\\"isTimeRangeSet\\\"\\r\\n            (timeChanged)=\\\"changeMinute($event)\\\"></ngx-mat-timepicker-time-control>\\r\\n    <mat-form-field class=\\\"period-select ngx-mat-timepicker__control--forth\\\"\\r\\n                    *ngIf=\\\"format !== 24\\\"\\r\\n                    [color]=\\\"color\\\">\\r\\n        <mat-select [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\r\\n                    (selectionChange)=\\\"changePeriod($event)\\\"\\r\\n                    [ngModel]=\\\"period\\\">\\r\\n            <mat-option *ngFor=\\\"let option of periods\\\"\\r\\n                        [value]=\\\"option\\\">{{option}}</mat-option>\\r\\n        </mat-select>\\r\\n    </mat-form-field>\\r\\n    <ngx-mat-timepicker-toggle\\r\\n            class=\\\"ngx-mat-timepicker__toggle\\\"\\r\\n            *ngIf=\\\"!controlOnly\\\"\\r\\n            [for]=\\\"timepicker\\\"\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        <span ngxMatTimepickerToggleIcon>\\r\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\r\\n        </span>\\r\\n    </ngx-mat-timepicker-toggle>\\r\\n</div>\\r\\n<ngx-mat-timepicker\\r\\n        [color]=\\\"color\\\"\\r\\n        [min]=\\\"min\\\"\\r\\n        [max]=\\\"max\\\"\\r\\n        [defaultTime]=\\\"timepickerTime\\\"\\r\\n        [format]=\\\"format\\\"\\r\\n        [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\r\\n        [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\r\\n        (timeSet)=\\\"onTimeSet($event)\\\"\\r\\n        #timepicker></ngx-mat-timepicker>\\r\\n\\r\\n<ng-template #defaultIcon>\\r\\n    <mat-icon>watch_later</mat-icon>\\r\\n</ng-template>\\r\\n\", styles: [\".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: NgxMatTimepickerService }, { type: NgxMatTimepickerLocaleService }]; }, propDecorators: { color: [{\r\n                type: Input\r\n            }], defaultTime: [{\r\n                type: Input\r\n            }], floatLabel: [{\r\n                type: Input\r\n            }], format: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], cancelBtnTmpl: [{\r\n                type: Input\r\n            }], confirmBtnTmpl: [{\r\n                type: Input\r\n            }], controlOnly: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], timeChanged: [{\r\n                type: Output\r\n            }], toggleIcon: [{\r\n                type: Input\r\n            }] } });\n\nclass NgxMatTimepickerDirective {\r\n    constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {\r\n        this._elementRef = _elementRef;\r\n        this._timepickerLocaleSrv = _timepickerLocaleSrv;\r\n        this._matFormField = _matFormField;\r\n        this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);\r\n        this._format = 12;\r\n        this._subsCtrl$ = new Subject();\r\n        this._value = \"\";\r\n        this.onTouched = () => {\r\n        };\r\n        this._onChange = () => {\r\n        };\r\n    }\r\n    get element() {\r\n        return this._elementRef && this._elementRef.nativeElement;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    set format(value) {\r\n        this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this._previousFormat = this._format;\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set max(value) {\r\n        if (typeof value === \"string\") {\r\n            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set min(value) {\r\n        if (typeof value === \"string\") {\r\n            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n    set timepicker(picker) {\r\n        this._registerTimepicker(picker);\r\n    }\r\n    get value() {\r\n        if (!this._value) {\r\n            return \"\";\r\n        }\r\n        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this._locale });\r\n    }\r\n    set value(value) {\r\n        if (!value) {\r\n            this._value = \"\";\r\n            this._updateInputValue();\r\n            return;\r\n        }\r\n        const time = NgxMatTimepickerAdapter.formatTime(value, { locale: this._locale, format: this.format });\r\n        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, \"minutes\", this._timepicker.minutesGap, this._format);\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this._updateInputValue();\r\n            return;\r\n        }\r\n        console.warn(\"Selected time doesn't match min or max value\");\r\n    }\r\n    set _defaultTime(time) {\r\n        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {\r\n            locale: this._locale,\r\n            format: this.format\r\n        });\r\n    }\r\n    get _locale() {\r\n        return this._timepickerLocaleSrv.locale;\r\n    }\r\n    ngOnChanges(changes) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        const vChanges = changes[\"value\"];\r\n        if (vChanges && vChanges.currentValue) {\r\n            this._defaultTime = vChanges.currentValue;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._unregisterTimepicker();\r\n        this._subsCtrl$.next();\r\n        this._subsCtrl$.complete();\r\n    }\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    updateValue(value) {\r\n        this.value = value;\r\n        this._onChange(value);\r\n    }\r\n    writeValue(value) {\r\n        this.value = value;\r\n        if (value) {\r\n            this._defaultTime = value;\r\n        }\r\n    }\r\n    _registerTimepicker(picker) {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this._timepicker.timeSet\r\n                .pipe(takeUntil$1(this._subsCtrl$))\r\n                .subscribe((time) => {\r\n                this.value = time;\r\n                this._onChange(this.value);\r\n                this.onTouched();\r\n                this._defaultTime = this._value;\r\n            });\r\n        }\r\n        else {\r\n            throw new Error(\"NgxMatTimepickerComponent is not defined.\" +\r\n                \" Please make sure you passed the timepicker to ngxMatTimepicker directive\");\r\n        }\r\n    }\r\n    _unregisterTimepicker() {\r\n        if (this._timepicker) {\r\n            this._timepicker.unregisterInput();\r\n        }\r\n    }\r\n    _updateInputValue() {\r\n        this._elementRef.nativeElement.value = this.value;\r\n    }\r\n}\r\nNgxMatTimepickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDirective, deps: [{ token: i0.ElementRef }, { token: NgxMatTimepickerLocaleService }, { token: MatFormField, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxMatTimepickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.1\", type: NgxMatTimepickerDirective, selector: \"[ngxMatTimepicker]\", inputs: { format: \"format\", max: \"max\", min: \"min\", timepicker: [\"ngxMatTimepicker\", \"timepicker\"], value: \"value\", disableClick: \"disableClick\", disabled: \"disabled\" }, host: { listeners: { \"blur\": \"onTouched()\", \"click\": \"onClick($event)\", \"change\": \"updateValue($event)\" }, properties: { \"disabled\": \"disabled\", \"attr.cdkOverlayOrigin\": \"this.cdkOverlayOrigin\" } }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: NgxMatTimepickerDirective,\r\n            multi: true\r\n        }\r\n    ], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: \"[ngxMatTimepicker]\",\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: NgxMatTimepickerDirective,\r\n                            multi: true\r\n                        }\r\n                    ],\r\n                    // tslint:disable-next-line:no-host-metadata-property\r\n                    host: {\r\n                        \"[disabled]\": \"disabled\",\r\n                        \"(blur)\": \"onTouched()\"\r\n                    }\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NgxMatTimepickerLocaleService }, { type: i4.MatFormField, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MatFormField]\r\n                }] }]; }, propDecorators: { format: [{\r\n                type: Input\r\n            }], max: [{\r\n                type: Input\r\n            }], min: [{\r\n                type: Input\r\n            }], timepicker: [{\r\n                type: Input,\r\n                args: [\"ngxMatTimepicker\"]\r\n            }], value: [{\r\n                type: Input\r\n            }], cdkOverlayOrigin: [{\r\n                type: HostBinding,\r\n                args: [\"attr.cdkOverlayOrigin\"]\r\n            }], disableClick: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: [\"click\", [\"$event\"]]\r\n            }], updateValue: [{\r\n                type: HostListener,\r\n                args: [\"change\", [\"$event\"]]\r\n            }] } });\n\nclass NgxMatTimepickerTimeFormatterPipe {\r\n    transform(time, timeUnit) {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case NgxMatTimepickerUnits.HOUR:\r\n                return DateTime.fromObject({ hour: +time }).toFormat(\"HH\");\r\n            case NgxMatTimepickerUnits.MINUTE:\r\n                return DateTime.fromObject({ minute: +time }).toFormat(\"mm\");\r\n            default:\r\n                throw new Error(\"no such time unit\");\r\n        }\r\n    }\r\n}\r\nNgxMatTimepickerTimeFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nNgxMatTimepickerTimeFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, name: \"timeFormatter\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerTimeFormatterPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: \"timeFormatter\"\r\n                }]\r\n        }] });\n\nclass NgxMatTimepickerModule {\r\n    static setLocale(locale) {\r\n        return {\r\n            ngModule: NgxMatTimepickerModule,\r\n            providers: [\r\n                { provide: NGX_MAT_TIMEPICKER_LOCALE, useValue: locale },\r\n                { provide: NGX_MAT_TIMEPICKER_CONFIG, useValue: undefined },\r\n                NgxMatTimepickerLocaleService\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgxMatTimepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxMatTimepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerModule, declarations: [\r\n        // Not really used, but needed to use it as abstract class\r\n        NgxMatTimepickerBaseDirective,\r\n        NgxMatTimepickerHoursFaceDirective,\r\n        //\r\n        NgxMatTimepickerActiveHourPipe,\r\n        NgxMatTimepickerActiveMinutePipe,\r\n        NgxMatTimepickerComponent,\r\n        NgxMatTimepickerDialComponent,\r\n        NgxMatTimepickerDialControlComponent,\r\n        NgxMatTimepickerDialogComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerFaceComponent,\r\n        NgxMatTimepickerMinutesFaceComponent,\r\n        NgxMatTimepickerPeriodComponent,\r\n        NgxMatTimepickerStandaloneComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepicker12HoursFaceComponent,\r\n        NgxMatTimepicker24HoursFaceComponent,\r\n        NgxMatTimepickerToggleIconDirective,\r\n        NgxMatTimepickerAutofocusDirective,\r\n        NgxMatTimepickerMinutesFormatterPipe,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerControlComponent,\r\n        NgxMatTimepickerParserPipe,\r\n        NgxMatTimepickerContentComponent,\r\n        NgxMatTimepickerTimeFormatterPipe,\r\n        NgxMatTimepickerTimeLocalizerPipe], imports: [CommonModule,\r\n        A11yModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatDialogModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        OverlayModule,\r\n        PortalModule], exports: [NgxMatTimepickerComponent,\r\n        NgxMatTimepickerToggleComponent,\r\n        NgxMatTimepickerFieldComponent,\r\n        NgxMatTimepickerDirective,\r\n        NgxMatTimepickerToggleIconDirective] });\r\nNgxMatTimepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerModule, providers: [\r\n        NgxMatTimepickerLocaleService,\r\n        {\r\n            provide: MAT_FAB_DEFAULT_OPTIONS, useValue: { color: \"void\" }\r\n        }\r\n    ], imports: [CommonModule,\r\n        A11yModule,\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatFormFieldModule,\r\n        MatDialogModule,\r\n        MatInputModule,\r\n        MatSelectModule,\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        OverlayModule,\r\n        PortalModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.1\", ngImport: i0, type: NgxMatTimepickerModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        A11yModule,\r\n                        FormsModule,\r\n                        MatButtonModule,\r\n                        MatFormFieldModule,\r\n                        MatDialogModule,\r\n                        MatInputModule,\r\n                        MatSelectModule,\r\n                        MatToolbarModule,\r\n                        MatIconModule,\r\n                        OverlayModule,\r\n                        PortalModule\r\n                    ],\r\n                    exports: [\r\n                        NgxMatTimepickerComponent,\r\n                        NgxMatTimepickerToggleComponent,\r\n                        NgxMatTimepickerFieldComponent,\r\n                        NgxMatTimepickerDirective,\r\n                        NgxMatTimepickerToggleIconDirective\r\n                    ],\r\n                    declarations: [\r\n                        // Not really used, but needed to use it as abstract class\r\n                        NgxMatTimepickerBaseDirective,\r\n                        NgxMatTimepickerHoursFaceDirective,\r\n                        //\r\n                        NgxMatTimepickerActiveHourPipe,\r\n                        NgxMatTimepickerActiveMinutePipe,\r\n                        NgxMatTimepickerComponent,\r\n                        NgxMatTimepickerDialComponent,\r\n                        NgxMatTimepickerDialControlComponent,\r\n                        NgxMatTimepickerDialogComponent,\r\n                        NgxMatTimepickerDirective,\r\n                        NgxMatTimepickerFaceComponent,\r\n                        NgxMatTimepickerMinutesFaceComponent,\r\n                        NgxMatTimepickerPeriodComponent,\r\n                        NgxMatTimepickerStandaloneComponent,\r\n                        NgxMatTimepickerToggleComponent,\r\n                        NgxMatTimepicker12HoursFaceComponent,\r\n                        NgxMatTimepicker24HoursFaceComponent,\r\n                        NgxMatTimepickerToggleIconDirective,\r\n                        NgxMatTimepickerAutofocusDirective,\r\n                        NgxMatTimepickerMinutesFormatterPipe,\r\n                        NgxMatTimepickerFieldComponent,\r\n                        NgxMatTimepickerControlComponent,\r\n                        NgxMatTimepickerParserPipe,\r\n                        NgxMatTimepickerContentComponent,\r\n                        NgxMatTimepickerTimeFormatterPipe,\r\n                        NgxMatTimepickerTimeLocalizerPipe\r\n                    ],\r\n                    providers: [\r\n                        NgxMatTimepickerLocaleService,\r\n                        {\r\n                            provide: MAT_FAB_DEFAULT_OPTIONS, useValue: { color: \"void\" }\r\n                        }\r\n                    ]\r\n                }]\r\n        }] });\n\n// COMPONENTS\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxMatTimepickerComponent, NgxMatTimepickerDirective, NgxMatTimepickerFieldComponent, NgxMatTimepickerLocaleService, NgxMatTimepickerModule, NgxMatTimepickerToggleComponent, NgxMatTimepickerToggleIconDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}